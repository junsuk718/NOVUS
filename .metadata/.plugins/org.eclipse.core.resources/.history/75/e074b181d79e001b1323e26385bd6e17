#include "controller.h"

TIM_HandleTypeDef* time_handler;

void controllerInit(TIM_HandleTypeDef* htimex){
	time_handler = htimex;
	time_handler->Instance->CCR1 = 1000;

	setSpeedGain(1, 0);
	setAmplitudeGain(0);
}

float PD_Controller(float p, float d, float error){
    float control_value = 0;

    float proportion_controll_value = error * p;
    float differential_controll_value = ((pre_error - error) / loop_time) * d;

    control_value = proportion_controll_value + differential_controll_value;

    return control_value;
}

float PID_Controller(float p, float i, float d, float error){
    float control_value = 0;

    float proportion_controll_value = error * p;
    integral_error += error;
    float integral_controll_value = integral_error * i;
    float differential_controll_value = ((pre_error - error) / loop_time) * d;

    control_value = proportion_controll_value + differential_controll_value + integral_controll_value;

    return control_value;
}

MODE getMode(RC rc){
	if(rc.aux2 > 500){
		if(rc.aux1 < 500){
			return ARM;
		}else if(rc.aux1 > 500 && rc.aux1 < 1400){
			return NON_MOMENT;
		}else{
			return MOMENT;
		}
	}else{
		return CUT_OFF;
	}
}

float SpeedController(SPT_Value setpoint, MOTOR motor){
    float error = motor.rpm - setpoint.speed;

#ifdef I_CONTROLLER
    float control_value = PID_Controller(speed_gain.P_gain, speed_gain.I_gain, speed_gain.I_gain, error);
#else
    float control_value = PD_Controller(speed_gain.P_gain, speed_gain.D_gain, error);
#endif

    return control_value;
}

void outputMotor(float speed_command, float moment_command, MODE mode){
    float command;

    //! NOTE :: rpm command to throttle percent scalar
    switch(mode){
        case CUT_OFF:
            command = 0;
            break;
        case ARM:
            command = 1000;
            break;
        case NON_MOMENT:
            command = map(speed_command, 500, 5900, 1000, 2000);
            break;
        case MOMENT:
            command = map(moment_command, 500, 5900, 1000, 2000);
            break;
    }

    PWM_Generator(command);
}

void PWM_Generator(float command){
    motor.pwm = command;
    time_handler->Instance->CCR1 = command;
}
