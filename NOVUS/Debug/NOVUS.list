
Novus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009f48  08009f48  00019f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a36c  0800a36c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a374  0800a374  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  200001e0  0800a55c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  0800a55c  000211a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001933e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c7  00000000  00000000  0003954e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206a6  00000000  00000000  0003f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169ff  00000000  00000000  0005f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca08f  00000000  00000000  000762b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  00140398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009f2c 	.word	0x08009f2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08009f2c 	.word	0x08009f2c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <controllerInit>:
#include "Controller/controller.h"

TIM_HandleTypeDef* time_handler;

void controllerInit(TIM_HandleTypeDef* htimex){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	time_handler = htimex;
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <controllerInit+0x44>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
	time_handler->Instance->CCR3 = 1000;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <controllerInit+0x44>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef I_CONTROLLER
	setSpeedGain(7, 4.5, 0);
#else
	setSpeedGain(1, 1.5);
 8000faa:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000fae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fb2:	f000 f96f 	bl	8001294 <setSpeedGain>
#endif
	setAmplitudeGain(1);
 8000fb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fba:	f000 f981 	bl	80012c0 <setAmplitudeGain>

	HAL_TIM_PWM_Start(time_handler, TIM_CHANNEL_3);
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <controllerInit+0x44>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fa7d 	bl	80054c4 <HAL_TIM_PWM_Start>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000e94 	.word	0x20000e94

08000fd8 <PD_Controller>:

float PD_Controller(float p, float d, float error){
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fe2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fe6:	ed87 1a01 	vstr	s2, [r7, #4]
    float control_value = 0;
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

    float proportion_controll_value = error * p;
 8000ff0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	edc7 7a06 	vstr	s15, [r7, #24]
#if 0
    float differential_controll_value = ((pre_error - error) / loop_time) * d;
#else
    float differential_controll_value = (pre_error - error) * d;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <PD_Controller+0x68>)
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	edc7 7a05 	vstr	s15, [r7, #20]
#endif

    control_value = proportion_controll_value + differential_controll_value;
 800101a:	ed97 7a06 	vldr	s14, [r7, #24]
 800101e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	edc7 7a07 	vstr	s15, [r7, #28]

    return control_value;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	ee07 3a90 	vmov	s15, r3
}
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000e60 	.word	0x20000e60

08001044 <getMode>:
    control_value = proportion_controll_value + differential_controll_value + integral_controll_value;

    return control_value;
}

MODE getMode(RC rc){
 8001044:	b490      	push	{r4, r7}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	463c      	mov	r4, r7
 800104c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(rc.aux3 > 1300){
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	f240 5214 	movw	r2, #1300	; 0x514
 8001056:	4293      	cmp	r3, r2
 8001058:	d911      	bls.n	800107e <getMode+0x3a>
		if(rc.aux1 < 500){
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001060:	d201      	bcs.n	8001066 <getMode+0x22>
			return ARM;
 8001062:	2301      	movs	r3, #1
 8001064:	e00c      	b.n	8001080 <getMode+0x3c>
		}else if(rc.aux1 > 500 && rc.aux1 < 1400){
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800106c:	d905      	bls.n	800107a <getMode+0x36>
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001074:	d201      	bcs.n	800107a <getMode+0x36>
			return NON_MOMENT;
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <getMode+0x3c>
		}else{
			return MOMENT;
 800107a:	2303      	movs	r3, #3
 800107c:	e000      	b.n	8001080 <getMode+0x3c>
		}
	}else{
		return CUT_OFF;
 800107e:	2300      	movs	r3, #0
	}
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bc90      	pop	{r4, r7}
 8001088:	4770      	bx	lr
	...

0800108c <speedController>:

float speedController(SPT_Value setpoint, MOTOR motor){
 800108c:	b084      	sub	sp, #16
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	eef0 6a40 	vmov.f32	s13, s0
 8001098:	eeb0 7a60 	vmov.f32	s14, s1
 800109c:	eef0 7a41 	vmov.f32	s15, s2
 80010a0:	f107 0c20 	add.w	ip, r7, #32
 80010a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a8:	edc7 6a01 	vstr	s13, [r7, #4]
 80010ac:	ed87 7a02 	vstr	s14, [r7, #8]
 80010b0:	edc7 7a03 	vstr	s15, [r7, #12]
    float error = setpoint.speed - motor.rpm;
 80010b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a05 	vstr	s15, [r7, #20]

#ifdef I_CONTROLLER
    float control_value = PID_Controller(speed_gain.P_gain, speed_gain.D_gain, speed_gain.I_gain, error);
#else
    float control_value = PD_Controller(speed_gain.P_gain, speed_gain.D_gain, error);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <speedController+0x74>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <speedController+0x74>)
 80010cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80010d0:	ed97 1a05 	vldr	s2, [r7, #20]
 80010d4:	eef0 0a47 	vmov.f32	s1, s14
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f7ff ff7c 	bl	8000fd8 <PD_Controller>
 80010e0:	ed87 0a04 	vstr	s0, [r7, #16]
#endif

    pre_error = error;
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <speedController+0x78>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	6013      	str	r3, [r2, #0]
    return control_value;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	ee07 3a90 	vmov	s15, r3
}
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fc:	b004      	add	sp, #16
 80010fe:	4770      	bx	lr
 8001100:	20000e8c 	.word	0x20000e8c
 8001104:	20000e60 	.word	0x20000e60

08001108 <momentController>:

float momentController(SPT_Value setpoint, MOTOR motor){
 8001108:	b084      	sub	sp, #16
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	eef0 6a40 	vmov.f32	s13, s0
 8001114:	eeb0 7a60 	vmov.f32	s14, s1
 8001118:	eef0 7a41 	vmov.f32	s15, s2
 800111c:	f107 0c18 	add.w	ip, r7, #24
 8001120:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001124:	edc7 6a01 	vstr	s13, [r7, #4]
 8001128:	ed87 7a02 	vstr	s14, [r7, #8]
 800112c:	edc7 7a03 	vstr	s15, [r7, #12]
	return 0;
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	ee07 3a90 	vmov	s15, r3
}
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <outputMotor>:

void outputMotor(float speed_command, float moment_command, MODE mode){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001152:	edc7 0a02 	vstr	s1, [r7, #8]
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    float command;

    //! NOTE :: rpm command to throttle percent scalar
    switch(mode){
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d835      	bhi.n	80011cc <outputMotor+0x84>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <outputMotor+0x20>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001179 	.word	0x08001179
 800116c:	08001187 	.word	0x08001187
 8001170:	08001195 	.word	0x08001195
 8001174:	080011b1 	.word	0x080011b1
        case CUT_OFF:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <outputMotor+0x94>)
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
            command = 1000;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <outputMotor+0x98>)
 8001182:	617b      	str	r3, [r7, #20]
            break;
 8001184:	e022      	b.n	80011cc <outputMotor+0x84>
        case ARM:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <outputMotor+0x94>)
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
            command = 1200;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <outputMotor+0x9c>)
 8001190:	617b      	str	r3, [r7, #20]
            break;
 8001192:	e01b      	b.n	80011cc <outputMotor+0x84>
        case NON_MOMENT:
            command = map(speed_command, 0, 59000, 1190, 2000);
 8001194:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001198:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800119c:	f24e 6178 	movw	r1, #59000	; 0xe678
 80011a0:	2000      	movs	r0, #0
 80011a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a6:	f000 f83b 	bl	8001220 <map>
 80011aa:	ed87 0a05 	vstr	s0, [r7, #20]
            break;
 80011ae:	e00d      	b.n	80011cc <outputMotor+0x84>
        case MOMENT:
            command = map(moment_command, 0, 59000, 1190, 2000);
 80011b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011b4:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80011b8:	f24e 6178 	movw	r1, #59000	; 0xe678
 80011bc:	2000      	movs	r0, #0
 80011be:	ed97 0a02 	vldr	s0, [r7, #8]
 80011c2:	f000 f82d 	bl	8001220 <map>
 80011c6:	ed87 0a05 	vstr	s0, [r7, #20]
            break;
 80011ca:	bf00      	nop
    }

    PWM_Generator(command);
 80011cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80011d0:	f000 f80a 	bl	80011e8 <PWM_Generator>
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000e60 	.word	0x20000e60
 80011e0:	447a0000 	.word	0x447a0000
 80011e4:	44960000 	.word	0x44960000

080011e8 <PWM_Generator>:

void PWM_Generator(float command){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	ed87 0a01 	vstr	s0, [r7, #4]
    motor.pwm = command;
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <PWM_Generator+0x30>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6153      	str	r3, [r2, #20]
    time_handler->Instance->CCR3 = command;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <PWM_Generator+0x34>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001206:	ee17 2a90 	vmov	r2, s15
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000e70 	.word	0x20000e70
 800121c:	20000e94 	.word	0x20000e94

08001220 <map>:
#include "Controller/novus_math.h"

float map(float target, int from_min, int from_max, int to_min, int to_max){
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	ed87 0a05 	vstr	s0, [r7, #20]
 800122a:	6138      	str	r0, [r7, #16]
 800122c:	60f9      	str	r1, [r7, #12]
 800122e:	60ba      	str	r2, [r7, #8]
 8001230:	607b      	str	r3, [r7, #4]
    float mult = (float)(to_max - to_min) / (float)(from_max - from_min);
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001252:	edc7 7a07 	vstr	s15, [r7, #28]
    target = target - from_min;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	ed97 7a05 	vldr	s14, [r7, #20]
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	edc7 7a05 	vstr	s15, [r7, #20]
    return to_min + (target * mult);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001276:	edd7 6a05 	vldr	s13, [r7, #20]
 800127a:	edd7 7a07 	vldr	s15, [r7, #28]
 800127e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3724      	adds	r7, #36	; 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <setSpeedGain>:
  * @param  p Proportional Controller Gain, Recommaned amount of Change 0.1
  * @param  d Differential  Controller Gain, Recommaned amount of Change 0.01
  * @param  i Integral  Controller Gain, Recommaned amount of Change 0.001
  * @retval None
  */
void setSpeedGain(float p, float d){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	ed87 0a01 	vstr	s0, [r7, #4]
 800129e:	edc7 0a00 	vstr	s1, [r7]
	speed_gain.P_gain = p;
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <setSpeedGain+0x28>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
	speed_gain.D_gain = d;
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <setSpeedGain+0x28>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6053      	str	r3, [r2, #4]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000e8c 	.word	0x20000e8c

080012c0 <setAmplitudeGain>:
  * @brief  Setting amount of multiplied sin wave's Amplitude
  * @param  gain Setting amount of multiply with RC controller's Scalar
  *             Recommaned amount of Change 0.1
  * @retval None
  */
void setAmplitudeGain(float gain){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
	amplitude_gain = gain;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <setAmplitudeGain+0x1c>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000e28 	.word	0x20000e28

080012e0 <getStickPercent>:
/**
  * @brief  Unit Conversion RC command - PWM data to Percentage 
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent of stick position
  */
float getStickPercent(uint16_t stick_pos){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
    float percent = map(stick_pos, RC_MIN, RC_MAX, 0, 100);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	2200      	movs	r2, #0
 80012f8:	f240 61aa 	movw	r1, #1706	; 0x6aa
 80012fc:	f44f 70ab 	mov.w	r0, #342	; 0x156
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	f7ff ff8c 	bl	8001220 <map>
 8001308:	ed87 0a03 	vstr	s0, [r7, #12]

    return percent;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	ee07 3a90 	vmov	s15, r3
}
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <getStickVector>:
  *         '+'Vector = UP/RIGHT
  *         '-'Vector = DOWN/LEFT
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent vector of stick position
  */
float getStickVector(uint16_t stick_pos){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
    float vector = map(stick_pos, RC_MIN, RC_MAX, -100, 100);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001336:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800133a:	f44f 70ab 	mov.w	r0, #342	; 0x156
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	f7ff ff6d 	bl	8001220 <map>
 8001346:	ed87 0a03 	vstr	s0, [r7, #12]

    return vector;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <getStickScalar>:
/**
  * @brief  Unit Conversion RC command - Percentage Vector to Percentage Scalar
  * @param  stick_vector percent vector of RC stick position
  * @retval percent scalar of stick position
  */
float getStickScalar(float stick_vector){
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	ed87 0a01 	vstr	s0, [r7, #4]
    float stick_scalar = 0;
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]

    if(stick_vector < 0){
 800136a:	edd7 7a01 	vldr	s15, [r7, #4]
 800136e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d506      	bpl.n	8001386 <getStickScalar+0x2c>
        stick_scalar = stick_vector * (-1);
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	eef1 7a67 	vneg.f32	s15, s15
 8001380:	edc7 7a03 	vstr	s15, [r7, #12]
 8001384:	e001      	b.n	800138a <getStickScalar+0x30>
    }else{
        stick_scalar = stick_vector;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]
    }

    return stick_scalar;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	ee07 3a90 	vmov	s15, r3
}
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <checkMargin>:
  * @brief  Check Margin of RC Command 
  *         When Roll/Pitch Stick is in center position it will ignore a tiny movement
  * @param  stick_vector percent vector of RC stick position
  * @retval percent vector of stick position
  */
float checkMargin(float stick_vector){
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	ed87 0a01 	vstr	s0, [r7, #4]
    if(stick_vector > (RC_MARGIN_RANGE * (-1)) && stick_vector < RC_MARGIN_RANGE){
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd0b      	ble.n	80013d2 <checkMargin+0x34>
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d502      	bpl.n	80013d2 <checkMargin+0x34>
        stick_vector = 0;
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
    }
    return stick_vector;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	ee07 3a90 	vmov	s15, r3
}
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <setpoint>:
  *         based on RC command.
  * @param  rc have 7ch information (throttle, roll, pitch, yaw, aux1, aux2, aux3)
  *         this is PWM based data
  * @retval SPT_Value setpoint - updated setpoint value
  */
SPT_Value setpoint(RC rc){
 80013e6:	b590      	push	{r4, r7, lr}
 80013e8:	b08f      	sub	sp, #60	; 0x3c
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f107 0410 	add.w	r4, r7, #16
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    SPT_Value setpoint;

    setpoint.speed = setSpeed(rc.throttle);
 80013f4:	8a3b      	ldrh	r3, [r7, #16]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f831 	bl	800145e <setSpeed>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	edc7 7a08 	vstr	s15, [r7, #32]
    setpoint.amplitude = setAmplitude(rc.roll, rc.pitch);
 8001404:	8a7b      	ldrh	r3, [r7, #18]
 8001406:	8aba      	ldrh	r2, [r7, #20]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f846 	bl	800149c <setAmplitude>
 8001410:	eef0 7a40 	vmov.f32	s15, s0
 8001414:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    setpoint.cyclic_shift = setCyclicShift(rc.roll, rc.pitch);
 8001418:	8a7b      	ldrh	r3, [r7, #18]
 800141a:	8aba      	ldrh	r2, [r7, #20]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f896 	bl	8001550 <setCyclicShift>
 8001424:	eef0 7a40 	vmov.f32	s15, s0
 8001428:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    return setpoint;
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	f107 0220 	add.w	r2, r7, #32
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800143a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800143c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	ee06 1a90 	vmov	s13, r1
 8001444:	ee07 2a10 	vmov	s14, r2
 8001448:	ee07 3a90 	vmov	s15, r3
}
 800144c:	eeb0 0a66 	vmov.f32	s0, s13
 8001450:	eef0 0a47 	vmov.f32	s1, s14
 8001454:	eeb0 1a67 	vmov.f32	s2, s15
 8001458:	373c      	adds	r7, #60	; 0x3c
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <setSpeed>:
/**
  * @brief  Calculate target speed based throttle information
  * @param  throttle RC throttle channel command based on PWM
  * @retval updated target speed setpoint value
  */
float setSpeed(uint16_t throttle){
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	80fb      	strh	r3, [r7, #6]
    float throttle_percent = getStickPercent(throttle);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff38 	bl	80012e0 <getStickPercent>
 8001470:	ed87 0a03 	vstr	s0, [r7, #12]

    //!NOTE :: Percent to RPM @mhlee
    float speed = map(throttle_percent, 0, 100, 500, 59000);
 8001474:	f24e 6378 	movw	r3, #59000	; 0xe678
 8001478:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800147c:	2164      	movs	r1, #100	; 0x64
 800147e:	2000      	movs	r0, #0
 8001480:	ed97 0a03 	vldr	s0, [r7, #12]
 8001484:	f7ff fecc 	bl	8001220 <map>
 8001488:	ed87 0a02 	vstr	s0, [r7, #8]
    
    return speed;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	ee07 3a90 	vmov	s15, r3
}
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <setAmplitude>:
  * @brief  Calculate target amplitude of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target amplitude setpoint value
  */
float setAmplitude(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
    float roll_scalar = getStickScalar(getStickVector(roll_stick_pos));
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff34 	bl	800131c <getStickVector>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f7ff ff4d 	bl	800135a <getStickScalar>
 80014c0:	ed87 0a07 	vstr	s0, [r7, #28]
    float pitch_scalar = getStickScalar(getStickVector(pitch_stick_pos));
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff28 	bl	800131c <getStickVector>
 80014cc:	eef0 7a40 	vmov.f32	s15, s0
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	f7ff ff41 	bl	800135a <getStickScalar>
 80014d8:	ed87 0a06 	vstr	s0, [r7, #24]

    float pitch_ratio = pitch_scalar / (roll_scalar + pitch_scalar);
 80014dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80014e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	edc7 7a05 	vstr	s15, [r7, #20]
    float roll_ratio = 1 - pitch_ratio;
 80014f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	edc7 7a04 	vstr	s15, [r7, #16]

    float cmd_scalar = (pitch_scalar * pitch_ratio) + (roll_scalar * roll_ratio);
 8001504:	ed97 7a06 	vldr	s14, [r7, #24]
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	edd7 6a07 	vldr	s13, [r7, #28]
 8001514:	edd7 7a04 	vldr	s15, [r7, #16]
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	edc7 7a03 	vstr	s15, [r7, #12]

    float amplitude = (cmd_scalar * amplitude_gain);
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <setAmplitude+0xac>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ed97 7a03 	vldr	s14, [r7, #12]
 800152e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001532:	edc7 7a02 	vstr	s15, [r7, #8]

    return amplitude;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	ee07 3a90 	vmov	s15, r3
}
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000e28 	.word	0x20000e28
 800154c:	00000000 	.word	0x00000000

08001550 <setCyclicShift>:
  * @brief  Calculate target cyclic shift of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target cyclic shift setpoint value
  */
float setCyclicShift(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	460a      	mov	r2, r1
 800155a:	80fb      	strh	r3, [r7, #6]
 800155c:	4613      	mov	r3, r2
 800155e:	80bb      	strh	r3, [r7, #4]
    float roll_vector = getStickVector(roll_stick_pos);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff feda 	bl	800131c <getStickVector>
 8001568:	ed87 0a06 	vstr	s0, [r7, #24]
    float pitch_vector = getStickVector(pitch_stick_pos);
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fed4 	bl	800131c <getStickVector>
 8001574:	ed87 0a05 	vstr	s0, [r7, #20]

    roll_vector = checkMargin(roll_vector);
 8001578:	ed97 0a06 	vldr	s0, [r7, #24]
 800157c:	f7ff ff0f 	bl	800139e <checkMargin>
 8001580:	ed87 0a06 	vstr	s0, [r7, #24]
    pitch_vector = checkMargin(pitch_vector);
 8001584:	ed97 0a05 	vldr	s0, [r7, #20]
 8001588:	f7ff ff09 	bl	800139e <checkMargin>
 800158c:	ed87 0a05 	vstr	s0, [r7, #20]

    float roll_scalar = getStickScalar(roll_vector);
 8001590:	ed97 0a06 	vldr	s0, [r7, #24]
 8001594:	f7ff fee1 	bl	800135a <getStickScalar>
 8001598:	ed87 0a04 	vstr	s0, [r7, #16]
    float pitch_scalar = getStickScalar(pitch_vector);
 800159c:	ed97 0a05 	vldr	s0, [r7, #20]
 80015a0:	f7ff fedb 	bl	800135a <getStickScalar>
 80015a4:	ed87 0a03 	vstr	s0, [r7, #12]

    float shift = 0;
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]

    if(roll_vector == 0 && pitch_vector == 0){
 80015ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	d10a      	bne.n	80015d2 <setCyclicShift+0x82>
 80015bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d103      	bne.n	80015d2 <setCyclicShift+0x82>
        shift = 0;                      /*!< There is any command Roll and Pitch  */
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e09f      	b.n	8001712 <setCyclicShift+0x1c2>
    }else if(roll_vector == 0 && pitch_vector != 0){
 80015d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80015d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d114      	bne.n	800160a <setCyclicShift+0xba>
 80015e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d00d      	beq.n	800160a <setCyclicShift+0xba>
        if(pitch_vector < 0){
 80015ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d502      	bpl.n	8001602 <setCyclicShift+0xb2>
            shift = PI;                 /*!< There is only negative Pitch command  */
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <setCyclicShift+0x1f0>)
 80015fe:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 8001600:	e087      	b.n	8001712 <setCyclicShift+0x1c2>
        }else{
            shift = 0;                  /*!< There is only positive Pitch command  */
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 8001608:	e083      	b.n	8001712 <setCyclicShift+0x1c2>
        }
    }else if(roll_vector != 0 && pitch_vector == 0){
 800160a:	edd7 7a06 	vldr	s15, [r7, #24]
 800160e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	d013      	beq.n	8001640 <setCyclicShift+0xf0>
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d10c      	bne.n	8001640 <setCyclicShift+0xf0>
        if(roll_vector < 0){
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d502      	bpl.n	800163a <setCyclicShift+0xea>
            shift = (3 * PI) / 2.0;     /*!< There is only negative Roll command  */
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <setCyclicShift+0x1f4>)
 8001636:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 8001638:	e06b      	b.n	8001712 <setCyclicShift+0x1c2>
        }else{
            shift = PI / 2.0;           /*!< There is only positive Roll command  */
 800163a:	4b43      	ldr	r3, [pc, #268]	; (8001748 <setCyclicShift+0x1f8>)
 800163c:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 800163e:	e068      	b.n	8001712 <setCyclicShift+0x1c2>
        }
    }else{
        float shift_ratio = (PI/2) * (roll_scalar / (roll_scalar+pitch_scalar));
 8001640:	ed97 7a04 	vldr	s14, [r7, #16]
 8001644:	edd7 7a03 	vldr	s15, [r7, #12]
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001650:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001654:	ee16 0a90 	vmov	r0, s13
 8001658:	f7fe ff9e 	bl	8000598 <__aeabi_f2d>
 800165c:	a332      	add	r3, pc, #200	; (adr r3, 8001728 <setCyclicShift+0x1d8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fff1 	bl	8000648 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fac3 	bl	8000bf8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	60bb      	str	r3, [r7, #8]

        if(pitch_vector < 0){
 8001676:	edd7 7a05 	vldr	s15, [r7, #20]
 800167a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d52a      	bpl.n	80016da <setCyclicShift+0x18a>
            if(roll_vector < 0){
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d510      	bpl.n	80016b4 <setCyclicShift+0x164>
                shift = PI + shift_ratio;       /*!< There is negative Pitch and negative Roll command  */
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	f7fe ff80 	bl	8000598 <__aeabi_f2d>
 8001698:	a325      	add	r3, pc, #148	; (adr r3, 8001730 <setCyclicShift+0x1e0>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe fe1d 	bl	80002dc <__adddf3>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff faa5 	bl	8000bf8 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e02e      	b.n	8001712 <setCyclicShift+0x1c2>
            }else{
                shift = PI - shift_ratio;     /*!< There is negative Pitch and positive Roll command  */
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	a11c      	add	r1, pc, #112	; (adr r1, 8001730 <setCyclicShift+0x1e0>)
 80016c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c4:	f7fe fe08 	bl	80002d8 <__aeabi_dsub>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa92 	bl	8000bf8 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	e01b      	b.n	8001712 <setCyclicShift+0x1c2>
            }
        }else{
            if(roll_vector < 0){
 80016da:	edd7 7a06 	vldr	s15, [r7, #24]
 80016de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d512      	bpl.n	800170e <setCyclicShift+0x1be>
                shift = (2*PI) - shift_ratio;       /*!< There is positive Pitch and negative Roll command  */
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f7fe ff55 	bl	8000598 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	a111      	add	r1, pc, #68	; (adr r1, 8001738 <setCyclicShift+0x1e8>)
 80016f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016f8:	f7fe fdee 	bl	80002d8 <__aeabi_dsub>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa78 	bl	8000bf8 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	e001      	b.n	8001712 <setCyclicShift+0x1c2>
            }else{
                shift = shift_ratio;            /*!< There is positive Pitch and positive Roll command  */
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return shift;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	ee07 3a90 	vmov	s15, r3
}
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	53c8d4f1 	.word	0x53c8d4f1
 800172c:	3ff921fb 	.word	0x3ff921fb
 8001730:	53c8d4f1 	.word	0x53c8d4f1
 8001734:	400921fb 	.word	0x400921fb
 8001738:	53c8d4f1 	.word	0x53c8d4f1
 800173c:	401921fb 	.word	0x401921fb
 8001740:	40490fdb 	.word	0x40490fdb
 8001744:	4096cbe4 	.word	0x4096cbe4
 8001748:	3fc90fdb 	.word	0x3fc90fdb

0800174c <as5147_Init>:

#include "as5147.h"

static uint8_t chip_num;

int8_t as5147_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]

	chip_num = addChip(hspix, GPIO_port, GPIO_num);
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	461a      	mov	r2, r3
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 fdb7 	bl	80022d4 <addChip>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <as5147_Init+0x4c>)
 800176c:	701a      	strb	r2, [r3, #0]
	if(chip_num < 0){
		return -1;
	}

	registerRead(AS5047P_ERRFL);
 800176e:	2001      	movs	r0, #1
 8001770:	f000 f886 	bl	8001880 <registerRead>
	int16_t error = registerRead(AS5047P_ERRFL);
 8001774:	2001      	movs	r0, #1
 8001776:	f000 f883 	bl	8001880 <registerRead>
 800177a:	4603      	mov	r3, r0
 800177c:	82fb      	strh	r3, [r7, #22]

	if(error != 0) return -1;
 800177e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <as5147_Init+0x40>
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e000      	b.n	800178e <as5147_Init+0x42>

	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001fc 	.word	0x200001fc

0800179c <as5147_setZeroPosition>:

int8_t as5147_setZeroPosition(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
	Frame current_zero_position = { 0, };
 80017a2:	2300      	movs	r3, #0
 80017a4:	813b      	strh	r3, [r7, #8]
	Frame current_position = { 0, };
 80017a6:	2300      	movs	r3, #0
 80017a8:	80bb      	strh	r3, [r7, #4]
	uint16_t zero_position_L = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	81fb      	strh	r3, [r7, #14]
	uint16_t zero_position_M = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	81bb      	strh	r3, [r7, #12]
	int8_t error;

	current_zero_position.raw = registerRead(AS5047P_ZPOSL);
 80017b2:	2017      	movs	r0, #23
 80017b4:	f000 f864 	bl	8001880 <registerRead>
 80017b8:	4603      	mov	r3, r0
 80017ba:	813b      	strh	r3, [r7, #8]
	if(current_zero_position.values.data < 0) return -1;

	error = registerWrite(AS5047P_ZPOSL, current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN));
 80017bc:	893b      	ldrh	r3, [r7, #8]
 80017be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	2017      	movs	r0, #23
 80017ce:	f000 f87b 	bl	80018c8 <registerWrite>
 80017d2:	4603      	mov	r3, r0
 80017d4:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSL, 0x0000);
 80017d6:	2100      	movs	r1, #0
 80017d8:	2017      	movs	r0, #23
 80017da:	f000 f875 	bl	80018c8 <registerWrite>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 80017e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <as5147_setZeroPosition+0x5a>
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	e03f      	b.n	8001876 <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f001 f982 	bl	8002b00 <HAL_Delay>

	current_position.raw = registerRead(AS5047P_ANGLECOM);
 80017fc:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001800:	f000 f83e 	bl	8001880 <registerRead>
 8001804:	4603      	mov	r3, r0
 8001806:	80bb      	strh	r3, [r7, #4]
	if(current_position.values.data < 0) return -1;

	zero_position_L = (current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (current_position.values.data & AS5047P_ZPOSL_ZPOSL);
 8001808:	893b      	ldrh	r3, [r7, #8]
 800180a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800180e:	b29b      	uxth	r3, r3
 8001810:	b21b      	sxth	r3, r3
 8001812:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001816:	b21a      	sxth	r2, r3
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800181e:	b29b      	uxth	r3, r3
 8001820:	b21b      	sxth	r3, r3
 8001822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	81fb      	strh	r3, [r7, #14]
	zero_position_M = (current_position.values.data >> 6 ) & AS5047P_ZPOSM_ZPOSM;
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001834:	b29b      	uxth	r3, r3
 8001836:	119b      	asrs	r3, r3, #6
 8001838:	b29b      	uxth	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	81bb      	strh	r3, [r7, #12]

	error = registerWrite(AS5047P_ZPOSL, zero_position_L);
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	4619      	mov	r1, r3
 8001842:	2017      	movs	r0, #23
 8001844:	f000 f840 	bl	80018c8 <registerWrite>
 8001848:	4603      	mov	r3, r0
 800184a:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSM, zero_position_M);
 800184c:	89bb      	ldrh	r3, [r7, #12]
 800184e:	4619      	mov	r1, r3
 8001850:	2016      	movs	r0, #22
 8001852:	f000 f839 	bl	80018c8 <registerWrite>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	4313      	orrs	r3, r2
 800185e:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8001860:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <as5147_setZeroPosition+0xd2>
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	e003      	b.n	8001876 <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f001 f946 	bl	8002b00 <HAL_Delay>

	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <registerRead>:
	mag = (registerRead(AS5047P_MAG) & 0x3FF) * 360 / 16384.;

	return mag;
}

uint16_t registerRead(uint16_t resgister_address){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
	int16_t register_data = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	81fb      	strh	r3, [r7, #14]
	readWrite2ByteRegister(&command.raw, chip_num);

	command = packCommandFrame(AS5047P_NOP, AS5047P_ACCESS_READ);
	register_data = readWrite2ByteRegister(&command.raw, chip_num);
#else
	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_READ);
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2101      	movs	r1, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f856 	bl	8001944 <packCommandFrame>
 8001898:	4603      	mov	r3, r0
 800189a:	81bb      	strh	r3, [r7, #12]
	write2ByteRegister(&command.raw, chip_num);
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <registerRead+0x44>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fdc8 	bl	800243c <write2ByteRegister>

	register_data = read2ByteRegister(chip_num);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <registerRead+0x44>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fd6f 	bl	8002394 <read2ByteRegister>
 80018b6:	4603      	mov	r3, r0
 80018b8:	81fb      	strh	r3, [r7, #14]
#endif

	return register_data;
 80018ba:	89fb      	ldrh	r3, [r7, #14]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001fc 	.word	0x200001fc

080018c8 <registerWrite>:

int8_t registerWrite(uint16_t resgister_address, uint16_t data){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	4613      	mov	r3, r2
 80018d6:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef state;

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_WRITE);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f831 	bl	8001944 <packCommandFrame>
 80018e2:	4603      	mov	r3, r0
 80018e4:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <registerWrite+0x78>)
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fda3 	bl	800243c <write2ByteRegister>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <registerWrite+0x3e>
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	e017      	b.n	8001936 <registerWrite+0x6e>

	command = packCommandFrame(data, AS5047P_ACCESS_WRITE);
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f81a 	bl	8001944 <packCommandFrame>
 8001910:	4603      	mov	r3, r0
 8001912:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <registerWrite+0x78>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd8c 	bl	800243c <write2ByteRegister>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <registerWrite+0x6c>
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e000      	b.n	8001936 <registerWrite+0x6e>

	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001fc 	.word	0x200001fc

08001944 <packCommandFrame>:

Frame packCommandFrame(uint16_t data, uint8_t rw){
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	80fb      	strh	r3, [r7, #6]
 8001950:	4613      	mov	r3, r2
 8001952:	717b      	strb	r3, [r7, #5]
	Frame frame = { 0, };
 8001954:	2300      	movs	r3, #0
 8001956:	81bb      	strh	r3, [r7, #12]
	frame.values.data = data & AS5047P_FRAME_DATA;
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800195e:	b29a      	uxth	r2, r3
 8001960:	89bb      	ldrh	r3, [r7, #12]
 8001962:	f362 030d 	bfi	r3, r2, #0, #14
 8001966:	81bb      	strh	r3, [r7, #12]
	frame.values.rw = rw;
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	7b7b      	ldrb	r3, [r7, #13]
 8001972:	f362 1386 	bfi	r3, r2, #6, #1
 8001976:	737b      	strb	r3, [r7, #13]
	frame.values.pard = calcParity(frame.raw);
 8001978:	89bb      	ldrh	r3, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f80d 	bl	800199a <calcParity>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	f362 13c7 	bfi	r3, r2, #7, #1
 800198e:	737b      	strb	r3, [r7, #13]

	return frame;
 8001990:	89bb      	ldrh	r3, [r7, #12]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <calcParity>:

uint8_t calcParity(uint16_t data){
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 8;              // example for 8-bir (this line scales it up to 16 bit)
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4053      	eors	r3, r2
 80019ae:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	4053      	eors	r3, r2
 80019ba:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4053      	eors	r3, r2
 80019c6:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4053      	eors	r3, r2
 80019d2:	80fb      	strh	r3, [r7, #6]

	data = data & 0x0001;
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)data;
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	b2db      	uxtb	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f0:	f001 f815 	bl	8002a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 f85a 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f000 fac4 	bl	8001f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fc:	f000 fa98 	bl	8001f30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a00:	f000 fa4a 	bl	8001e98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a04:	f000 f8b8 	bl	8001b78 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a08:	f000 f8f4 	bl	8001bf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a0c:	f000 f9a2 	bl	8001d54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001a10:	f000 f9ee 	bl	8001df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  controllerInit(&htim1);
 8001a14:	481d      	ldr	r0, [pc, #116]	; (8001a8c <main+0xa0>)
 8001a16:	f7ff fabb 	bl	8000f90 <controllerInit>

  if(as5147_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin)){
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a20:	481b      	ldr	r0, [pc, #108]	; (8001a90 <main+0xa4>)
 8001a22:	f7ff fe93 	bl	800174c <as5147_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <main+0x48>
	  loop_flag = 0;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <main+0xa8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <main+0x58>
  }else if(as5147_setZeroPosition()){
 8001a34:	f7ff feb2 	bl	800179c <as5147_setZeroPosition>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <main+0x58>
	  loop_flag = 0;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <main+0xa8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
  }
  start_time = HAL_GetTick();
 8001a44:	f001 f850 	bl	8002ae8 <HAL_GetTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <main+0xac>)
 8001a4e:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(loop_flag){
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <main+0xa8>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0fb      	beq.n	8001a50 <main+0x64>
		main_loop();
 8001a58:	f000 fb0a 	bl	8002070 <main_loop>
		HAL_UART_Transmit(&huart2, (uint8_t*)&motor.ang, 4, 1000);
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	2204      	movs	r2, #4
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <main+0xb0>)
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <main+0xb4>)
 8001a66:	f004 fded 	bl	8006644 <HAL_UART_Transmit>
		loop_time = HAL_GetTick() - gtick;
 8001a6a:	f001 f83d 	bl	8002ae8 <HAL_GetTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <main+0xb8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <main+0xbc>)
 8001a7e:	801a      	strh	r2, [r3, #0]
		gtick = HAL_GetTick();
 8001a80:	f001 f832 	bl	8002ae8 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <main+0xb8>)
 8001a88:	6013      	str	r3, [r2, #0]
	  if(loop_flag){
 8001a8a:	e7e1      	b.n	8001a50 <main+0x64>
 8001a8c:	20001008 	.word	0x20001008
 8001a90:	20001054 	.word	0x20001054
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000e2c 	.word	0x20000e2c
 8001a9c:	20000e74 	.word	0x20000e74
 8001aa0:	20001104 	.word	0x20001104
 8001aa4:	20000200 	.word	0x20000200
 8001aa8:	20000e12 	.word	0x20000e12

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0a4      	sub	sp, #144	; 0x90
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab6:	2238      	movs	r2, #56	; 0x38
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 fd5e 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2244      	movs	r2, #68	; 0x44
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 fd50 	bl	800757c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f001 fd4d 	bl	800357c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aec:	2340      	movs	r3, #64	; 0x40
 8001aee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af0:	2302      	movs	r3, #2
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af4:	2302      	movs	r3, #2
 8001af6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001af8:	2304      	movs	r3, #4
 8001afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001afc:	2355      	movs	r3, #85	; 0x55
 8001afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fde3 	bl	80036e4 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001b24:	f000 fa9e 	bl	8002064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b40:	2104      	movs	r1, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 f8e6 	bl	8003d14 <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b4e:	f000 fa89 	bl	8002064 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001b52:	2303      	movs	r3, #3
 8001b54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 faf3 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b6c:	f000 fa7a 	bl	8002064 <Error_Handler>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3790      	adds	r7, #144	; 0x90
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <MX_SPI1_Init+0x78>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b92:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001b96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_SPI1_Init+0x74>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI1_Init+0x74>)
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bae:	2210      	movs	r2, #16
 8001bb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bd8:	f002 fca8 	bl	800452c <HAL_SPI_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001be2:	f000 fa3f 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20001054 	.word	0x20001054
 8001bf0:	40013000 	.word	0x40013000

08001bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2234      	movs	r2, #52	; 0x34
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fca4 	bl	800757c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c36:	4a46      	ldr	r2, [pc, #280]	; (8001d50 <MX_TIM1_Init+0x15c>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c3c:	22a9      	movs	r2, #169	; 0xa9
 8001c3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c48:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c60:	483a      	ldr	r0, [pc, #232]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c62:	f003 fb77 	bl	8005354 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c6c:	f000 f9fa 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4833      	ldr	r0, [pc, #204]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c7e:	f003 fe31 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c88:	f000 f9ec 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c8c:	482f      	ldr	r0, [pc, #188]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001c8e:	f003 fbb8 	bl	8005402 <HAL_TIM_PWM_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c98:	f000 f9e4 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cac:	4619      	mov	r1, r3
 8001cae:	4827      	ldr	r0, [pc, #156]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001cb0:	f004 fb56 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cba:	f000 f9d3 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481a      	ldr	r0, [pc, #104]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001ce4:	f003 fcee 	bl	80056c4 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001cee:	f000 f9b9 	bl	8002064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001d30:	f004 fb98 	bl	8006464 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001d3a:	f000 f993 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d3e:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM1_Init+0x158>)
 8001d40:	f000 fc5e 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8001d44:	bf00      	nop
 8001d46:	3770      	adds	r7, #112	; 0x70
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20001008 	.word	0x20001008
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d7c:	22a9      	movs	r2, #169	; 0xa9
 8001d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <MX_TIM2_Init+0x98>)
 8001d9c:	f003 fada 	bl	8005354 <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001da6:	f000 f95d 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_TIM2_Init+0x98>)
 8001db8:	f003 fd94 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc2:	f000 f94f 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_TIM2_Init+0x98>)
 8001dd4:	f004 fac4 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dde:	f000 f941 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200010b8 	.word	0x200010b8

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <MX_USART1_UART_Init+0xa0>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e38:	4814      	ldr	r0, [pc, #80]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e3a:	f004 fbb3 	bl	80065a4 <HAL_UART_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e44:	f000 f90e 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4810      	ldr	r0, [pc, #64]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e4c:	f005 faa2 	bl	8007394 <HAL_UARTEx_SetTxFifoThreshold>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e56:	f000 f905 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e5e:	f005 fad7 	bl	8007410 <HAL_UARTEx_SetRxFifoThreshold>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e68:	f000 f8fc 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e6e:	f005 fa58 	bl	8007322 <HAL_UARTEx_DisableFifoMode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e78:	f000 f8f4 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_DMA(&huart1, byte_data, 16);
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4905      	ldr	r1, [pc, #20]	; (8001e94 <MX_USART1_UART_Init+0xa4>)
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <MX_USART1_UART_Init+0x9c>)
 8001e82:	f004 fc75 	bl	8006770 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000f08 	.word	0x20000f08
 8001e90:	40013800 	.word	0x40013800
 8001e94:	20000e14 	.word	0x20000e14

08001e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <MX_USART2_UART_Init+0x94>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee0:	4811      	ldr	r0, [pc, #68]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ee2:	f004 fb5f 	bl	80065a4 <HAL_UART_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eec:	f000 f8ba 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001ef4:	f005 fa4e 	bl	8007394 <HAL_UARTEx_SetTxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001efe:	f000 f8b1 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f02:	2100      	movs	r1, #0
 8001f04:	4808      	ldr	r0, [pc, #32]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001f06:	f005 fa83 	bl	8007410 <HAL_UARTEx_SetRxFifoThreshold>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f10:	f000 f8a8 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_USART2_UART_Init+0x90>)
 8001f16:	f005 fa04 	bl	8007322 <HAL_UARTEx_DisableFifoMode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f20:	f000 f8a0 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20001104 	.word	0x20001104
 8001f2c:	40004400 	.word	0x40004400

08001f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6493      	str	r3, [r2, #72]	; 0x48
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6493      	str	r3, [r2, #72]	; 0x48
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_DMA_Init+0x50>)
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	200b      	movs	r0, #11
 8001f6c:	f000 fec5 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f70:	200b      	movs	r0, #11
 8001f72:	f000 fedc 	bl	8002d2e <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_GPIO_Init+0xa4>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2110      	movs	r1, #16
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f001 fabb 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fdc:	4813      	ldr	r0, [pc, #76]	; (800202c <MX_GPIO_Init+0xa8>)
 8001fde:	f001 fab5 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f001 f924 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	4619      	mov	r1, r3
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_GPIO_Init+0xa8>)
 800201a:	f001 f915 	bl	8003248 <HAL_GPIO_Init>

}
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	48000400 	.word	0x48000400

08002030 <HAL_UART_RxCpltCallback>:
	float w = (differential * (2*PI)/360) * 1000;			// rad/sec
	motor.rpm = (w * 60 / (2*PI));
	motor.pre_ang = motor.ang;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huartx){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	if(huartx->Instance == huart1.Instance){
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_UART_RxCpltCallback+0x2c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_UART_RxCpltCallback+0x22>
		spectrum_read();
 8002044:	f000 f8cc 	bl	80021e0 <spectrum_read>
		HAL_UART_Receive_DMA(&huart1, byte_data, 16);
 8002048:	2210      	movs	r2, #16
 800204a:	4905      	ldr	r1, [pc, #20]	; (8002060 <HAL_UART_RxCpltCallback+0x30>)
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <HAL_UART_RxCpltCallback+0x2c>)
 800204e:	f004 fb8f 	bl	8006770 <HAL_UART_Receive_DMA>
	}
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000f08 	.word	0x20000f08
 8002060:	20000e14 	.word	0x20000e14

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <main_loop>:
#include "main_loop.h"

void main_loop(){
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	ed2d 8b02 	vpush	{d8}
 8002076:	b084      	sub	sp, #16
 8002078:	af04      	add	r7, sp, #16
	setpoint_value = setpoint(rc);
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <main_loop+0x158>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2000      	movs	r0, #0
 8002080:	4610      	mov	r0, r2
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	2100      	movs	r1, #0
 8002086:	4611      	mov	r1, r2
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	2400      	movs	r4, #0
 800208c:	4614      	mov	r4, r2
 800208e:	899a      	ldrh	r2, [r3, #12]
 8002090:	2300      	movs	r3, #0
 8002092:	f362 030f 	bfi	r3, r2, #0, #16
 8002096:	4622      	mov	r2, r4
 8002098:	f7ff f9a5 	bl	80013e6 <setpoint>
 800209c:	eef0 6a40 	vmov.f32	s13, s0
 80020a0:	eeb0 7a60 	vmov.f32	s14, s1
 80020a4:	eef0 7a41 	vmov.f32	s15, s2
 80020a8:	4b48      	ldr	r3, [pc, #288]	; (80021cc <main_loop+0x15c>)
 80020aa:	edc3 6a00 	vstr	s13, [r3]
 80020ae:	ed83 7a01 	vstr	s14, [r3, #4]
 80020b2:	edc3 7a02 	vstr	s15, [r3, #8]
	mode = getMode(rc);
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <main_loop+0x158>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2000      	movs	r0, #0
 80020bc:	4610      	mov	r0, r2
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4611      	mov	r1, r2
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	2400      	movs	r4, #0
 80020c8:	4614      	mov	r4, r2
 80020ca:	899a      	ldrh	r2, [r3, #12]
 80020cc:	2300      	movs	r3, #0
 80020ce:	f362 030f 	bfi	r3, r2, #0, #16
 80020d2:	4622      	mov	r2, r4
 80020d4:	f7fe ffb6 	bl	8001044 <getMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <main_loop+0x160>)
 80020de:	701a      	strb	r2, [r3, #0]

	if(mode == NON_MOMENT){
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <main_loop+0x160>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d127      	bne.n	8002138 <main_loop+0xc8>
		speed_command = motor.rpm + speedController(setpoint_value, motor);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <main_loop+0x164>)
 80020ea:	ed93 8a03 	vldr	s16, [r3, #12]
 80020ee:	4c39      	ldr	r4, [pc, #228]	; (80021d4 <main_loop+0x164>)
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <main_loop+0x15c>)
 80020f2:	edd3 6a00 	vldr	s13, [r3]
 80020f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80020fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fe:	466d      	mov	r5, sp
 8002100:	f104 0310 	add.w	r3, r4, #16
 8002104:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002108:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800210c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002110:	eeb0 0a66 	vmov.f32	s0, s13
 8002114:	eef0 0a47 	vmov.f32	s1, s14
 8002118:	eeb0 1a67 	vmov.f32	s2, s15
 800211c:	f7fe ffb6 	bl	800108c <speedController>
 8002120:	eef0 7a40 	vmov.f32	s15, s0
 8002124:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <main_loop+0x168>)
 800212a:	edc3 7a00 	vstr	s15, [r3]
		moment_command = 0;
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <main_loop+0x16c>)
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e033      	b.n	80021a0 <main_loop+0x130>
	}else if(mode == MOMENT){
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <main_loop+0x160>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d127      	bne.n	8002190 <main_loop+0x120>
		moment_command = motor.rpm + momentController(setpoint_value, motor);
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <main_loop+0x164>)
 8002142:	ed93 8a03 	vldr	s16, [r3, #12]
 8002146:	4c23      	ldr	r4, [pc, #140]	; (80021d4 <main_loop+0x164>)
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <main_loop+0x15c>)
 800214a:	edd3 6a00 	vldr	s13, [r3]
 800214e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002152:	edd3 7a02 	vldr	s15, [r3, #8]
 8002156:	466d      	mov	r5, sp
 8002158:	f104 0310 	add.w	r3, r4, #16
 800215c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002160:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002168:	eeb0 0a66 	vmov.f32	s0, s13
 800216c:	eef0 0a47 	vmov.f32	s1, s14
 8002170:	eeb0 1a67 	vmov.f32	s2, s15
 8002174:	f7fe ffc8 	bl	8001108 <momentController>
 8002178:	eef0 7a40 	vmov.f32	s15, s0
 800217c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <main_loop+0x16c>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
		speed_command = 0;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <main_loop+0x168>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e007      	b.n	80021a0 <main_loop+0x130>
	}else{
		speed_command = 0;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <main_loop+0x168>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
		moment_command = 0;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <main_loop+0x16c>)
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
	}

	outputMotor(speed_command, moment_command, mode);
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <main_loop+0x168>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <main_loop+0x16c>)
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <main_loop+0x160>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	eef0 0a47 	vmov.f32	s1, s14
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	f7fe ffc5 	bl	8001148 <outputMotor>
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	ecbd 8b02 	vpop	{d8}
 80021c6:	bdb0      	pop	{r4, r5, r7, pc}
 80021c8:	20000e04 	.word	0x20000e04
 80021cc:	20000ffc 	.word	0x20000ffc
 80021d0:	20000f04 	.word	0x20000f04
 80021d4:	20000e70 	.word	0x20000e70
 80021d8:	20000e9c 	.word	0x20000e9c
 80021dc:	20000ea0 	.word	0x20000ea0

080021e0 <spectrum_read>:
/** @J.Yeon
  * @brief  uart로 받은 값을 각 채널별 data 저장
  * @param  struct RC
  * @retval 각 채널별 data(RC)
  */
void spectrum_read(){
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
    fade = byte_data[0];
 80021e6:	4b35      	ldr	r3, [pc, #212]	; (80022bc <spectrum_read+0xdc>)
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <spectrum_read+0xe0>)
 80021ec:	701a      	strb	r2, [r3, #0]
    sys = byte_data[1];
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <spectrum_read+0xdc>)
 80021f0:	785a      	ldrb	r2, [r3, #1]
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <spectrum_read+0xe4>)
 80021f4:	701a      	strb	r2, [r3, #0]

    // 비트연산을 통한 각채널별 data 추출
    for (int index = 1; index <= 7; index++) {
 80021f6:	2301      	movs	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	e039      	b.n	8002270 <spectrum_read+0x90>
        bit_data = (byte_data[index * 2] << 8) | byte_data[(index * 2) + 1];
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <spectrum_read+0xdc>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	3301      	adds	r3, #1
 800220e:	492b      	ldr	r1, [pc, #172]	; (80022bc <spectrum_read+0xdc>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <spectrum_read+0xe8>)
 800221c:	801a      	strh	r2, [r3, #0]
        uint8_t phase = bit_data >> 15;
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <spectrum_read+0xe8>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	0bdb      	lsrs	r3, r3, #15
 8002224:	b29b      	uxth	r3, r3
 8002226:	70fb      	strb	r3, [r7, #3]
        uint8_t id = (bit_data & 0x7800) >> 11;
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <spectrum_read+0xe8>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	12db      	asrs	r3, r3, #11
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	70bb      	strb	r3, [r7, #2]
        uint16_t pos = bit_data & 0x07FF;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <spectrum_read+0xe8>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223e:	803b      	strh	r3, [r7, #0]
        
        if(pos >= RC_MIN && pos <= RC_MAX){
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002246:	d310      	bcc.n	800226a <spectrum_read+0x8a>
 8002248:	883b      	ldrh	r3, [r7, #0]
 800224a:	f240 62aa 	movw	r2, #1706	; 0x6aa
 800224e:	4293      	cmp	r3, r2
 8002250:	d80b      	bhi.n	800226a <spectrum_read+0x8a>
            channel[id].id = id;
 8002252:	78bb      	ldrb	r3, [r7, #2]
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <spectrum_read+0xec>)
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	705a      	strb	r2, [r3, #1]
            channel[id].pos = pos;
 800225e:	78bb      	ldrb	r3, [r7, #2]
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <spectrum_read+0xec>)
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	883a      	ldrh	r2, [r7, #0]
 8002268:	805a      	strh	r2, [r3, #2]
    for (int index = 1; index <= 7; index++) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3301      	adds	r3, #1
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b07      	cmp	r3, #7
 8002274:	ddc2      	ble.n	80021fc <spectrum_read+0x1c>
        }
    }

    // 각 채널별 입력값 입력
    rc.throttle = channel[0].pos;
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <spectrum_read+0xec>)
 8002278:	885a      	ldrh	r2, [r3, #2]
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <spectrum_read+0xf0>)
 800227c:	801a      	strh	r2, [r3, #0]
	rc. roll = channel[1].pos;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <spectrum_read+0xec>)
 8002280:	88da      	ldrh	r2, [r3, #6]
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <spectrum_read+0xf0>)
 8002284:	805a      	strh	r2, [r3, #2]
	rc. pitch = channel[2].pos;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <spectrum_read+0xec>)
 8002288:	895a      	ldrh	r2, [r3, #10]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <spectrum_read+0xf0>)
 800228c:	809a      	strh	r2, [r3, #4]
	rc. yaw = channel[3].pos;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <spectrum_read+0xec>)
 8002290:	89da      	ldrh	r2, [r3, #14]
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <spectrum_read+0xf0>)
 8002294:	80da      	strh	r2, [r3, #6]
	rc. aux1 = channel[4].pos;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <spectrum_read+0xec>)
 8002298:	8a5a      	ldrh	r2, [r3, #18]
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <spectrum_read+0xf0>)
 800229c:	811a      	strh	r2, [r3, #8]
	rc. aux2 = channel[5].pos;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <spectrum_read+0xec>)
 80022a0:	8ada      	ldrh	r2, [r3, #22]
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <spectrum_read+0xf0>)
 80022a4:	815a      	strh	r2, [r3, #10]
	rc. aux3 = channel[6].pos;
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <spectrum_read+0xec>)
 80022a8:	8b5a      	ldrh	r2, [r3, #26]
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <spectrum_read+0xf0>)
 80022ac:	819a      	strh	r2, [r3, #12]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000e14 	.word	0x20000e14
 80022c0:	20000e98 	.word	0x20000e98
 80022c4:	20000e24 	.word	0x20000e24
 80022c8:	20000e26 	.word	0x20000e26
 80022cc:	20000e30 	.word	0x20000e30
 80022d0:	20000e04 	.word	0x20000e04

080022d4 <addChip>:
 */
#include "spi.h"

static CHIP_LIST chip_list[255];

uint8_t addChip(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
	uint8_t chip_num = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
	uint8_t index = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75bb      	strb	r3, [r7, #22]

	for(; index < 255; index++){
 80022ea:	e010      	b.n	800230e <addChip+0x3a>
		if(chip_list[index].CS_pin == 0){
 80022ec:	7dba      	ldrb	r2, [r7, #22]
 80022ee:	4928      	ldr	r1, [pc, #160]	; (8002390 <addChip+0xbc>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3308      	adds	r3, #8
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <addChip+0x34>
			chip_num = index;
 8002302:	7dbb      	ldrb	r3, [r7, #22]
 8002304:	75fb      	strb	r3, [r7, #23]
			break;
 8002306:	e005      	b.n	8002314 <addChip+0x40>
	for(; index < 255; index++){
 8002308:	7dbb      	ldrb	r3, [r7, #22]
 800230a:	3301      	adds	r3, #1
 800230c:	75bb      	strb	r3, [r7, #22]
 800230e:	7dbb      	ldrb	r3, [r7, #22]
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d1eb      	bne.n	80022ec <addChip+0x18>
		}
	}

	if(index != 255){
 8002314:	7dbb      	ldrb	r3, [r7, #22]
 8002316:	2bff      	cmp	r3, #255	; 0xff
 8002318:	d034      	beq.n	8002384 <addChip+0xb0>
		chip_list[index].hspi = hspix;
 800231a:	7dba      	ldrb	r2, [r7, #22]
 800231c:	491c      	ldr	r1, [pc, #112]	; (8002390 <addChip+0xbc>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_port = GPIO_port;
 800232c:	7dba      	ldrb	r2, [r7, #22]
 800232e:	4918      	ldr	r1, [pc, #96]	; (8002390 <addChip+0xbc>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3304      	adds	r3, #4
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_pin = GPIO_num;
 8002340:	7dba      	ldrb	r2, [r7, #22]
 8002342:	4913      	ldr	r1, [pc, #76]	; (8002390 <addChip+0xbc>)
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3308      	adds	r3, #8
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002354:	7dfa      	ldrb	r2, [r7, #23]
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <addChip+0xbc>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	7dfa      	ldrb	r2, [r7, #23]
 8002368:	4909      	ldr	r1, [pc, #36]	; (8002390 <addChip+0xbc>)
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3308      	adds	r3, #8
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	f001 f8e6 	bl	800354c <HAL_GPIO_WritePin>

		return 0;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <addChip+0xb2>
	}else{
		return -1;
 8002384:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000204 	.word	0x20000204

08002394 <read2ByteRegister>:
	chip_list[chip_num].hspi = 0;
	chip_list[chip_num].CS_port = 0;
	chip_list[chip_num].CS_pin = 0;
}

uint16_t read2ByteRegister(uint8_t chip_num){
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	uint16_t read_data = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	813b      	strh	r3, [r7, #8]
	uint16_t* pbuffer = &read_data;
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4923      	ldr	r1, [pc, #140]	; (8002438 <read2ByteRegister+0xa4>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	491e      	ldr	r1, [pc, #120]	; (8002438 <read2ByteRegister+0xa4>)
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3308      	adds	r3, #8
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	f001 f8bc 	bl	800354c <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Receive(chip_list[chip_num].hspi, (uint8_t*)pbuffer, 1, HAL_MAX_DELAY);
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	4918      	ldr	r1, [pc, #96]	; (8002438 <read2ByteRegister+0xa4>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	2201      	movs	r2, #1
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	f002 fab7 	bl	800495e <HAL_SPI_Receive>
 80023f0:	4603      	mov	r3, r0
 80023f2:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 80023f4:	79fa      	ldrb	r2, [r7, #7]
 80023f6:	4910      	ldr	r1, [pc, #64]	; (8002438 <read2ByteRegister+0xa4>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3304      	adds	r3, #4
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <read2ByteRegister+0xa4>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	3308      	adds	r3, #8
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4619      	mov	r1, r3
 800241c:	f001 f896 	bl	800354c <HAL_GPIO_WritePin>

	if(state != HAL_OK){
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <read2ByteRegister+0x98>
		return state;
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b29b      	uxth	r3, r3
 800242a:	e000      	b.n	800242e <read2ByteRegister+0x9a>
	}

	return read_data;
 800242c:	893b      	ldrh	r3, [r7, #8]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000204 	.word	0x20000204

0800243c <write2ByteRegister>:

HAL_StatusTypeDef write2ByteRegister(uint16_t* command, uint8_t chip_num){
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	4920      	ldr	r1, [pc, #128]	; (80024cc <write2ByteRegister+0x90>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3304      	adds	r3, #4
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	491b      	ldr	r1, [pc, #108]	; (80024cc <write2ByteRegister+0x90>)
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3308      	adds	r3, #8
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	f001 f86c 	bl	800354c <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Transmit(chip_list[chip_num].hspi, (uint8_t*)command, 1, HAL_MAX_DELAY);
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <write2ByteRegister+0x90>)
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	2201      	movs	r2, #1
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f002 f8f9 	bl	8004682 <HAL_SPI_Transmit>
 8002490:	4603      	mov	r3, r0
 8002492:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	490d      	ldr	r1, [pc, #52]	; (80024cc <write2ByteRegister+0x90>)
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3304      	adds	r3, #4
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	4908      	ldr	r1, [pc, #32]	; (80024cc <write2ByteRegister+0x90>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3308      	adds	r3, #8
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4619      	mov	r1, r3
 80024bc:	f001 f846 	bl	800354c <HAL_GPIO_WritePin>

	return state;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000204 	.word	0x20000204

080024d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_MspInit+0x44>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_MspInit+0x44>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6613      	str	r3, [r2, #96]	; 0x60
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_MspInit+0x44>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_MspInit+0x44>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	4a08      	ldr	r2, [pc, #32]	; (8002514 <HAL_MspInit+0x44>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_MspInit+0x44>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002506:	f001 f8dd 	bl	80036c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_SPI_MspInit+0x7c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d128      	bne.n	800258c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_SPI_MspInit+0x80>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002544:	6613      	str	r3, [r2, #96]	; 0x60
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800256a:	23e0      	movs	r3, #224	; 0xe0
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257a:	2305      	movs	r3, #5
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f000 fe5e 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013000 	.word	0x40013000
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIM_Base_MspInit+0x5c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10c      	bne.n	80025c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025c6:	e010      	b.n	80025ea <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d10b      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_TIM_Base_MspInit+0x60>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_TIM_MspPostInit+0x68>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11d      	bne.n	800265e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_TIM_MspPostInit+0x6c>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_TIM_MspPostInit+0x6c>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_TIM_MspPostInit+0x6c>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800264c:	2306      	movs	r3, #6
 800264e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265a:	f000 fdf5 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a44      	ldr	r2, [pc, #272]	; (80027a0 <HAL_UART_MspInit+0x130>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d153      	bne.n	800273a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_UART_MspInit+0x134>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	4a43      	ldr	r2, [pc, #268]	; (80027a4 <HAL_UART_MspInit+0x134>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6613      	str	r3, [r2, #96]	; 0x60
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_UART_MspInit+0x134>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_UART_MspInit+0x134>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <HAL_UART_MspInit+0x134>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_UART_MspInit+0x134>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|Spektrum_Pin;
 80026c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d4:	2307      	movs	r3, #7
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4619      	mov	r1, r3
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e2:	f000 fdb1 	bl	8003248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_UART_MspInit+0x138>)
 80026e8:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_UART_MspInit+0x13c>)
 80026ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_UART_MspInit+0x138>)
 80026ee:	2218      	movs	r2, #24
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_UART_MspInit+0x138>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_UART_MspInit+0x138>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_UART_MspInit+0x138>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002712:	2220      	movs	r2, #32
 8002714:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <HAL_UART_MspInit+0x138>)
 800271e:	f000 fb21 	bl	8002d64 <HAL_DMA_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8002728:	f7ff fc9c 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002730:	67da      	str	r2, [r3, #124]	; 0x7c
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <HAL_UART_MspInit+0x138>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002738:	e02d      	b.n	8002796 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_UART_MspInit+0x140>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d128      	bne.n	8002796 <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_UART_MspInit+0x134>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_UART_MspInit+0x134>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0x134>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_UART_MspInit+0x134>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_UART_MspInit+0x134>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_UART_MspInit+0x134>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|TMTC_Pin;
 8002774:	230c      	movs	r3, #12
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002784:	2307      	movs	r3, #7
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f000 fd59 	bl	8003248 <HAL_GPIO_Init>
}
 8002796:	bf00      	nop
 8002798:	3730      	adds	r7, #48	; 0x30
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40021000 	.word	0x40021000
 80027a8:	20000ea4 	.word	0x20000ea4
 80027ac:	40020008 	.word	0x40020008
 80027b0:	40004400 	.word	0x40004400

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 f960 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <DMA1_Channel1_IRQHandler+0x10>)
 800280e:	f000 fbcc 	bl	8002faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000ea4 	.word	0x20000ea4

0800281c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
	return 1;
 8002820:	2301      	movs	r3, #1
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_kill>:

int _kill(int pid, int sig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002836:	f004 fe77 	bl	8007528 <__errno>
 800283a:	4603      	mov	r3, r0
 800283c:	2216      	movs	r2, #22
 800283e:	601a      	str	r2, [r3, #0]
	return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_exit>:

void _exit (int status)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffe7 	bl	800282c <_kill>
	while (1) {}		/* Make sure we hang here */
 800285e:	e7fe      	b.n	800285e <_exit+0x12>

08002860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00a      	b.n	8002888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002872:	f3af 8000 	nop.w
 8002876:	4601      	mov	r1, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	60ba      	str	r2, [r7, #8]
 800287e:	b2ca      	uxtb	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf0      	blt.n	8002872 <_read+0x12>
	}

return len;
 8002890:	687b      	ldr	r3, [r7, #4]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e009      	b.n	80028c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf1      	blt.n	80028ac <_write+0x12>
	}
	return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_close>:

int _close(int file)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	return -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fa:	605a      	str	r2, [r3, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <_isatty>:

int _isatty(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return 1;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
	return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f004 fddc 	bl	8007528 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20008000 	.word	0x20008000
 800299c:	00000400 	.word	0x00000400
 80029a0:	20000df8 	.word	0x20000df8
 80029a4:	200011a8 	.word	0x200011a8

080029a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <SystemInit+0x20>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <SystemInit+0x20>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d2:	490e      	ldr	r1, [pc, #56]	; (8002a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <LoopForever+0xe>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e8:	4c0b      	ldr	r4, [pc, #44]	; (8002a18 <LoopForever+0x16>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029f6:	f7ff ffd7 	bl	80029a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fa:	f004 fd9b 	bl	8007534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fe:	f7fe fff5 	bl	80019ec <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a10:	0800a37c 	.word	0x0800a37c
  ldr r2, =_sbss
 8002a14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a18:	200011a8 	.word	0x200011a8

08002a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC1_2_IRQHandler>

08002a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 f95b 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f80e 	bl	8002a50 <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	71fb      	strb	r3, [r7, #7]
 8002a3e:	e001      	b.n	8002a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a40:	f7ff fd46 	bl	80024d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a44:	79fb      	ldrb	r3, [r7, #7]

}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_InitTick+0x68>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d022      	beq.n	8002aaa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_InitTick+0x6c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_InitTick+0x68>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f966 	bl	8002d4a <HAL_SYSTICK_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d809      	bhi.n	8002a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	f000 f932 	bl	8002cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_InitTick+0x70>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e007      	b.n	8002aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e004      	b.n	8002aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000000c 	.word	0x2000000c
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	20001194 	.word	0x20001194
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20001194 	.word	0x20001194

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff ffee 	bl	8002ae8 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d004      	beq.n	8002b24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_Delay+0x40>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b24:	bf00      	nop
 8002b26:	f7ff ffdf 	bl	8002ae8 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d8f7      	bhi.n	8002b26 <HAL_Delay+0x26>
  {
  }
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000000c 	.word	0x2000000c

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff40 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff90 	bl	8002c38 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5f 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff33 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffa4 	bl	8002ca0 <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e08d      	b.n	8002e92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_DMA_Init+0x138>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d80f      	bhi.n	8002da2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_DMA_Init+0x13c>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <HAL_DMA_Init+0x140>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_DMA_Init+0x144>)
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002da0:	e00e      	b.n	8002dc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_DMA_Init+0x148>)
 8002daa:	4413      	add	r3, r2
 8002dac:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <HAL_DMA_Init+0x140>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_DMA_Init+0x14c>)
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9b6 	bl	8003184 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e20:	d102      	bne.n	8002e28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_DMA_Init+0x104>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d80c      	bhi.n	8002e68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9d6 	bl	8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	e008      	b.n	8002e7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40020407 	.word	0x40020407
 8002ea0:	bffdfff8 	.word	0xbffdfff8
 8002ea4:	cccccccd 	.word	0xcccccccd
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	bffdfbf8 	.word	0xbffdfbf8
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_DMA_Start_IT+0x20>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e066      	b.n	8002fa2 <HAL_DMA_Start_IT+0xee>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d155      	bne.n	8002f94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f8fb 	bl	8003108 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 020e 	orr.w	r2, r2, #14
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 020a 	orr.w	r2, r2, #10
 8002f4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e005      	b.n	8002fa0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2204      	movs	r2, #4
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d026      	beq.n	8003024 <HAL_DMA_IRQHandler+0x7a>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d021      	beq.n	8003024 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0204 	bic.w	r2, r2, #4
 8002ffc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2104      	movs	r1, #4
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	2b00      	cmp	r3, #0
 8003018:	d071      	beq.n	80030fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003022:	e06c      	b.n	80030fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2202      	movs	r2, #2
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02e      	beq.n	8003096 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d029      	beq.n	8003096 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 020a 	bic.w	r2, r2, #10
 800305e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2102      	movs	r1, #2
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d038      	beq.n	80030fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003094:	e033      	b.n	80030fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2208      	movs	r2, #8
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02a      	beq.n	8003100 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d025      	beq.n	8003100 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020e 	bic.w	r2, r2, #14
 80030c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030fe:	bf00      	nop
 8003100:	bf00      	nop
}
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800311e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003130:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 021f 	and.w	r2, r3, #31
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2101      	movs	r1, #1
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d108      	bne.n	8003168 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003166:	e007      	b.n	8003178 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d802      	bhi.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e001      	b.n	80031a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3b08      	subs	r3, #8
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	409a      	lsls	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40020407 	.word	0x40020407
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020820 	.word	0x40020820
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	40020880 	.word	0x40020880

08003200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003222:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	1000823f 	.word	0x1000823f
 8003244:	40020940 	.word	0x40020940

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003256:	e15a      	b.n	800350e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 814c 	beq.w	8003508 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00b      	beq.n	8003290 <HAL_GPIO_Init+0x48>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d007      	beq.n	8003290 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003284:	2b11      	cmp	r3, #17
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b12      	cmp	r3, #18
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0201 	and.w	r2, r3, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0xea>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b12      	cmp	r3, #18
 8003330:	d123      	bne.n	800337a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033bc:	4b5b      	ldr	r3, [pc, #364]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6613      	str	r3, [r2, #96]	; 0x60
 80033c8:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d4:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_GPIO_Init+0x2e8>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033fe:	d01f      	beq.n	8003440 <HAL_GPIO_Init+0x1f8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_GPIO_Init+0x2ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d019      	beq.n	800343c <HAL_GPIO_Init+0x1f4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a4b      	ldr	r2, [pc, #300]	; (8003538 <HAL_GPIO_Init+0x2f0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x1f0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a4a      	ldr	r2, [pc, #296]	; (800353c <HAL_GPIO_Init+0x2f4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1ec>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1e8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_GPIO_Init+0x2fc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1e4>
 8003428:	2305      	movs	r3, #5
 800342a:	e00a      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 800342c:	2306      	movs	r3, #6
 800342e:	e008      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003430:	2304      	movs	r3, #4
 8003432:	e006      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003434:	2303      	movs	r3, #3
 8003436:	e004      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003438:	2302      	movs	r3, #2
 800343a:	e002      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003440:	2300      	movs	r3, #0
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	f002 0203 	and.w	r2, r2, #3
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	4093      	lsls	r3, r2
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003452:	4937      	ldr	r1, [pc, #220]	; (8003530 <HAL_GPIO_Init+0x2e8>)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_GPIO_Init+0x300>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_GPIO_Init+0x300>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_GPIO_Init+0x300>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003502:	4a11      	ldr	r2, [pc, #68]	; (8003548 <HAL_GPIO_Init+0x300>)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3301      	adds	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	f47f ae9d 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40021000 	.word	0x40021000
 8003530:	40010000 	.word	0x40010000
 8003534:	48000400 	.word	0x48000400
 8003538:	48000800 	.word	0x48000800
 800353c:	48000c00 	.word	0x48000c00
 8003540:	48001000 	.word	0x48001000
 8003544:	48001400 	.word	0x48001400
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003568:	e002      	b.n	8003570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d141      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800358a:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d131      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359e:	4a46      	ldr	r2, [pc, #280]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a8:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035b0:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035b8:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2232      	movs	r2, #50	; 0x32
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	0c9b      	lsrs	r3, r3, #18
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ce:	e002      	b.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e2:	d102      	bne.n	80035ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ea:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d158      	bne.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e057      	b.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035fc:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003602:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800360c:	e04d      	b.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d141      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003622:	d131      	bne.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800363c:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2232      	movs	r2, #50	; 0x32
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	0c9b      	lsrs	r3, r3, #18
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800365a:	e002      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	d102      	bne.n	8003676 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f2      	bne.n	800365c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d112      	bne.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e011      	b.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003698:	e007      	b.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a2:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40007000 	.word	0x40007000
 80036bc:	20000004 	.word	0x20000004
 80036c0:	431bde83 	.word	0x431bde83

080036c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d2:	6093      	str	r3, [r2, #8]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40007000 	.word	0x40007000

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e308      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d075      	beq.n	80037ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003702:	4ba3      	ldr	r3, [pc, #652]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370c:	4ba0      	ldr	r3, [pc, #640]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0x3e>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d002      	beq.n	8003728 <HAL_RCC_OscConfig+0x44>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b99      	ldr	r3, [pc, #612]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05b      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d157      	bne.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e2e3      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x74>
 800374a:	4b91      	ldr	r3, [pc, #580]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a90      	ldr	r2, [pc, #576]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e01d      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a8a      	ldr	r2, [pc, #552]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a87      	ldr	r2, [pc, #540]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 800377c:	4b84      	ldr	r3, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a83      	ldr	r2, [pc, #524]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7ff f9a4 	bl	8002ae8 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a4:	f7ff f9a0 	bl	8002ae8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e2a8      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7ff f990 	bl	8002ae8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7ff f98c 	bl	8002ae8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e294      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d075      	beq.n	80038e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003804:	4b62      	ldr	r3, [pc, #392]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	d102      	bne.n	800381a <HAL_RCC_OscConfig+0x136>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d002      	beq.n	8003820 <HAL_RCC_OscConfig+0x13c>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11f      	bne.n	8003860 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003820:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x154>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e267      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	4952      	ldr	r1, [pc, #328]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800384c:	4b51      	ldr	r3, [pc, #324]	; (8003994 <HAL_RCC_OscConfig+0x2b0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f8fd 	bl	8002a50 <HAL_InitTick>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d043      	beq.n	80038e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e253      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a48      	ldr	r2, [pc, #288]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800386e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7ff f938 	bl	8002ae8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7ff f934 	bl	8002ae8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e23c      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388e:	4b40      	ldr	r3, [pc, #256]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	4939      	ldr	r1, [pc, #228]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
 80038ae:	e01a      	b.n	80038e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7ff f914 	bl	8002ae8 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7ff f910 	bl	8002ae8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e218      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d6:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1e0>
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01c      	beq.n	8003934 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fa:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7ff f8ed 	bl	8002ae8 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003912:	f7ff f8e9 	bl	8002ae8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1f1      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ef      	beq.n	8003912 <HAL_RCC_OscConfig+0x22e>
 8003932:	e01b      	b.n	800396c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7ff f8d0 	bl	8002ae8 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394c:	f7ff f8cc 	bl	8002ae8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1d4      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ef      	bne.n	800394c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80ab 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x2b4>
 800398a:	2301      	movs	r3, #1
 800398c:	e005      	b.n	800399a <HAL_RCC_OscConfig+0x2b6>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	20000008 	.word	0x20000008
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4baf      	ldr	r3, [pc, #700]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	4aae      	ldr	r2, [pc, #696]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6593      	str	r3, [r2, #88]	; 0x58
 80039aa:	4bac      	ldr	r3, [pc, #688]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039b6:	2301      	movs	r3, #1
 80039b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4ba9      	ldr	r3, [pc, #676]	; (8003c60 <HAL_RCC_OscConfig+0x57c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d118      	bne.n	80039f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c6:	4ba6      	ldr	r3, [pc, #664]	; (8003c60 <HAL_RCC_OscConfig+0x57c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4aa5      	ldr	r2, [pc, #660]	; (8003c60 <HAL_RCC_OscConfig+0x57c>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d2:	f7ff f889 	bl	8002ae8 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7ff f885 	bl	8002ae8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e18d      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ec:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <HAL_RCC_OscConfig+0x57c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d108      	bne.n	8003a12 <HAL_RCC_OscConfig+0x32e>
 8003a00:	4b96      	ldr	r3, [pc, #600]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a95      	ldr	r2, [pc, #596]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a10:	e024      	b.n	8003a5c <HAL_RCC_OscConfig+0x378>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d110      	bne.n	8003a3c <HAL_RCC_OscConfig+0x358>
 8003a1a:	4b90      	ldr	r3, [pc, #576]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	4a8e      	ldr	r2, [pc, #568]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2a:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	4a8a      	ldr	r2, [pc, #552]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x378>
 8003a3c:	4b87      	ldr	r3, [pc, #540]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a86      	ldr	r2, [pc, #536]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4c:	4b83      	ldr	r3, [pc, #524]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	4a82      	ldr	r2, [pc, #520]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7ff f840 	bl	8002ae8 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7ff f83c 	bl	8002ae8 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e142      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ed      	beq.n	8003a6c <HAL_RCC_OscConfig+0x388>
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7ff f829 	bl	8002ae8 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7ff f825 	bl	8002ae8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e12b      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ed      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a64      	ldr	r2, [pc, #400]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae4:	4b5d      	ldr	r3, [pc, #372]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aea:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fff8 	bl	8002ae8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003afc:	f7fe fff4 	bl	8002ae8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0fc      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b0e:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <HAL_RCC_OscConfig+0x418>
 8003b1c:	e01b      	b.n	8003b56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b1e:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b24:	4a4d      	ldr	r2, [pc, #308]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fe ffdb 	bl	8002ae8 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b36:	f7fe ffd7 	bl	8002ae8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0df      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b48:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ef      	bne.n	8003b36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80d3 	beq.w	8003d06 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	f000 808d 	beq.w	8003c88 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d15a      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe ffb1 	bl	8002ae8 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe ffad 	bl	8002ae8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0b5      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_OscConfig+0x580>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a11      	ldr	r1, [r2, #32]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bc2:	0212      	lsls	r2, r2, #8
 8003bc4:	4311      	orrs	r1, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bca:	0852      	lsrs	r2, r2, #1
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	0552      	lsls	r2, r2, #21
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bd6:	0852      	lsrs	r2, r2, #1
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	0652      	lsls	r2, r2, #25
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003be2:	06d2      	lsls	r2, r2, #27
 8003be4:	430a      	orrs	r2, r1
 8003be6:	491d      	ldr	r1, [pc, #116]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf8:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe ff70 	bl	8002ae8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe ff6c 	bl	8002ae8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e074      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x528>
 8003c2a:	e06c      	b.n	8003d06 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_RCC_OscConfig+0x578>)
 8003c4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe ff48 	bl	8002ae8 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5a:	e00e      	b.n	8003c7a <HAL_RCC_OscConfig+0x596>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe ff3e 	bl	8002ae8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e046      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_OscConfig+0x62c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x584>
 8003c86:	e03e      	b.n	8003d06 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e039      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c94:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_OscConfig+0x62c>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d12c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d123      	bne.n	8003d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11b      	bne.n	8003d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d113      	bne.n	8003d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d109      	bne.n	8003d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e11e      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b91      	ldr	r3, [pc, #580]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b8e      	ldr	r3, [pc, #568]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
 8003d42:	498c      	ldr	r1, [pc, #560]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b8a      	ldr	r3, [pc, #552]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e106      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d073      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d129      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	4b81      	ldr	r3, [pc, #516]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0f4      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d80:	f000 f99e 	bl	80040c0 <RCC_GetSysClockFreqFromPLLSource>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4a7c      	ldr	r2, [pc, #496]	; (8003f7c <HAL_RCC_ClockConfig+0x268>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d93f      	bls.n	8003e0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d033      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d12f      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dae:	4b72      	ldr	r3, [pc, #456]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db6:	4a70      	ldr	r2, [pc, #448]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e024      	b.n	8003e0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0c6      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ddc:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0be      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003dec:	f000 f8ce 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4a61      	ldr	r2, [pc, #388]	; (8003f7c <HAL_RCC_ClockConfig+0x268>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d909      	bls.n	8003e0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4957      	ldr	r1, [pc, #348]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fe fe62 	bl	8002ae8 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe fe5e 	bl	8002ae8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e095      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e68:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a42      	ldr	r2, [pc, #264]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e88:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4936      	ldr	r1, [pc, #216]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eaa:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d21d      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 020f 	bic.w	r2, r3, #15
 8003ecc:	4929      	ldr	r1, [pc, #164]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ed4:	f7fe fe08 	bl	8002ae8 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fe fe04 	bl	8002ae8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e03b      	b.n	8003f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_RCC_ClockConfig+0x260>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1ed      	bne.n	8003edc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4917      	ldr	r1, [pc, #92]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490f      	ldr	r1, [pc, #60]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f3e:	f000 f825 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490c      	ldr	r1, [pc, #48]	; (8003f80 <HAL_RCC_ClockConfig+0x26c>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x270>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x274>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fd74 	bl	8002a50 <HAL_InitTick>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	04c4b400 	.word	0x04c4b400
 8003f80:	08009f48 	.word	0x08009f48
 8003f84:	20000004 	.word	0x20000004
 8003f88:	20000008 	.word	0x20000008

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f92:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e047      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fb0:	4b26      	ldr	r3, [pc, #152]	; (800404c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e03e      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b0c      	cmp	r3, #12
 8003fc0:	d136      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d10c      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fea:	68d2      	ldr	r2, [r2, #12]
 8003fec:	0a12      	lsrs	r2, r2, #8
 8003fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
      break;
 8003ff8:	e00c      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4a10      	ldr	r2, [pc, #64]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0a12      	lsrs	r2, r2, #8
 8004008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
      break;
 8004012:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0e5b      	lsrs	r3, r3, #25
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e001      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004034:	693b      	ldr	r3, [r7, #16]
}
 8004036:	4618      	mov	r0, r3
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000004 	.word	0x20000004

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	08009f58 	.word	0x08009f58

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004098:	f7ff ffda 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0adb      	lsrs	r3, r3, #11
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08009f58 	.word	0x08009f58

080040c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d10c      	bne.n	80040fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ee:	68d2      	ldr	r2, [r2, #12]
 80040f0:	0a12      	lsrs	r2, r2, #8
 80040f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	617b      	str	r3, [r7, #20]
    break;
 80040fc:	e00c      	b.n	8004118 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004108:	68d2      	ldr	r2, [r2, #12]
 800410a:	0a12      	lsrs	r2, r2, #8
 800410c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
    break;
 8004116:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0e5b      	lsrs	r3, r3, #25
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004132:	687b      	ldr	r3, [r7, #4]
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000
 8004144:	007a1200 	.word	0x007a1200
 8004148:	00f42400 	.word	0x00f42400

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004154:	2300      	movs	r3, #0
 8004156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004158:	2300      	movs	r3, #0
 800415a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8098 	beq.w	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b43      	ldr	r3, [pc, #268]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b40      	ldr	r3, [pc, #256]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
 8004186:	4b3d      	ldr	r3, [pc, #244]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a39      	ldr	r2, [pc, #228]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a2:	f7fe fca1 	bl	8002ae8 <HAL_GetTick>
 80041a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a8:	e009      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fe fc9d 	bl	8002ae8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	74fb      	strb	r3, [r7, #19]
        break;
 80041bc:	e005      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ef      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d159      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d019      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a1f      	ldr	r2, [pc, #124]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fe fc5d 	bl	8002ae8 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004230:	e00b      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fe fc59 	bl	8002ae8 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
            break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ec      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004274:	e008      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	74bb      	strb	r3, [r7, #18]
 800427a:	e005      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004288:	7c7b      	ldrb	r3, [r7, #17]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428e:	4ba6      	ldr	r3, [pc, #664]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4aa5      	ldr	r2, [pc, #660]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a6:	4ba0      	ldr	r3, [pc, #640]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f023 0203 	bic.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	499c      	ldr	r1, [pc, #624]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c8:	4b97      	ldr	r3, [pc, #604]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 020c 	bic.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4994      	ldr	r1, [pc, #592]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ea:	4b8f      	ldr	r3, [pc, #572]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	498b      	ldr	r1, [pc, #556]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800430c:	4b86      	ldr	r3, [pc, #536]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	4983      	ldr	r1, [pc, #524]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800432e:	4b7e      	ldr	r3, [pc, #504]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	497a      	ldr	r1, [pc, #488]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004350:	4b75      	ldr	r3, [pc, #468]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4972      	ldr	r1, [pc, #456]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004372:	4b6d      	ldr	r3, [pc, #436]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4969      	ldr	r1, [pc, #420]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004394:	4b64      	ldr	r3, [pc, #400]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4961      	ldr	r1, [pc, #388]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b6:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	4958      	ldr	r1, [pc, #352]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	4950      	ldr	r1, [pc, #320]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a4a      	ldr	r2, [pc, #296]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440c:	2b00      	cmp	r3, #0
 800440e:	d015      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004410:	4b45      	ldr	r3, [pc, #276]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	4942      	ldr	r1, [pc, #264]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d105      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004430:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4934      	ldr	r1, [pc, #208]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004466:	d105      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004468:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004472:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d015      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	4926      	ldr	r1, [pc, #152]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449e:	d105      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	4918      	ldr	r1, [pc, #96]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a12      	ldr	r2, [pc, #72]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	490a      	ldr	r1, [pc, #40]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450e:	d105      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800451c:	7cbb      	ldrb	r3, [r7, #18]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e09d      	b.n	800467a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454e:	d009      	beq.n	8004564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
 8004556:	e005      	b.n	8004564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd ffca 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800459a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a4:	d902      	bls.n	80045ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e002      	b.n	80045b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ba:	d007      	beq.n	80045cc <HAL_SPI_Init+0xa0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	ea42 0103 	orr.w	r1, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 0204 	and.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_SPI_Transmit+0x22>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e158      	b.n	8004956 <HAL_SPI_Transmit+0x2d4>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ac:	f7fe fa1c 	bl	8002ae8 <HAL_GetTick>
 80046b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046c6:	e13d      	b.n	8004944 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Transmit+0x52>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046d8:	e134      	b.n	8004944 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d94b      	bls.n	8004806 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SPI_Transmit+0xfa>
 8004776:	8afb      	ldrh	r3, [r7, #22]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d13e      	bne.n	80047fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a0:	e02b      	b.n	80047fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d112      	bne.n	80047d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d4:	e011      	b.n	80047fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fe f987 	bl	8002ae8 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d803      	bhi.n	80047ee <HAL_SPI_Transmit+0x16c>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Transmit+0x172>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047f8:	e0a4      	b.n	8004944 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ce      	bne.n	80047a2 <HAL_SPI_Transmit+0x120>
 8004804:	e07c      	b.n	8004900 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x192>
 800480e:	8afb      	ldrh	r3, [r7, #22]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d170      	bne.n	80048f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d912      	bls.n	8004844 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	881a      	ldrh	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	1c9a      	adds	r2, r3, #2
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b02      	subs	r3, #2
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004842:	e058      	b.n	80048f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800486a:	e044      	b.n	80048f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d12b      	bne.n	80048d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d912      	bls.n	80048aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	1c9a      	adds	r2, r3, #2
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b02      	subs	r3, #2
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048a8:	e025      	b.n	80048f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d0:	e011      	b.n	80048f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d2:	f7fe f909 	bl	8002ae8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d803      	bhi.n	80048ea <HAL_SPI_Transmit+0x268>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d102      	bne.n	80048f0 <HAL_SPI_Transmit+0x26e>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f4:	e026      	b.n	8004944 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1b5      	bne.n	800486c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fcdf 	bl	80052c8 <SPI_EndRxTxTransaction>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e000      	b.n	8004944 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004942:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004954:	7ffb      	ldrb	r3, [r7, #31]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b088      	sub	sp, #32
 8004962:	af02      	add	r7, sp, #8
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d112      	bne.n	80049a2 <HAL_SPI_Receive+0x44>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10e      	bne.n	80049a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2204      	movs	r2, #4
 8004988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f910 	bl	8004bbe <HAL_SPI_TransmitReceive>
 800499e:	4603      	mov	r3, r0
 80049a0:	e109      	b.n	8004bb6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_SPI_Receive+0x52>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e102      	b.n	8004bb6 <HAL_SPI_Receive+0x258>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b8:	f7fe f896 	bl	8002ae8 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d002      	beq.n	80049d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
 80049cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ce:	e0e9      	b.n	8004ba4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_Receive+0x7e>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049e0:	e0e0      	b.n	8004ba4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2204      	movs	r2, #4
 80049e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2c:	d908      	bls.n	8004a40 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e007      	b.n	8004a50 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d10f      	bne.n	8004a7a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d007      	beq.n	8004a98 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa0:	d867      	bhi.n	8004b72 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aa2:	e030      	b.n	8004b06 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d117      	bne.n	8004ae2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f103 020c 	add.w	r2, r3, #12
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ae0:	e011      	b.n	8004b06 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae2:	f7fe f801 	bl	8002ae8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d803      	bhi.n	8004afa <HAL_SPI_Receive+0x19c>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Receive+0x1a2>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b04:	e04e      	b.n	8004ba4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1c8      	bne.n	8004aa4 <HAL_SPI_Receive+0x146>
 8004b12:	e034      	b.n	8004b7e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d115      	bne.n	8004b4e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b4c:	e011      	b.n	8004b72 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4e:	f7fd ffcb 	bl	8002ae8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d803      	bhi.n	8004b66 <HAL_SPI_Receive+0x208>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Receive+0x20e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b70:	e018      	b.n	8004ba4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ca      	bne.n	8004b14 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fb48 	bl	8005218 <SPI_EndRxTransaction>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
 8004ba0:	e000      	b.n	8004ba4 <HAL_SPI_Receive+0x246>
  }

error :
 8004ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08a      	sub	sp, #40	; 0x28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x26>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e1fb      	b.n	8004fdc <HAL_SPI_TransmitReceive+0x41e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bec:	f7fd ff7c 	bl	8002ae8 <HAL_GetTick>
 8004bf0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c00:	887b      	ldrh	r3, [r7, #2]
 8004c02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c08:	7efb      	ldrb	r3, [r7, #27]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d00e      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x6e>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c14:	d106      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x66>
 8004c1e:	7efb      	ldrb	r3, [r7, #27]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d003      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c2a:	e1cd      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x80>
 8004c38:	887b      	ldrh	r3, [r7, #2]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c44:	e1c0      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d003      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2205      	movs	r2, #5
 8004c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	887a      	ldrh	r2, [r7, #2]
 8004c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9c:	d802      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0xe6>
 8004c9e:	8a3b      	ldrh	r3, [r7, #16]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d908      	bls.n	8004cb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e007      	b.n	8004cc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d007      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cec:	d97c      	bls.n	8004de8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0x13e>
 8004cf6:	8a7b      	ldrh	r3, [r7, #18]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d169      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d20:	e056      	b.n	8004dd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d11b      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x1aa>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x1aa>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d113      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d11c      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x1f2>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dac:	2301      	movs	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db0:	f7fd fe9a 	bl	8002ae8 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d807      	bhi.n	8004dd0 <HAL_SPI_TransmitReceive+0x212>
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d003      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004dce:	e0fb      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1a3      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x164>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d19d      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x164>
 8004de6:	e0df      	b.n	8004fa8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x23a>
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	f040 80cb 	bne.w	8004f8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d912      	bls.n	8004e28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b02      	subs	r3, #2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e26:	e0b2      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	e09e      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d134      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x30a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02f      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x30a>
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d12c      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d912      	bls.n	8004e9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b02      	subs	r3, #2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e9c:	e012      	b.n	8004ec4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d148      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x3aa>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d042      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d923      	bls.n	8004f36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	b292      	uxth	r2, r2
 8004efa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	1c9a      	adds	r2, r3, #2
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b02      	subs	r3, #2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d81f      	bhi.n	8004f64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	e016      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f103 020c 	add.w	r2, r3, #12
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f64:	2301      	movs	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f68:	f7fd fdbe 	bl	8002ae8 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d803      	bhi.n	8004f80 <HAL_SPI_TransmitReceive+0x3c2>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d102      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x3c8>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f8c:	e01c      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f47f af5b 	bne.w	8004e50 <HAL_SPI_TransmitReceive+0x292>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f47f af54 	bne.w	8004e50 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f98b 	bl	80052c8 <SPI_EndRxTxTransaction>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d006      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
 8004fc4:	e000      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff4:	f7fd fd78 	bl	8002ae8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005004:	f7fd fd70 	bl	8002ae8 <HAL_GetTick>
 8005008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	0d1b      	lsrs	r3, r3, #20
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501a:	e054      	b.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d050      	beq.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005024:	f7fd fd60 	bl	8002ae8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	429a      	cmp	r2, r3
 8005032:	d902      	bls.n	800503a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d13d      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d111      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d004      	beq.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d107      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005080:	d10f      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e017      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d19b      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000004 	.word	0x20000004

080050f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005102:	f7fd fcf1 	bl	8002ae8 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	4413      	add	r3, r2
 8005110:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005112:	f7fd fce9 	bl	8002ae8 <HAL_GetTick>
 8005116:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005118:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	00da      	lsls	r2, r3, #3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	0d1b      	lsrs	r3, r3, #20
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005130:	e062      	b.n	80051f8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005138:	d109      	bne.n	800514e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800514c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d050      	beq.n	80051f8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005156:	f7fd fcc7 	bl	8002ae8 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	429a      	cmp	r2, r3
 8005164:	d902      	bls.n	800516c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d13d      	bne.n	80051e8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800517a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005184:	d111      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518e:	d004      	beq.n	800519a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005198:	d107      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	d10f      	bne.n	80051d4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e010      	b.n	800520a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d194      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000004 	.word	0x20000004

08005218 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522c:	d111      	bne.n	8005252 <SPI_EndRxTransaction+0x3a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005236:	d004      	beq.n	8005242 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005240:	d107      	bne.n	8005252 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005250:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fec1 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e023      	b.n	80052c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005280:	d11d      	bne.n	80052be <SPI_EndRxTransaction+0xa6>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d004      	beq.n	8005296 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005294:	d113      	bne.n	80052be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff26 	bl	80050f4 <SPI_WaitFifoStateUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e000      	b.n	80052c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff ff07 	bl	80050f4 <SPI_WaitFifoStateUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e027      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff fe6c 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e014      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff fee0 	bl	80050f4 <SPI_WaitFifoStateUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e000      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e049      	b.n	80053fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fd f90e 	bl	800259c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 fb9c 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e049      	b.n	80054a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f841 	bl	80054b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f000 fb45 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e03c      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e02f      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e022      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d109      	bne.n	8005536 <HAL_TIM_PWM_Start+0x72>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	bf14      	ite	ne
 800552e:	2301      	movne	r3, #1
 8005530:	2300      	moveq	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e015      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d109      	bne.n	8005550 <HAL_TIM_PWM_Start+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e008      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e097      	b.n	800569a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xb6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	e023      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xc6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	e01b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xd6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0xe6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xf6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fea2 	bl	8006314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <HAL_TIM_PWM_Start+0x1e0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a32      	ldr	r2, [pc, #200]	; (80056a8 <HAL_TIM_PWM_Start+0x1e4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a30      	ldr	r2, [pc, #192]	; (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <HAL_TIM_PWM_Start+0x1ec>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <HAL_TIM_PWM_Start+0x1f0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Start+0x142>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_TIM_PWM_Start+0x144>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <HAL_TIM_PWM_Start+0x1e0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d018      	beq.n	8005658 <HAL_TIM_PWM_Start+0x194>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d013      	beq.n	8005658 <HAL_TIM_PWM_Start+0x194>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <HAL_TIM_PWM_Start+0x1f4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00e      	beq.n	8005658 <HAL_TIM_PWM_Start+0x194>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_TIM_PWM_Start+0x1f8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d009      	beq.n	8005658 <HAL_TIM_PWM_Start+0x194>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_TIM_PWM_Start+0x1e4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIM_PWM_Start+0x194>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d115      	bne.n	8005684 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b06      	cmp	r3, #6
 8005668:	d015      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1d2>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d011      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	e008      	b.n	8005696 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e000      	b.n	8005698 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	00010007 	.word	0x00010007

080056c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056da:	2302      	movs	r3, #2
 80056dc:	e0fd      	b.n	80058da <HAL_TIM_PWM_ConfigChannel+0x216>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b14      	cmp	r3, #20
 80056ea:	f200 80f0 	bhi.w	80058ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005749 	.word	0x08005749
 80056f8:	080058cf 	.word	0x080058cf
 80056fc:	080058cf 	.word	0x080058cf
 8005700:	080058cf 	.word	0x080058cf
 8005704:	08005789 	.word	0x08005789
 8005708:	080058cf 	.word	0x080058cf
 800570c:	080058cf 	.word	0x080058cf
 8005710:	080058cf 	.word	0x080058cf
 8005714:	080057cb 	.word	0x080057cb
 8005718:	080058cf 	.word	0x080058cf
 800571c:	080058cf 	.word	0x080058cf
 8005720:	080058cf 	.word	0x080058cf
 8005724:	0800580b 	.word	0x0800580b
 8005728:	080058cf 	.word	0x080058cf
 800572c:	080058cf 	.word	0x080058cf
 8005730:	080058cf 	.word	0x080058cf
 8005734:	0800584d 	.word	0x0800584d
 8005738:	080058cf 	.word	0x080058cf
 800573c:	080058cf 	.word	0x080058cf
 8005740:	080058cf 	.word	0x080058cf
 8005744:	0800588d 	.word	0x0800588d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fa4e 	bl	8005bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0208 	orr.w	r2, r2, #8
 8005762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	619a      	str	r2, [r3, #24]
      break;
 8005786:	e0a3      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fabe 	bl	8005d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	619a      	str	r2, [r3, #24]
      break;
 80057c8:	e082      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fb27 	bl	8005e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0208 	orr.w	r2, r2, #8
 80057e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0204 	bic.w	r2, r2, #4
 80057f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	61da      	str	r2, [r3, #28]
      break;
 8005808:	e062      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fb8f 	bl	8005f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69d9      	ldr	r1, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	021a      	lsls	r2, r3, #8
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	61da      	str	r2, [r3, #28]
      break;
 800584a:	e041      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fbf8 	bl	8006048 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800588a:	e021      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fc3c 	bl	8006110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80058cc:	e000      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80058ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_ConfigClockSource+0x18>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0dd      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x1d4>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800591a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a62      	ldr	r2, [pc, #392]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	f000 80a9 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800593c:	4a60      	ldr	r2, [pc, #384]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	f200 80ae 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005944:	4a5f      	ldr	r2, [pc, #380]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	f000 80a1 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800594c:	4a5d      	ldr	r2, [pc, #372]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	f200 80a6 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005954:	4a5c      	ldr	r2, [pc, #368]	; (8005ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f000 8099 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800595c:	4a5a      	ldr	r2, [pc, #360]	; (8005ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f200 809e 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005964:	4a59      	ldr	r2, [pc, #356]	; (8005acc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	f000 8091 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800596c:	4a57      	ldr	r2, [pc, #348]	; (8005acc <HAL_TIM_ConfigClockSource+0x1e8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	f200 8096 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005974:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005978:	f000 8089 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800597c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005980:	f200 808e 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d03e      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0x124>
 800598a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598e:	f200 8087 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	f000 8085 	beq.w	8005aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d87f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d01a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xf6>
 80059a4:	2b70      	cmp	r3, #112	; 0x70
 80059a6:	d87b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d050      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x16a>
 80059ac:	2b60      	cmp	r3, #96	; 0x60
 80059ae:	d877      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d03c      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x14a>
 80059b4:	2b50      	cmp	r3, #80	; 0x50
 80059b6:	d873      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d058      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x18a>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d86f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d064      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d86b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d060      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d867      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d05a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059d8:	e062      	b.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f000 fc73 	bl	80062d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e04e      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6899      	ldr	r1, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f000 fc5c 	bl	80062d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2a:	609a      	str	r2, [r3, #8]
      break;
 8005a2c:	e03b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f000 fbce 	bl	80061dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2150      	movs	r1, #80	; 0x50
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fc27 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e02b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f000 fbed 	bl	800623a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2160      	movs	r1, #96	; 0x60
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fc17 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e01b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 fbae 	bl	80061dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fc07 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e00b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fbfe 	bl	800629a <TIM_ITRx_SetConfig>
        break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8005aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00100070 	.word	0x00100070
 8005ac4:	00100040 	.word	0x00100040
 8005ac8:	00100030 	.word	0x00100030
 8005acc:	00100020 	.word	0x00100020

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <TIM_Base_SetConfig+0x104>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d00b      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a39      	ldr	r2, [pc, #228]	; (8005bd8 <TIM_Base_SetConfig+0x108>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <TIM_Base_SetConfig+0x10c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <TIM_Base_SetConfig+0x110>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d108      	bne.n	8005b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <TIM_Base_SetConfig+0x104>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d017      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_Base_SetConfig+0x108>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <TIM_Base_SetConfig+0x10c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <TIM_Base_SetConfig+0x110>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a25      	ldr	r2, [pc, #148]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <TIM_Base_SetConfig+0x104>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <TIM_Base_SetConfig+0x110>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0xe8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d103      	bne.n	8005bc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	615a      	str	r2, [r3, #20]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0302 	bic.w	r3, r3, #2
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <TIM_OC1_SetConfig+0x10c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_OC1_SetConfig+0x80>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <TIM_OC1_SetConfig+0x110>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_OC1_SetConfig+0x80>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <TIM_OC1_SetConfig+0x114>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_OC1_SetConfig+0x80>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <TIM_OC1_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC1_SetConfig+0x80>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <TIM_OC1_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10c      	bne.n	8005c8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0308 	bic.w	r3, r3, #8
 8005c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 0304 	bic.w	r3, r3, #4
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <TIM_OC1_SetConfig+0x10c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xc2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <TIM_OC1_SetConfig+0x110>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xc2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <TIM_OC1_SetConfig+0x114>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xc2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <TIM_OC1_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xc2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <TIM_OC1_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800

08005d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0210 	bic.w	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0320 	bic.w	r3, r3, #32
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <TIM_OC2_SetConfig+0x100>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC2_SetConfig+0x6c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <TIM_OC2_SetConfig+0x104>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d10d      	bne.n	8005d98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <TIM_OC2_SetConfig+0x100>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00f      	beq.n	8005dc0 <TIM_OC2_SetConfig+0xb0>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <TIM_OC2_SetConfig+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00b      	beq.n	8005dc0 <TIM_OC2_SetConfig+0xb0>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <TIM_OC2_SetConfig+0x108>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_OC2_SetConfig+0xb0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <TIM_OC2_SetConfig+0x10c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC2_SetConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a19      	ldr	r2, [pc, #100]	; (8005e20 <TIM_OC2_SetConfig+0x110>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d113      	bne.n	8005de8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800

08005e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <TIM_OC3_SetConfig+0xfc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC3_SetConfig+0x6a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_OC3_SetConfig+0x100>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10d      	bne.n	8005eaa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_OC3_SetConfig+0xfc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_OC3_SetConfig+0xae>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <TIM_OC3_SetConfig+0x100>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_OC3_SetConfig+0xae>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <TIM_OC3_SetConfig+0x104>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC3_SetConfig+0xae>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <TIM_OC3_SetConfig+0x108>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC3_SetConfig+0xae>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <TIM_OC3_SetConfig+0x10c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d113      	bne.n	8005efa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	031b      	lsls	r3, r3, #12
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a28      	ldr	r2, [pc, #160]	; (8006034 <TIM_OC4_SetConfig+0x100>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC4_SetConfig+0x6c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a27      	ldr	r2, [pc, #156]	; (8006038 <TIM_OC4_SetConfig+0x104>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10d      	bne.n	8005fbc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	031b      	lsls	r3, r3, #12
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <TIM_OC4_SetConfig+0x100>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xb0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <TIM_OC4_SetConfig+0x104>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xb0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <TIM_OC4_SetConfig+0x108>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xb0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <TIM_OC4_SetConfig+0x10c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a19      	ldr	r2, [pc, #100]	; (8006044 <TIM_OC4_SetConfig+0x110>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ff2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800608c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	041b      	lsls	r3, r3, #16
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <TIM_OC5_SetConfig+0xb4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00f      	beq.n	80060c2 <TIM_OC5_SetConfig+0x7a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a16      	ldr	r2, [pc, #88]	; (8006100 <TIM_OC5_SetConfig+0xb8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00b      	beq.n	80060c2 <TIM_OC5_SetConfig+0x7a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <TIM_OC5_SetConfig+0xbc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <TIM_OC5_SetConfig+0x7a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <TIM_OC5_SetConfig+0xc0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC5_SetConfig+0x7a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <TIM_OC5_SetConfig+0xc4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d109      	bne.n	80060d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800

08006110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <TIM_OC6_SetConfig+0xb8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_OC6_SetConfig+0x7c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a17      	ldr	r2, [pc, #92]	; (80061cc <TIM_OC6_SetConfig+0xbc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_OC6_SetConfig+0x7c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <TIM_OC6_SetConfig+0xc0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_OC6_SetConfig+0x7c>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <TIM_OC6_SetConfig+0xc4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC6_SetConfig+0x7c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <TIM_OC6_SetConfig+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d109      	bne.n	80061a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40013400 	.word	0x40013400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800

080061dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f023 0201 	bic.w	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 030a 	bic.w	r3, r3, #10
 8006218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0210 	bic.w	r2, r3, #16
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80062b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f043 0307 	orr.w	r3, r3, #7
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	609a      	str	r2, [r3, #8]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	021a      	lsls	r2, r3, #8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	609a      	str	r2, [r3, #8]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2201      	movs	r2, #1
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	fa01 f303 	lsl.w	r3, r1, r3
 800634c:	431a      	orrs	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e065      	b.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2c      	ldr	r2, [pc, #176]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80063c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d013      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a12      	ldr	r2, [pc, #72]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40013400 	.word	0x40013400
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40014000 	.word	0x40014000

08006464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800647c:	2302      	movs	r3, #2
 800647e:	e087      	b.n	8006590 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a27      	ldr	r2, [pc, #156]	; (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d106      	bne.n	800651c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1e      	ldr	r2, [pc, #120]	; (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d126      	bne.n	800657e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0e      	ldr	r2, [pc, #56]	; (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d106      	bne.n	800657e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40013400 	.word	0x40013400

080065a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e042      	b.n	800663c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fc f851 	bl	8002670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2224      	movs	r2, #36	; 0x24
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f928 	bl	800683c <UART_SetConfig>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fbba 	bl	8006d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc41 	bl	8006ebc <UART_CheckIdleState>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 8083 	bne.w	8006766 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Transmit+0x28>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e07b      	b.n	8006768 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UART_Transmit+0x3a>
 800667a:	2302      	movs	r3, #2
 800667c:	e074      	b.n	8006768 <HAL_UART_Transmit+0x124>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2221      	movs	r2, #33	; 0x21
 8006692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006696:	f7fc fa27 	bl	8002ae8 <HAL_GetTick>
 800669a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	d108      	bne.n	80066c8 <HAL_UART_Transmit+0x84>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e003      	b.n	80066d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80066d8:	e02c      	b.n	8006734 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fc34 	bl	8006f52 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e039      	b.n	8006768 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1cc      	bne.n	80066da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fc01 	bl	8006f52 <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e006      	b.n	8006768 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	2b20      	cmp	r3, #32
 8006786:	d131      	bne.n	80067ec <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Receive_DMA+0x24>
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e02a      	b.n	80067ee <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Receive_DMA+0x36>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e023      	b.n	80067ee <HAL_UART_Receive_DMA+0x7e>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a0f      	ldr	r2, [pc, #60]	; (80067f8 <HAL_UART_Receive_DMA+0x88>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80067da:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	461a      	mov	r2, r3
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fc36 	bl	8007054 <UART_Start_Receive_DMA>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e000      	b.n	80067ee <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40008000 	.word	0x40008000

080067fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800683c:	b5b0      	push	{r4, r5, r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	4313      	orrs	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4baf      	ldr	r3, [pc, #700]	; (8006b24 <UART_SetConfig+0x2e8>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	69f9      	ldr	r1, [r7, #28]
 8006870:	430b      	orrs	r3, r1
 8006872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4aa4      	ldr	r2, [pc, #656]	; (8006b28 <UART_SetConfig+0x2ec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80068ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	69f9      	ldr	r1, [r7, #28]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	f023 010f 	bic.w	r1, r3, #15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a95      	ldr	r2, [pc, #596]	; (8006b2c <UART_SetConfig+0x2f0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d120      	bne.n	800691e <UART_SetConfig+0xe2>
 80068dc:	4b94      	ldr	r3, [pc, #592]	; (8006b30 <UART_SetConfig+0x2f4>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d816      	bhi.n	8006918 <UART_SetConfig+0xdc>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0xb4>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006901 	.word	0x08006901
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006907 	.word	0x08006907
 80068fc:	08006913 	.word	0x08006913
 8006900:	2301      	movs	r3, #1
 8006902:	76fb      	strb	r3, [r7, #27]
 8006904:	e0bc      	b.n	8006a80 <UART_SetConfig+0x244>
 8006906:	2302      	movs	r3, #2
 8006908:	76fb      	strb	r3, [r7, #27]
 800690a:	e0b9      	b.n	8006a80 <UART_SetConfig+0x244>
 800690c:	2304      	movs	r3, #4
 800690e:	76fb      	strb	r3, [r7, #27]
 8006910:	e0b6      	b.n	8006a80 <UART_SetConfig+0x244>
 8006912:	2308      	movs	r3, #8
 8006914:	76fb      	strb	r3, [r7, #27]
 8006916:	e0b3      	b.n	8006a80 <UART_SetConfig+0x244>
 8006918:	2310      	movs	r3, #16
 800691a:	76fb      	strb	r3, [r7, #27]
 800691c:	e0b0      	b.n	8006a80 <UART_SetConfig+0x244>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a84      	ldr	r2, [pc, #528]	; (8006b34 <UART_SetConfig+0x2f8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d132      	bne.n	800698e <UART_SetConfig+0x152>
 8006928:	4b81      	ldr	r3, [pc, #516]	; (8006b30 <UART_SetConfig+0x2f4>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b0c      	cmp	r3, #12
 8006934:	d828      	bhi.n	8006988 <UART_SetConfig+0x14c>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0x100>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006971 	.word	0x08006971
 8006940:	08006989 	.word	0x08006989
 8006944:	08006989 	.word	0x08006989
 8006948:	08006989 	.word	0x08006989
 800694c:	0800697d 	.word	0x0800697d
 8006950:	08006989 	.word	0x08006989
 8006954:	08006989 	.word	0x08006989
 8006958:	08006989 	.word	0x08006989
 800695c:	08006977 	.word	0x08006977
 8006960:	08006989 	.word	0x08006989
 8006964:	08006989 	.word	0x08006989
 8006968:	08006989 	.word	0x08006989
 800696c:	08006983 	.word	0x08006983
 8006970:	2300      	movs	r3, #0
 8006972:	76fb      	strb	r3, [r7, #27]
 8006974:	e084      	b.n	8006a80 <UART_SetConfig+0x244>
 8006976:	2302      	movs	r3, #2
 8006978:	76fb      	strb	r3, [r7, #27]
 800697a:	e081      	b.n	8006a80 <UART_SetConfig+0x244>
 800697c:	2304      	movs	r3, #4
 800697e:	76fb      	strb	r3, [r7, #27]
 8006980:	e07e      	b.n	8006a80 <UART_SetConfig+0x244>
 8006982:	2308      	movs	r3, #8
 8006984:	76fb      	strb	r3, [r7, #27]
 8006986:	e07b      	b.n	8006a80 <UART_SetConfig+0x244>
 8006988:	2310      	movs	r3, #16
 800698a:	76fb      	strb	r3, [r7, #27]
 800698c:	e078      	b.n	8006a80 <UART_SetConfig+0x244>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a69      	ldr	r2, [pc, #420]	; (8006b38 <UART_SetConfig+0x2fc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d120      	bne.n	80069da <UART_SetConfig+0x19e>
 8006998:	4b65      	ldr	r3, [pc, #404]	; (8006b30 <UART_SetConfig+0x2f4>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a2:	2b30      	cmp	r3, #48	; 0x30
 80069a4:	d013      	beq.n	80069ce <UART_SetConfig+0x192>
 80069a6:	2b30      	cmp	r3, #48	; 0x30
 80069a8:	d814      	bhi.n	80069d4 <UART_SetConfig+0x198>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d009      	beq.n	80069c2 <UART_SetConfig+0x186>
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d810      	bhi.n	80069d4 <UART_SetConfig+0x198>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <UART_SetConfig+0x180>
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d006      	beq.n	80069c8 <UART_SetConfig+0x18c>
 80069ba:	e00b      	b.n	80069d4 <UART_SetConfig+0x198>
 80069bc:	2300      	movs	r3, #0
 80069be:	76fb      	strb	r3, [r7, #27]
 80069c0:	e05e      	b.n	8006a80 <UART_SetConfig+0x244>
 80069c2:	2302      	movs	r3, #2
 80069c4:	76fb      	strb	r3, [r7, #27]
 80069c6:	e05b      	b.n	8006a80 <UART_SetConfig+0x244>
 80069c8:	2304      	movs	r3, #4
 80069ca:	76fb      	strb	r3, [r7, #27]
 80069cc:	e058      	b.n	8006a80 <UART_SetConfig+0x244>
 80069ce:	2308      	movs	r3, #8
 80069d0:	76fb      	strb	r3, [r7, #27]
 80069d2:	e055      	b.n	8006a80 <UART_SetConfig+0x244>
 80069d4:	2310      	movs	r3, #16
 80069d6:	76fb      	strb	r3, [r7, #27]
 80069d8:	e052      	b.n	8006a80 <UART_SetConfig+0x244>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a57      	ldr	r2, [pc, #348]	; (8006b3c <UART_SetConfig+0x300>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d120      	bne.n	8006a26 <UART_SetConfig+0x1ea>
 80069e4:	4b52      	ldr	r3, [pc, #328]	; (8006b30 <UART_SetConfig+0x2f4>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ee:	2bc0      	cmp	r3, #192	; 0xc0
 80069f0:	d013      	beq.n	8006a1a <UART_SetConfig+0x1de>
 80069f2:	2bc0      	cmp	r3, #192	; 0xc0
 80069f4:	d814      	bhi.n	8006a20 <UART_SetConfig+0x1e4>
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d009      	beq.n	8006a0e <UART_SetConfig+0x1d2>
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d810      	bhi.n	8006a20 <UART_SetConfig+0x1e4>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <UART_SetConfig+0x1cc>
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d006      	beq.n	8006a14 <UART_SetConfig+0x1d8>
 8006a06:	e00b      	b.n	8006a20 <UART_SetConfig+0x1e4>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	76fb      	strb	r3, [r7, #27]
 8006a0c:	e038      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	76fb      	strb	r3, [r7, #27]
 8006a12:	e035      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a14:	2304      	movs	r3, #4
 8006a16:	76fb      	strb	r3, [r7, #27]
 8006a18:	e032      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	76fb      	strb	r3, [r7, #27]
 8006a1e:	e02f      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a20:	2310      	movs	r3, #16
 8006a22:	76fb      	strb	r3, [r7, #27]
 8006a24:	e02c      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3f      	ldr	r2, [pc, #252]	; (8006b28 <UART_SetConfig+0x2ec>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d125      	bne.n	8006a7c <UART_SetConfig+0x240>
 8006a30:	4b3f      	ldr	r3, [pc, #252]	; (8006b30 <UART_SetConfig+0x2f4>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a3e:	d017      	beq.n	8006a70 <UART_SetConfig+0x234>
 8006a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a44:	d817      	bhi.n	8006a76 <UART_SetConfig+0x23a>
 8006a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4a:	d00b      	beq.n	8006a64 <UART_SetConfig+0x228>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a50:	d811      	bhi.n	8006a76 <UART_SetConfig+0x23a>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <UART_SetConfig+0x222>
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d006      	beq.n	8006a6a <UART_SetConfig+0x22e>
 8006a5c:	e00b      	b.n	8006a76 <UART_SetConfig+0x23a>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	76fb      	strb	r3, [r7, #27]
 8006a62:	e00d      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a64:	2302      	movs	r3, #2
 8006a66:	76fb      	strb	r3, [r7, #27]
 8006a68:	e00a      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	76fb      	strb	r3, [r7, #27]
 8006a6e:	e007      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a70:	2308      	movs	r3, #8
 8006a72:	76fb      	strb	r3, [r7, #27]
 8006a74:	e004      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a76:	2310      	movs	r3, #16
 8006a78:	76fb      	strb	r3, [r7, #27]
 8006a7a:	e001      	b.n	8006a80 <UART_SetConfig+0x244>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <UART_SetConfig+0x2ec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	f040 809e 	bne.w	8006bc8 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a8c:	7efb      	ldrb	r3, [r7, #27]
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d823      	bhi.n	8006ada <UART_SetConfig+0x29e>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x25c>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006acb 	.word	0x08006acb
 8006aac:	08006adb 	.word	0x08006adb
 8006ab0:	08006adb 	.word	0x08006adb
 8006ab4:	08006adb 	.word	0x08006adb
 8006ab8:	08006ad3 	.word	0x08006ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fd fad4 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006ac0:	6178      	str	r0, [r7, #20]
        break;
 8006ac2:	e00f      	b.n	8006ae4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac4:	4b1e      	ldr	r3, [pc, #120]	; (8006b40 <UART_SetConfig+0x304>)
 8006ac6:	617b      	str	r3, [r7, #20]
        break;
 8006ac8:	e00c      	b.n	8006ae4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aca:	f7fd fa5f 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8006ace:	6178      	str	r0, [r7, #20]
        break;
 8006ad0:	e008      	b.n	8006ae4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad6:	617b      	str	r3, [r7, #20]
        break;
 8006ad8:	e004      	b.n	8006ae4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	76bb      	strb	r3, [r7, #26]
        break;
 8006ae2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 812e 	beq.w	8006d48 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <UART_SetConfig+0x308>)
 8006af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af6:	461a      	mov	r2, r3
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d305      	bcc.n	8006b1c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d915      	bls.n	8006b48 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	76bb      	strb	r3, [r7, #26]
 8006b20:	e112      	b.n	8006d48 <UART_SetConfig+0x50c>
 8006b22:	bf00      	nop
 8006b24:	cfff69f3 	.word	0xcfff69f3
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	40013800 	.word	0x40013800
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40004400 	.word	0x40004400
 8006b38:	40004800 	.word	0x40004800
 8006b3c:	40004c00 	.word	0x40004c00
 8006b40:	00f42400 	.word	0x00f42400
 8006b44:	08009f60 	.word	0x08009f60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	4a86      	ldr	r2, [pc, #536]	; (8006d70 <UART_SetConfig+0x534>)
 8006b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	f7fa f89a 	bl	8000c98 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	020b      	lsls	r3, r1, #8
 8006b76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b7a:	0202      	lsls	r2, r0, #8
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	6849      	ldr	r1, [r1, #4]
 8006b80:	0849      	lsrs	r1, r1, #1
 8006b82:	4608      	mov	r0, r1
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	1814      	adds	r4, r2, r0
 8006b8a:	eb43 0501 	adc.w	r5, r3, r1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	4620      	mov	r0, r4
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f7fa f87c 	bl	8000c98 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bae:	d308      	bcc.n	8006bc2 <UART_SetConfig+0x386>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb6:	d204      	bcs.n	8006bc2 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	e0c2      	b.n	8006d48 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	76bb      	strb	r3, [r7, #26]
 8006bc6:	e0bf      	b.n	8006d48 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d165      	bne.n	8006c9e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8006bd2:	7efb      	ldrb	r3, [r7, #27]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d828      	bhi.n	8006c2a <UART_SetConfig+0x3ee>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0x3a4>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c2b 	.word	0x08006c2b
 8006bf8:	08006c2b 	.word	0x08006c2b
 8006bfc:	08006c2b 	.word	0x08006c2b
 8006c00:	08006c23 	.word	0x08006c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fd fa30 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006c08:	6178      	str	r0, [r7, #20]
        break;
 8006c0a:	e013      	b.n	8006c34 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fd fa42 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8006c10:	6178      	str	r0, [r7, #20]
        break;
 8006c12:	e00f      	b.n	8006c34 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c14:	4b57      	ldr	r3, [pc, #348]	; (8006d74 <UART_SetConfig+0x538>)
 8006c16:	617b      	str	r3, [r7, #20]
        break;
 8006c18:	e00c      	b.n	8006c34 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fd f9b7 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8006c1e:	6178      	str	r0, [r7, #20]
        break;
 8006c20:	e008      	b.n	8006c34 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c26:	617b      	str	r3, [r7, #20]
        break;
 8006c28:	e004      	b.n	8006c34 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	76bb      	strb	r3, [r7, #26]
        break;
 8006c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8086 	beq.w	8006d48 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4a4b      	ldr	r2, [pc, #300]	; (8006d70 <UART_SetConfig+0x534>)
 8006c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c46:	461a      	mov	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4e:	005a      	lsls	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	441a      	add	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d916      	bls.n	8006c98 <UART_SetConfig+0x45c>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c70:	d212      	bcs.n	8006c98 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f023 030f 	bic.w	r3, r3, #15
 8006c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	89fb      	ldrh	r3, [r7, #14]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	89fa      	ldrh	r2, [r7, #14]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e057      	b.n	8006d48 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	76bb      	strb	r3, [r7, #26]
 8006c9c:	e054      	b.n	8006d48 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9e:	7efb      	ldrb	r3, [r7, #27]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d828      	bhi.n	8006cf6 <UART_SetConfig+0x4ba>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x470>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce7 	.word	0x08006ce7
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006cf7 	.word	0x08006cf7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fd f9ca 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	6178      	str	r0, [r7, #20]
        break;
 8006cd6:	e013      	b.n	8006d00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fd f9dc 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8006cdc:	6178      	str	r0, [r7, #20]
        break;
 8006cde:	e00f      	b.n	8006d00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <UART_SetConfig+0x538>)
 8006ce2:	617b      	str	r3, [r7, #20]
        break;
 8006ce4:	e00c      	b.n	8006d00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fd f951 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8006cea:	6178      	str	r0, [r7, #20]
        break;
 8006cec:	e008      	b.n	8006d00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf2:	617b      	str	r3, [r7, #20]
        break;
 8006cf4:	e004      	b.n	8006d00 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	76bb      	strb	r3, [r7, #26]
        break;
 8006cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d020      	beq.n	8006d48 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <UART_SetConfig+0x534>)
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	461a      	mov	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d908      	bls.n	8006d44 <UART_SetConfig+0x508>
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d38:	d204      	bcs.n	8006d44 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e001      	b.n	8006d48 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d64:	7ebb      	ldrb	r3, [r7, #26]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	08009f60 	.word	0x08009f60
 8006d74:	00f42400 	.word	0x00f42400

08006d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e76:	d10a      	bne.n	8006e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ecc:	f7fb fe0c 	bl	8002ae8 <HAL_GetTick>
 8006ed0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10e      	bne.n	8006efe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f82f 	bl	8006f52 <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e025      	b.n	8006f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d10e      	bne.n	8006f2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f819 	bl	8006f52 <UART_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e00f      	b.n	8006f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f62:	e062      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d05e      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6c:	f7fb fdbc 	bl	8002ae8 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11d      	bne.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e045      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d02e      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fda:	d126      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ff4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e00f      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4013      	ands	r3, r2
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	bf0c      	ite	eq
 800703a:	2301      	moveq	r3, #1
 800703c:	2300      	movne	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	429a      	cmp	r2, r3
 8007046:	d08d      	beq.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2222      	movs	r2, #34	; 0x22
 800707c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02c      	beq.n	80070e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708c:	4a25      	ldr	r2, [pc, #148]	; (8007124 <UART_Start_Receive_DMA+0xd0>)
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007094:	4a24      	ldr	r2, [pc, #144]	; (8007128 <UART_Start_Receive_DMA+0xd4>)
 8007096:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800709c:	4a23      	ldr	r2, [pc, #140]	; (800712c <UART_Start_Receive_DMA+0xd8>)
 800709e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a4:	2200      	movs	r2, #0
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3324      	adds	r3, #36	; 0x24
 80070b2:	4619      	mov	r1, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	461a      	mov	r2, r3
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	f7fb fefa 	bl	8002eb4 <HAL_DMA_Start_IT>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00d      	beq.n	80070e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2210      	movs	r2, #16
 80070ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e01c      	b.n	800711c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007118:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	080071d1 	.word	0x080071d1
 8007128:	0800726b 	.word	0x0800726b
 800712c:	080072a3 	.word	0x080072a3

08007130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007146:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007156:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007182:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d107      	bne.n	80071b0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0210 	bic.w	r2, r2, #16
 80071ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d12b      	bne.n	8007244 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007202:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007222:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d107      	bne.n	8007244 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0210 	bic.w	r2, r2, #16
 8007242:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d107      	bne.n	800725c <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fae5 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800725a:	e002      	b.n	8007262 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7fa fee7 	bl	8002030 <HAL_UART_RxCpltCallback>
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d109      	bne.n	8007294 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	b29b      	uxth	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fac9 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007292:	e002      	b.n	800729a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fab1 	bl	80067fc <HAL_UART_RxHalfCpltCallback>
}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d109      	bne.n	80072e2 <UART_DMAError+0x40>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b21      	cmp	r3, #33	; 0x21
 80072d2:	d106      	bne.n	80072e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f7ff ff27 	bl	8007130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d109      	bne.n	8007304 <UART_DMAError+0x62>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b22      	cmp	r3, #34	; 0x22
 80072f4:	d106      	bne.n	8007304 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80072fe:	6978      	ldr	r0, [r7, #20]
 8007300:	f7ff ff34 	bl	800716c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730a:	f043 0210 	orr.w	r2, r3, #16
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007314:	6978      	ldr	r0, [r7, #20]
 8007316:	f7ff fa7b 	bl	8006810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_UARTEx_DisableFifoMode+0x16>
 8007334:	2302      	movs	r3, #2
 8007336:	e027      	b.n	8007388 <HAL_UARTEx_DisableFifoMode+0x66>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007366:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e02d      	b.n	8007408 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2224      	movs	r2, #36	; 0x24
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f84f 	bl	800748c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007424:	2302      	movs	r3, #2
 8007426:	e02d      	b.n	8007484 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2224      	movs	r2, #36	; 0x24
 8007434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f811 	bl	800748c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074ac:	e031      	b.n	8007512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074ae:	2308      	movs	r3, #8
 80074b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074b2:	2308      	movs	r3, #8
 80074b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	0e5b      	lsrs	r3, r3, #25
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	0f5b      	lsrs	r3, r3, #29
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	7b3a      	ldrb	r2, [r7, #12]
 80074da:	4911      	ldr	r1, [pc, #68]	; (8007520 <UARTEx_SetNbDataToProcess+0x94>)
 80074dc:	5c8a      	ldrb	r2, [r1, r2]
 80074de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074e2:	7b3a      	ldrb	r2, [r7, #12]
 80074e4:	490f      	ldr	r1, [pc, #60]	; (8007524 <UARTEx_SetNbDataToProcess+0x98>)
 80074e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	7b7a      	ldrb	r2, [r7, #13]
 80074f8:	4909      	ldr	r1, [pc, #36]	; (8007520 <UARTEx_SetNbDataToProcess+0x94>)
 80074fa:	5c8a      	ldrb	r2, [r1, r2]
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007500:	7b7a      	ldrb	r2, [r7, #13]
 8007502:	4908      	ldr	r1, [pc, #32]	; (8007524 <UARTEx_SetNbDataToProcess+0x98>)
 8007504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007506:	fb93 f3f2 	sdiv	r3, r3, r2
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	08009f78 	.word	0x08009f78
 8007524:	08009f80 	.word	0x08009f80

08007528 <__errno>:
 8007528:	4b01      	ldr	r3, [pc, #4]	; (8007530 <__errno+0x8>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000010 	.word	0x20000010

08007534 <__libc_init_array>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	4d0d      	ldr	r5, [pc, #52]	; (800756c <__libc_init_array+0x38>)
 8007538:	4c0d      	ldr	r4, [pc, #52]	; (8007570 <__libc_init_array+0x3c>)
 800753a:	1b64      	subs	r4, r4, r5
 800753c:	10a4      	asrs	r4, r4, #2
 800753e:	2600      	movs	r6, #0
 8007540:	42a6      	cmp	r6, r4
 8007542:	d109      	bne.n	8007558 <__libc_init_array+0x24>
 8007544:	4d0b      	ldr	r5, [pc, #44]	; (8007574 <__libc_init_array+0x40>)
 8007546:	4c0c      	ldr	r4, [pc, #48]	; (8007578 <__libc_init_array+0x44>)
 8007548:	f002 fcf0 	bl	8009f2c <_init>
 800754c:	1b64      	subs	r4, r4, r5
 800754e:	10a4      	asrs	r4, r4, #2
 8007550:	2600      	movs	r6, #0
 8007552:	42a6      	cmp	r6, r4
 8007554:	d105      	bne.n	8007562 <__libc_init_array+0x2e>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	f855 3b04 	ldr.w	r3, [r5], #4
 800755c:	4798      	blx	r3
 800755e:	3601      	adds	r6, #1
 8007560:	e7ee      	b.n	8007540 <__libc_init_array+0xc>
 8007562:	f855 3b04 	ldr.w	r3, [r5], #4
 8007566:	4798      	blx	r3
 8007568:	3601      	adds	r6, #1
 800756a:	e7f2      	b.n	8007552 <__libc_init_array+0x1e>
 800756c:	0800a374 	.word	0x0800a374
 8007570:	0800a374 	.word	0x0800a374
 8007574:	0800a374 	.word	0x0800a374
 8007578:	0800a378 	.word	0x0800a378

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <__cvt>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	ec55 4b10 	vmov	r4, r5, d0
 8007594:	2d00      	cmp	r5, #0
 8007596:	460e      	mov	r6, r1
 8007598:	4619      	mov	r1, r3
 800759a:	462b      	mov	r3, r5
 800759c:	bfbb      	ittet	lt
 800759e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075a2:	461d      	movlt	r5, r3
 80075a4:	2300      	movge	r3, #0
 80075a6:	232d      	movlt	r3, #45	; 0x2d
 80075a8:	700b      	strb	r3, [r1, #0]
 80075aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075b0:	4691      	mov	r9, r2
 80075b2:	f023 0820 	bic.w	r8, r3, #32
 80075b6:	bfbc      	itt	lt
 80075b8:	4622      	movlt	r2, r4
 80075ba:	4614      	movlt	r4, r2
 80075bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075c0:	d005      	beq.n	80075ce <__cvt+0x42>
 80075c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075c6:	d100      	bne.n	80075ca <__cvt+0x3e>
 80075c8:	3601      	adds	r6, #1
 80075ca:	2102      	movs	r1, #2
 80075cc:	e000      	b.n	80075d0 <__cvt+0x44>
 80075ce:	2103      	movs	r1, #3
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	ab02      	add	r3, sp, #8
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	ec45 4b10 	vmov	d0, r4, r5
 80075dc:	4653      	mov	r3, sl
 80075de:	4632      	mov	r2, r6
 80075e0:	f000 fcca 	bl	8007f78 <_dtoa_r>
 80075e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075e8:	4607      	mov	r7, r0
 80075ea:	d102      	bne.n	80075f2 <__cvt+0x66>
 80075ec:	f019 0f01 	tst.w	r9, #1
 80075f0:	d022      	beq.n	8007638 <__cvt+0xac>
 80075f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075f6:	eb07 0906 	add.w	r9, r7, r6
 80075fa:	d110      	bne.n	800761e <__cvt+0x92>
 80075fc:	783b      	ldrb	r3, [r7, #0]
 80075fe:	2b30      	cmp	r3, #48	; 0x30
 8007600:	d10a      	bne.n	8007618 <__cvt+0x8c>
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f9 fa85 	bl	8000b18 <__aeabi_dcmpeq>
 800760e:	b918      	cbnz	r0, 8007618 <__cvt+0x8c>
 8007610:	f1c6 0601 	rsb	r6, r6, #1
 8007614:	f8ca 6000 	str.w	r6, [sl]
 8007618:	f8da 3000 	ldr.w	r3, [sl]
 800761c:	4499      	add	r9, r3
 800761e:	2200      	movs	r2, #0
 8007620:	2300      	movs	r3, #0
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f9 fa77 	bl	8000b18 <__aeabi_dcmpeq>
 800762a:	b108      	cbz	r0, 8007630 <__cvt+0xa4>
 800762c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007630:	2230      	movs	r2, #48	; 0x30
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	454b      	cmp	r3, r9
 8007636:	d307      	bcc.n	8007648 <__cvt+0xbc>
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800763c:	1bdb      	subs	r3, r3, r7
 800763e:	4638      	mov	r0, r7
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	b004      	add	sp, #16
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	1c59      	adds	r1, r3, #1
 800764a:	9103      	str	r1, [sp, #12]
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e7f0      	b.n	8007632 <__cvt+0xa6>

08007650 <__exponent>:
 8007650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007652:	4603      	mov	r3, r0
 8007654:	2900      	cmp	r1, #0
 8007656:	bfb8      	it	lt
 8007658:	4249      	neglt	r1, r1
 800765a:	f803 2b02 	strb.w	r2, [r3], #2
 800765e:	bfb4      	ite	lt
 8007660:	222d      	movlt	r2, #45	; 0x2d
 8007662:	222b      	movge	r2, #43	; 0x2b
 8007664:	2909      	cmp	r1, #9
 8007666:	7042      	strb	r2, [r0, #1]
 8007668:	dd2a      	ble.n	80076c0 <__exponent+0x70>
 800766a:	f10d 0407 	add.w	r4, sp, #7
 800766e:	46a4      	mov	ip, r4
 8007670:	270a      	movs	r7, #10
 8007672:	46a6      	mov	lr, r4
 8007674:	460a      	mov	r2, r1
 8007676:	fb91 f6f7 	sdiv	r6, r1, r7
 800767a:	fb07 1516 	mls	r5, r7, r6, r1
 800767e:	3530      	adds	r5, #48	; 0x30
 8007680:	2a63      	cmp	r2, #99	; 0x63
 8007682:	f104 34ff 	add.w	r4, r4, #4294967295
 8007686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800768a:	4631      	mov	r1, r6
 800768c:	dcf1      	bgt.n	8007672 <__exponent+0x22>
 800768e:	3130      	adds	r1, #48	; 0x30
 8007690:	f1ae 0502 	sub.w	r5, lr, #2
 8007694:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007698:	1c44      	adds	r4, r0, #1
 800769a:	4629      	mov	r1, r5
 800769c:	4561      	cmp	r1, ip
 800769e:	d30a      	bcc.n	80076b6 <__exponent+0x66>
 80076a0:	f10d 0209 	add.w	r2, sp, #9
 80076a4:	eba2 020e 	sub.w	r2, r2, lr
 80076a8:	4565      	cmp	r5, ip
 80076aa:	bf88      	it	hi
 80076ac:	2200      	movhi	r2, #0
 80076ae:	4413      	add	r3, r2
 80076b0:	1a18      	subs	r0, r3, r0
 80076b2:	b003      	add	sp, #12
 80076b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076be:	e7ed      	b.n	800769c <__exponent+0x4c>
 80076c0:	2330      	movs	r3, #48	; 0x30
 80076c2:	3130      	adds	r1, #48	; 0x30
 80076c4:	7083      	strb	r3, [r0, #2]
 80076c6:	70c1      	strb	r1, [r0, #3]
 80076c8:	1d03      	adds	r3, r0, #4
 80076ca:	e7f1      	b.n	80076b0 <__exponent+0x60>

080076cc <_printf_float>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	ed2d 8b02 	vpush	{d8}
 80076d4:	b08d      	sub	sp, #52	; 0x34
 80076d6:	460c      	mov	r4, r1
 80076d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076dc:	4616      	mov	r6, r2
 80076de:	461f      	mov	r7, r3
 80076e0:	4605      	mov	r5, r0
 80076e2:	f001 fa35 	bl	8008b50 <_localeconv_r>
 80076e6:	f8d0 a000 	ldr.w	sl, [r0]
 80076ea:	4650      	mov	r0, sl
 80076ec:	f7f8 fd98 	bl	8000220 <strlen>
 80076f0:	2300      	movs	r3, #0
 80076f2:	930a      	str	r3, [sp, #40]	; 0x28
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	f8d8 3000 	ldr.w	r3, [r8]
 80076fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007700:	3307      	adds	r3, #7
 8007702:	f023 0307 	bic.w	r3, r3, #7
 8007706:	f103 0208 	add.w	r2, r3, #8
 800770a:	f8c8 2000 	str.w	r2, [r8]
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007716:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800771a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	f8cd 8018 	str.w	r8, [sp, #24]
 8007724:	ee08 0a10 	vmov	s16, r0
 8007728:	4b9f      	ldr	r3, [pc, #636]	; (80079a8 <_printf_float+0x2dc>)
 800772a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	f7f9 fa23 	bl	8000b7c <__aeabi_dcmpun>
 8007736:	bb88      	cbnz	r0, 800779c <_printf_float+0xd0>
 8007738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800773c:	4b9a      	ldr	r3, [pc, #616]	; (80079a8 <_printf_float+0x2dc>)
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	f7f9 f9fd 	bl	8000b40 <__aeabi_dcmple>
 8007746:	bb48      	cbnz	r0, 800779c <_printf_float+0xd0>
 8007748:	2200      	movs	r2, #0
 800774a:	2300      	movs	r3, #0
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f9 f9ec 	bl	8000b2c <__aeabi_dcmplt>
 8007754:	b110      	cbz	r0, 800775c <_printf_float+0x90>
 8007756:	232d      	movs	r3, #45	; 0x2d
 8007758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775c:	4b93      	ldr	r3, [pc, #588]	; (80079ac <_printf_float+0x2e0>)
 800775e:	4894      	ldr	r0, [pc, #592]	; (80079b0 <_printf_float+0x2e4>)
 8007760:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007764:	bf94      	ite	ls
 8007766:	4698      	movls	r8, r3
 8007768:	4680      	movhi	r8, r0
 800776a:	2303      	movs	r3, #3
 800776c:	6123      	str	r3, [r4, #16]
 800776e:	9b05      	ldr	r3, [sp, #20]
 8007770:	f023 0204 	bic.w	r2, r3, #4
 8007774:	6022      	str	r2, [r4, #0]
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	9700      	str	r7, [sp, #0]
 800777c:	4633      	mov	r3, r6
 800777e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f9d8 	bl	8007b38 <_printf_common>
 8007788:	3001      	adds	r0, #1
 800778a:	f040 8090 	bne.w	80078ae <_printf_float+0x1e2>
 800778e:	f04f 30ff 	mov.w	r0, #4294967295
 8007792:	b00d      	add	sp, #52	; 0x34
 8007794:	ecbd 8b02 	vpop	{d8}
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	4642      	mov	r2, r8
 800779e:	464b      	mov	r3, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f9 f9ea 	bl	8000b7c <__aeabi_dcmpun>
 80077a8:	b140      	cbz	r0, 80077bc <_printf_float+0xf0>
 80077aa:	464b      	mov	r3, r9
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbc      	itt	lt
 80077b0:	232d      	movlt	r3, #45	; 0x2d
 80077b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077b6:	487f      	ldr	r0, [pc, #508]	; (80079b4 <_printf_float+0x2e8>)
 80077b8:	4b7f      	ldr	r3, [pc, #508]	; (80079b8 <_printf_float+0x2ec>)
 80077ba:	e7d1      	b.n	8007760 <_printf_float+0x94>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077c2:	9206      	str	r2, [sp, #24]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	d13f      	bne.n	8007848 <_printf_float+0x17c>
 80077c8:	2306      	movs	r3, #6
 80077ca:	6063      	str	r3, [r4, #4]
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	6861      	ldr	r1, [r4, #4]
 80077d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077d4:	2300      	movs	r3, #0
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	ab0a      	add	r3, sp, #40	; 0x28
 80077da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077de:	ab09      	add	r3, sp, #36	; 0x24
 80077e0:	ec49 8b10 	vmov	d0, r8, r9
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6022      	str	r2, [r4, #0]
 80077e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff fecd 	bl	800758c <__cvt>
 80077f2:	9b06      	ldr	r3, [sp, #24]
 80077f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077f6:	2b47      	cmp	r3, #71	; 0x47
 80077f8:	4680      	mov	r8, r0
 80077fa:	d108      	bne.n	800780e <_printf_float+0x142>
 80077fc:	1cc8      	adds	r0, r1, #3
 80077fe:	db02      	blt.n	8007806 <_printf_float+0x13a>
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	4299      	cmp	r1, r3
 8007804:	dd41      	ble.n	800788a <_printf_float+0x1be>
 8007806:	f1ab 0b02 	sub.w	fp, fp, #2
 800780a:	fa5f fb8b 	uxtb.w	fp, fp
 800780e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007812:	d820      	bhi.n	8007856 <_printf_float+0x18a>
 8007814:	3901      	subs	r1, #1
 8007816:	465a      	mov	r2, fp
 8007818:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800781c:	9109      	str	r1, [sp, #36]	; 0x24
 800781e:	f7ff ff17 	bl	8007650 <__exponent>
 8007822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007824:	1813      	adds	r3, r2, r0
 8007826:	2a01      	cmp	r2, #1
 8007828:	4681      	mov	r9, r0
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	dc02      	bgt.n	8007834 <_printf_float+0x168>
 800782e:	6822      	ldr	r2, [r4, #0]
 8007830:	07d2      	lsls	r2, r2, #31
 8007832:	d501      	bpl.n	8007838 <_printf_float+0x16c>
 8007834:	3301      	adds	r3, #1
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800783c:	2b00      	cmp	r3, #0
 800783e:	d09c      	beq.n	800777a <_printf_float+0xae>
 8007840:	232d      	movs	r3, #45	; 0x2d
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007846:	e798      	b.n	800777a <_printf_float+0xae>
 8007848:	9a06      	ldr	r2, [sp, #24]
 800784a:	2a47      	cmp	r2, #71	; 0x47
 800784c:	d1be      	bne.n	80077cc <_printf_float+0x100>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1bc      	bne.n	80077cc <_printf_float+0x100>
 8007852:	2301      	movs	r3, #1
 8007854:	e7b9      	b.n	80077ca <_printf_float+0xfe>
 8007856:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800785a:	d118      	bne.n	800788e <_printf_float+0x1c2>
 800785c:	2900      	cmp	r1, #0
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	dd0b      	ble.n	800787a <_printf_float+0x1ae>
 8007862:	6121      	str	r1, [r4, #16]
 8007864:	b913      	cbnz	r3, 800786c <_printf_float+0x1a0>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	07d0      	lsls	r0, r2, #31
 800786a:	d502      	bpl.n	8007872 <_printf_float+0x1a6>
 800786c:	3301      	adds	r3, #1
 800786e:	440b      	add	r3, r1
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	65a1      	str	r1, [r4, #88]	; 0x58
 8007874:	f04f 0900 	mov.w	r9, #0
 8007878:	e7de      	b.n	8007838 <_printf_float+0x16c>
 800787a:	b913      	cbnz	r3, 8007882 <_printf_float+0x1b6>
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	07d2      	lsls	r2, r2, #31
 8007880:	d501      	bpl.n	8007886 <_printf_float+0x1ba>
 8007882:	3302      	adds	r3, #2
 8007884:	e7f4      	b.n	8007870 <_printf_float+0x1a4>
 8007886:	2301      	movs	r3, #1
 8007888:	e7f2      	b.n	8007870 <_printf_float+0x1a4>
 800788a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	4299      	cmp	r1, r3
 8007892:	db05      	blt.n	80078a0 <_printf_float+0x1d4>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	6121      	str	r1, [r4, #16]
 8007898:	07d8      	lsls	r0, r3, #31
 800789a:	d5ea      	bpl.n	8007872 <_printf_float+0x1a6>
 800789c:	1c4b      	adds	r3, r1, #1
 800789e:	e7e7      	b.n	8007870 <_printf_float+0x1a4>
 80078a0:	2900      	cmp	r1, #0
 80078a2:	bfd4      	ite	le
 80078a4:	f1c1 0202 	rsble	r2, r1, #2
 80078a8:	2201      	movgt	r2, #1
 80078aa:	4413      	add	r3, r2
 80078ac:	e7e0      	b.n	8007870 <_printf_float+0x1a4>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	055a      	lsls	r2, r3, #21
 80078b2:	d407      	bmi.n	80078c4 <_printf_float+0x1f8>
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	4642      	mov	r2, r8
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	d12c      	bne.n	800791c <_printf_float+0x250>
 80078c2:	e764      	b.n	800778e <_printf_float+0xc2>
 80078c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078c8:	f240 80e0 	bls.w	8007a8c <_printf_float+0x3c0>
 80078cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	f7f9 f920 	bl	8000b18 <__aeabi_dcmpeq>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d034      	beq.n	8007946 <_printf_float+0x27a>
 80078dc:	4a37      	ldr	r2, [pc, #220]	; (80079bc <_printf_float+0x2f0>)
 80078de:	2301      	movs	r3, #1
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f af51 	beq.w	800778e <_printf_float+0xc2>
 80078ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078f0:	429a      	cmp	r2, r3
 80078f2:	db02      	blt.n	80078fa <_printf_float+0x22e>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07d8      	lsls	r0, r3, #31
 80078f8:	d510      	bpl.n	800791c <_printf_float+0x250>
 80078fa:	ee18 3a10 	vmov	r3, s16
 80078fe:	4652      	mov	r2, sl
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	f43f af41 	beq.w	800778e <_printf_float+0xc2>
 800790c:	f04f 0800 	mov.w	r8, #0
 8007910:	f104 091a 	add.w	r9, r4, #26
 8007914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007916:	3b01      	subs	r3, #1
 8007918:	4543      	cmp	r3, r8
 800791a:	dc09      	bgt.n	8007930 <_printf_float+0x264>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	079b      	lsls	r3, r3, #30
 8007920:	f100 8105 	bmi.w	8007b2e <_printf_float+0x462>
 8007924:	68e0      	ldr	r0, [r4, #12]
 8007926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007928:	4298      	cmp	r0, r3
 800792a:	bfb8      	it	lt
 800792c:	4618      	movlt	r0, r3
 800792e:	e730      	b.n	8007792 <_printf_float+0xc6>
 8007930:	2301      	movs	r3, #1
 8007932:	464a      	mov	r2, r9
 8007934:	4631      	mov	r1, r6
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	f43f af27 	beq.w	800778e <_printf_float+0xc2>
 8007940:	f108 0801 	add.w	r8, r8, #1
 8007944:	e7e6      	b.n	8007914 <_printf_float+0x248>
 8007946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	dc39      	bgt.n	80079c0 <_printf_float+0x2f4>
 800794c:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <_printf_float+0x2f0>)
 800794e:	2301      	movs	r3, #1
 8007950:	4631      	mov	r1, r6
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	f43f af19 	beq.w	800778e <_printf_float+0xc2>
 800795c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007960:	4313      	orrs	r3, r2
 8007962:	d102      	bne.n	800796a <_printf_float+0x29e>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	07d9      	lsls	r1, r3, #31
 8007968:	d5d8      	bpl.n	800791c <_printf_float+0x250>
 800796a:	ee18 3a10 	vmov	r3, s16
 800796e:	4652      	mov	r2, sl
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f af09 	beq.w	800778e <_printf_float+0xc2>
 800797c:	f04f 0900 	mov.w	r9, #0
 8007980:	f104 0a1a 	add.w	sl, r4, #26
 8007984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007986:	425b      	negs	r3, r3
 8007988:	454b      	cmp	r3, r9
 800798a:	dc01      	bgt.n	8007990 <_printf_float+0x2c4>
 800798c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798e:	e792      	b.n	80078b6 <_printf_float+0x1ea>
 8007990:	2301      	movs	r3, #1
 8007992:	4652      	mov	r2, sl
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f aef7 	beq.w	800778e <_printf_float+0xc2>
 80079a0:	f109 0901 	add.w	r9, r9, #1
 80079a4:	e7ee      	b.n	8007984 <_printf_float+0x2b8>
 80079a6:	bf00      	nop
 80079a8:	7fefffff 	.word	0x7fefffff
 80079ac:	08009f8c 	.word	0x08009f8c
 80079b0:	08009f90 	.word	0x08009f90
 80079b4:	08009f98 	.word	0x08009f98
 80079b8:	08009f94 	.word	0x08009f94
 80079bc:	08009f9c 	.word	0x08009f9c
 80079c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bfa8      	it	ge
 80079c8:	461a      	movge	r2, r3
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	4691      	mov	r9, r2
 80079ce:	dc37      	bgt.n	8007a40 <_printf_float+0x374>
 80079d0:	f04f 0b00 	mov.w	fp, #0
 80079d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d8:	f104 021a 	add.w	r2, r4, #26
 80079dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	eba3 0309 	sub.w	r3, r3, r9
 80079e4:	455b      	cmp	r3, fp
 80079e6:	dc33      	bgt.n	8007a50 <_printf_float+0x384>
 80079e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ec:	429a      	cmp	r2, r3
 80079ee:	db3b      	blt.n	8007a68 <_printf_float+0x39c>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07da      	lsls	r2, r3, #31
 80079f4:	d438      	bmi.n	8007a68 <_printf_float+0x39c>
 80079f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	eba2 0901 	sub.w	r9, r2, r1
 8007a02:	4599      	cmp	r9, r3
 8007a04:	bfa8      	it	ge
 8007a06:	4699      	movge	r9, r3
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	dc35      	bgt.n	8007a7a <_printf_float+0x3ae>
 8007a0e:	f04f 0800 	mov.w	r8, #0
 8007a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a16:	f104 0a1a 	add.w	sl, r4, #26
 8007a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	eba3 0309 	sub.w	r3, r3, r9
 8007a24:	4543      	cmp	r3, r8
 8007a26:	f77f af79 	ble.w	800791c <_printf_float+0x250>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f aeaa 	beq.w	800778e <_printf_float+0xc2>
 8007a3a:	f108 0801 	add.w	r8, r8, #1
 8007a3e:	e7ec      	b.n	8007a1a <_printf_float+0x34e>
 8007a40:	4613      	mov	r3, r2
 8007a42:	4631      	mov	r1, r6
 8007a44:	4642      	mov	r2, r8
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d1c0      	bne.n	80079d0 <_printf_float+0x304>
 8007a4e:	e69e      	b.n	800778e <_printf_float+0xc2>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	9205      	str	r2, [sp, #20]
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f ae97 	beq.w	800778e <_printf_float+0xc2>
 8007a60:	9a05      	ldr	r2, [sp, #20]
 8007a62:	f10b 0b01 	add.w	fp, fp, #1
 8007a66:	e7b9      	b.n	80079dc <_printf_float+0x310>
 8007a68:	ee18 3a10 	vmov	r3, s16
 8007a6c:	4652      	mov	r2, sl
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	d1be      	bne.n	80079f6 <_printf_float+0x32a>
 8007a78:	e689      	b.n	800778e <_printf_float+0xc2>
 8007a7a:	9a05      	ldr	r2, [sp, #20]
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	4442      	add	r2, r8
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	d1c1      	bne.n	8007a0e <_printf_float+0x342>
 8007a8a:	e680      	b.n	800778e <_printf_float+0xc2>
 8007a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a8e:	2a01      	cmp	r2, #1
 8007a90:	dc01      	bgt.n	8007a96 <_printf_float+0x3ca>
 8007a92:	07db      	lsls	r3, r3, #31
 8007a94:	d538      	bpl.n	8007b08 <_printf_float+0x43c>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4642      	mov	r2, r8
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b8      	blx	r7
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	f43f ae74 	beq.w	800778e <_printf_float+0xc2>
 8007aa6:	ee18 3a10 	vmov	r3, s16
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f ae6b 	beq.w	800778e <_printf_float+0xc2>
 8007ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f7f9 f82a 	bl	8000b18 <__aeabi_dcmpeq>
 8007ac4:	b9d8      	cbnz	r0, 8007afe <_printf_float+0x432>
 8007ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac8:	f108 0201 	add.w	r2, r8, #1
 8007acc:	3b01      	subs	r3, #1
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d10e      	bne.n	8007af6 <_printf_float+0x42a>
 8007ad8:	e659      	b.n	800778e <_printf_float+0xc2>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f ae52 	beq.w	800778e <_printf_float+0xc2>
 8007aea:	f108 0801 	add.w	r8, r8, #1
 8007aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af0:	3b01      	subs	r3, #1
 8007af2:	4543      	cmp	r3, r8
 8007af4:	dcf1      	bgt.n	8007ada <_printf_float+0x40e>
 8007af6:	464b      	mov	r3, r9
 8007af8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007afc:	e6dc      	b.n	80078b8 <_printf_float+0x1ec>
 8007afe:	f04f 0800 	mov.w	r8, #0
 8007b02:	f104 0a1a 	add.w	sl, r4, #26
 8007b06:	e7f2      	b.n	8007aee <_printf_float+0x422>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	e7df      	b.n	8007ace <_printf_float+0x402>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	464a      	mov	r2, r9
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae38 	beq.w	800778e <_printf_float+0xc2>
 8007b1e:	f108 0801 	add.w	r8, r8, #1
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b26:	1a5b      	subs	r3, r3, r1
 8007b28:	4543      	cmp	r3, r8
 8007b2a:	dcf0      	bgt.n	8007b0e <_printf_float+0x442>
 8007b2c:	e6fa      	b.n	8007924 <_printf_float+0x258>
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	f104 0919 	add.w	r9, r4, #25
 8007b36:	e7f4      	b.n	8007b22 <_printf_float+0x456>

08007b38 <_printf_common>:
 8007b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	4699      	mov	r9, r3
 8007b40:	688a      	ldr	r2, [r1, #8]
 8007b42:	690b      	ldr	r3, [r1, #16]
 8007b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bfb8      	it	lt
 8007b4c:	4613      	movlt	r3, r2
 8007b4e:	6033      	str	r3, [r6, #0]
 8007b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b54:	4607      	mov	r7, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b10a      	cbz	r2, 8007b5e <_printf_common+0x26>
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	0699      	lsls	r1, r3, #26
 8007b62:	bf42      	ittt	mi
 8007b64:	6833      	ldrmi	r3, [r6, #0]
 8007b66:	3302      	addmi	r3, #2
 8007b68:	6033      	strmi	r3, [r6, #0]
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	f015 0506 	ands.w	r5, r5, #6
 8007b70:	d106      	bne.n	8007b80 <_printf_common+0x48>
 8007b72:	f104 0a19 	add.w	sl, r4, #25
 8007b76:	68e3      	ldr	r3, [r4, #12]
 8007b78:	6832      	ldr	r2, [r6, #0]
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	42ab      	cmp	r3, r5
 8007b7e:	dc26      	bgt.n	8007bce <_printf_common+0x96>
 8007b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b84:	1e13      	subs	r3, r2, #0
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	bf18      	it	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	0692      	lsls	r2, r2, #26
 8007b8e:	d42b      	bmi.n	8007be8 <_printf_common+0xb0>
 8007b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b94:	4649      	mov	r1, r9
 8007b96:	4638      	mov	r0, r7
 8007b98:	47c0      	blx	r8
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d01e      	beq.n	8007bdc <_printf_common+0xa4>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	68e5      	ldr	r5, [r4, #12]
 8007ba2:	6832      	ldr	r2, [r6, #0]
 8007ba4:	f003 0306 	and.w	r3, r3, #6
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	bf08      	it	eq
 8007bac:	1aad      	subeq	r5, r5, r2
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	bf0c      	ite	eq
 8007bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb8:	2500      	movne	r5, #0
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bfc4      	itt	gt
 8007bbe:	1a9b      	subgt	r3, r3, r2
 8007bc0:	18ed      	addgt	r5, r5, r3
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	341a      	adds	r4, #26
 8007bc6:	42b5      	cmp	r5, r6
 8007bc8:	d11a      	bne.n	8007c00 <_printf_common+0xc8>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e008      	b.n	8007be0 <_printf_common+0xa8>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	47c0      	blx	r8
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d103      	bne.n	8007be4 <_printf_common+0xac>
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be4:	3501      	adds	r5, #1
 8007be6:	e7c6      	b.n	8007b76 <_printf_common+0x3e>
 8007be8:	18e1      	adds	r1, r4, r3
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	2030      	movs	r0, #48	; 0x30
 8007bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bf2:	4422      	add	r2, r4
 8007bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	e7c7      	b.n	8007b90 <_printf_common+0x58>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4622      	mov	r2, r4
 8007c04:	4649      	mov	r1, r9
 8007c06:	4638      	mov	r0, r7
 8007c08:	47c0      	blx	r8
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d0e6      	beq.n	8007bdc <_printf_common+0xa4>
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7d9      	b.n	8007bc6 <_printf_common+0x8e>
	...

08007c14 <_printf_i>:
 8007c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	460c      	mov	r4, r1
 8007c1a:	4691      	mov	r9, r2
 8007c1c:	7e27      	ldrb	r7, [r4, #24]
 8007c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c20:	2f78      	cmp	r7, #120	; 0x78
 8007c22:	4680      	mov	r8, r0
 8007c24:	469a      	mov	sl, r3
 8007c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c2a:	d807      	bhi.n	8007c3c <_printf_i+0x28>
 8007c2c:	2f62      	cmp	r7, #98	; 0x62
 8007c2e:	d80a      	bhi.n	8007c46 <_printf_i+0x32>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	f000 80d8 	beq.w	8007de6 <_printf_i+0x1d2>
 8007c36:	2f58      	cmp	r7, #88	; 0x58
 8007c38:	f000 80a3 	beq.w	8007d82 <_printf_i+0x16e>
 8007c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c44:	e03a      	b.n	8007cbc <_printf_i+0xa8>
 8007c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c4a:	2b15      	cmp	r3, #21
 8007c4c:	d8f6      	bhi.n	8007c3c <_printf_i+0x28>
 8007c4e:	a001      	add	r0, pc, #4	; (adr r0, 8007c54 <_printf_i+0x40>)
 8007c50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cc1 	.word	0x08007cc1
 8007c5c:	08007c3d 	.word	0x08007c3d
 8007c60:	08007c3d 	.word	0x08007c3d
 8007c64:	08007c3d 	.word	0x08007c3d
 8007c68:	08007c3d 	.word	0x08007c3d
 8007c6c:	08007cc1 	.word	0x08007cc1
 8007c70:	08007c3d 	.word	0x08007c3d
 8007c74:	08007c3d 	.word	0x08007c3d
 8007c78:	08007c3d 	.word	0x08007c3d
 8007c7c:	08007c3d 	.word	0x08007c3d
 8007c80:	08007dcd 	.word	0x08007dcd
 8007c84:	08007cf1 	.word	0x08007cf1
 8007c88:	08007daf 	.word	0x08007daf
 8007c8c:	08007c3d 	.word	0x08007c3d
 8007c90:	08007c3d 	.word	0x08007c3d
 8007c94:	08007def 	.word	0x08007def
 8007c98:	08007c3d 	.word	0x08007c3d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c3d 	.word	0x08007c3d
 8007ca4:	08007c3d 	.word	0x08007c3d
 8007ca8:	08007db7 	.word	0x08007db7
 8007cac:	680b      	ldr	r3, [r1, #0]
 8007cae:	1d1a      	adds	r2, r3, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	600a      	str	r2, [r1, #0]
 8007cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0a3      	b.n	8007e08 <_printf_i+0x1f4>
 8007cc0:	6825      	ldr	r5, [r4, #0]
 8007cc2:	6808      	ldr	r0, [r1, #0]
 8007cc4:	062e      	lsls	r6, r5, #24
 8007cc6:	f100 0304 	add.w	r3, r0, #4
 8007cca:	d50a      	bpl.n	8007ce2 <_printf_i+0xce>
 8007ccc:	6805      	ldr	r5, [r0, #0]
 8007cce:	600b      	str	r3, [r1, #0]
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	da03      	bge.n	8007cdc <_printf_i+0xc8>
 8007cd4:	232d      	movs	r3, #45	; 0x2d
 8007cd6:	426d      	negs	r5, r5
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cdc:	485e      	ldr	r0, [pc, #376]	; (8007e58 <_printf_i+0x244>)
 8007cde:	230a      	movs	r3, #10
 8007ce0:	e019      	b.n	8007d16 <_printf_i+0x102>
 8007ce2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ce6:	6805      	ldr	r5, [r0, #0]
 8007ce8:	600b      	str	r3, [r1, #0]
 8007cea:	bf18      	it	ne
 8007cec:	b22d      	sxthne	r5, r5
 8007cee:	e7ef      	b.n	8007cd0 <_printf_i+0xbc>
 8007cf0:	680b      	ldr	r3, [r1, #0]
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	1d18      	adds	r0, r3, #4
 8007cf6:	6008      	str	r0, [r1, #0]
 8007cf8:	0628      	lsls	r0, r5, #24
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0xec>
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0xf2>
 8007d00:	0669      	lsls	r1, r5, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0xe8>
 8007d04:	881d      	ldrh	r5, [r3, #0]
 8007d06:	4854      	ldr	r0, [pc, #336]	; (8007e58 <_printf_i+0x244>)
 8007d08:	2f6f      	cmp	r7, #111	; 0x6f
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2308      	moveq	r3, #8
 8007d0e:	230a      	movne	r3, #10
 8007d10:	2100      	movs	r1, #0
 8007d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d16:	6866      	ldr	r6, [r4, #4]
 8007d18:	60a6      	str	r6, [r4, #8]
 8007d1a:	2e00      	cmp	r6, #0
 8007d1c:	bfa2      	ittt	ge
 8007d1e:	6821      	ldrge	r1, [r4, #0]
 8007d20:	f021 0104 	bicge.w	r1, r1, #4
 8007d24:	6021      	strge	r1, [r4, #0]
 8007d26:	b90d      	cbnz	r5, 8007d2c <_printf_i+0x118>
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	d04d      	beq.n	8007dc8 <_printf_i+0x1b4>
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d32:	fb03 5711 	mls	r7, r3, r1, r5
 8007d36:	5dc7      	ldrb	r7, [r0, r7]
 8007d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d3c:	462f      	mov	r7, r5
 8007d3e:	42bb      	cmp	r3, r7
 8007d40:	460d      	mov	r5, r1
 8007d42:	d9f4      	bls.n	8007d2e <_printf_i+0x11a>
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d10b      	bne.n	8007d60 <_printf_i+0x14c>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	07df      	lsls	r7, r3, #31
 8007d4c:	d508      	bpl.n	8007d60 <_printf_i+0x14c>
 8007d4e:	6923      	ldr	r3, [r4, #16]
 8007d50:	6861      	ldr	r1, [r4, #4]
 8007d52:	4299      	cmp	r1, r3
 8007d54:	bfde      	ittt	le
 8007d56:	2330      	movle	r3, #48	; 0x30
 8007d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d60:	1b92      	subs	r2, r2, r6
 8007d62:	6122      	str	r2, [r4, #16]
 8007d64:	f8cd a000 	str.w	sl, [sp]
 8007d68:	464b      	mov	r3, r9
 8007d6a:	aa03      	add	r2, sp, #12
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4640      	mov	r0, r8
 8007d70:	f7ff fee2 	bl	8007b38 <_printf_common>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d14c      	bne.n	8007e12 <_printf_i+0x1fe>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	b004      	add	sp, #16
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	4835      	ldr	r0, [pc, #212]	; (8007e58 <_printf_i+0x244>)
 8007d84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	680e      	ldr	r6, [r1, #0]
 8007d8c:	061f      	lsls	r7, r3, #24
 8007d8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d92:	600e      	str	r6, [r1, #0]
 8007d94:	d514      	bpl.n	8007dc0 <_printf_i+0x1ac>
 8007d96:	07d9      	lsls	r1, r3, #31
 8007d98:	bf44      	itt	mi
 8007d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d9e:	6023      	strmi	r3, [r4, #0]
 8007da0:	b91d      	cbnz	r5, 8007daa <_printf_i+0x196>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	f023 0320 	bic.w	r3, r3, #32
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2310      	movs	r3, #16
 8007dac:	e7b0      	b.n	8007d10 <_printf_i+0xfc>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	f043 0320 	orr.w	r3, r3, #32
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	2378      	movs	r3, #120	; 0x78
 8007db8:	4828      	ldr	r0, [pc, #160]	; (8007e5c <_printf_i+0x248>)
 8007dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dbe:	e7e3      	b.n	8007d88 <_printf_i+0x174>
 8007dc0:	065e      	lsls	r6, r3, #25
 8007dc2:	bf48      	it	mi
 8007dc4:	b2ad      	uxthmi	r5, r5
 8007dc6:	e7e6      	b.n	8007d96 <_printf_i+0x182>
 8007dc8:	4616      	mov	r6, r2
 8007dca:	e7bb      	b.n	8007d44 <_printf_i+0x130>
 8007dcc:	680b      	ldr	r3, [r1, #0]
 8007dce:	6826      	ldr	r6, [r4, #0]
 8007dd0:	6960      	ldr	r0, [r4, #20]
 8007dd2:	1d1d      	adds	r5, r3, #4
 8007dd4:	600d      	str	r5, [r1, #0]
 8007dd6:	0635      	lsls	r5, r6, #24
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0x1cc>
 8007ddc:	6018      	str	r0, [r3, #0]
 8007dde:	e002      	b.n	8007de6 <_printf_i+0x1d2>
 8007de0:	0671      	lsls	r1, r6, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0x1c8>
 8007de4:	8018      	strh	r0, [r3, #0]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	4616      	mov	r6, r2
 8007dec:	e7ba      	b.n	8007d64 <_printf_i+0x150>
 8007dee:	680b      	ldr	r3, [r1, #0]
 8007df0:	1d1a      	adds	r2, r3, #4
 8007df2:	600a      	str	r2, [r1, #0]
 8007df4:	681e      	ldr	r6, [r3, #0]
 8007df6:	6862      	ldr	r2, [r4, #4]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7f8 fa18 	bl	8000230 <memchr>
 8007e00:	b108      	cbz	r0, 8007e06 <_printf_i+0x1f2>
 8007e02:	1b80      	subs	r0, r0, r6
 8007e04:	6060      	str	r0, [r4, #4]
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e10:	e7a8      	b.n	8007d64 <_printf_i+0x150>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	4632      	mov	r2, r6
 8007e16:	4649      	mov	r1, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	47d0      	blx	sl
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d0ab      	beq.n	8007d78 <_printf_i+0x164>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	079b      	lsls	r3, r3, #30
 8007e24:	d413      	bmi.n	8007e4e <_printf_i+0x23a>
 8007e26:	68e0      	ldr	r0, [r4, #12]
 8007e28:	9b03      	ldr	r3, [sp, #12]
 8007e2a:	4298      	cmp	r0, r3
 8007e2c:	bfb8      	it	lt
 8007e2e:	4618      	movlt	r0, r3
 8007e30:	e7a4      	b.n	8007d7c <_printf_i+0x168>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4632      	mov	r2, r6
 8007e36:	4649      	mov	r1, r9
 8007e38:	4640      	mov	r0, r8
 8007e3a:	47d0      	blx	sl
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d09b      	beq.n	8007d78 <_printf_i+0x164>
 8007e40:	3501      	adds	r5, #1
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	1a5b      	subs	r3, r3, r1
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dcf2      	bgt.n	8007e32 <_printf_i+0x21e>
 8007e4c:	e7eb      	b.n	8007e26 <_printf_i+0x212>
 8007e4e:	2500      	movs	r5, #0
 8007e50:	f104 0619 	add.w	r6, r4, #25
 8007e54:	e7f5      	b.n	8007e42 <_printf_i+0x22e>
 8007e56:	bf00      	nop
 8007e58:	08009f9e 	.word	0x08009f9e
 8007e5c:	08009faf 	.word	0x08009faf

08007e60 <quorem>:
 8007e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	6903      	ldr	r3, [r0, #16]
 8007e66:	690c      	ldr	r4, [r1, #16]
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	f2c0 8081 	blt.w	8007f72 <quorem+0x112>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	f101 0814 	add.w	r8, r1, #20
 8007e76:	f100 0514 	add.w	r5, r0, #20
 8007e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e98:	d331      	bcc.n	8007efe <quorem+0x9e>
 8007e9a:	f04f 0e00 	mov.w	lr, #0
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	46ac      	mov	ip, r5
 8007ea2:	46f2      	mov	sl, lr
 8007ea4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea8:	b293      	uxth	r3, r2
 8007eaa:	fb06 e303 	mla	r3, r6, r3, lr
 8007eae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb8:	0c12      	lsrs	r2, r2, #16
 8007eba:	f8dc a000 	ldr.w	sl, [ip]
 8007ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8007ec2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eca:	fa1f fa82 	uxth.w	sl, r2
 8007ece:	f8dc 2000 	ldr.w	r2, [ip]
 8007ed2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ed6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee0:	4581      	cmp	r9, r0
 8007ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eea:	d2db      	bcs.n	8007ea4 <quorem+0x44>
 8007eec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ef0:	b92b      	cbnz	r3, 8007efe <quorem+0x9e>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	d32e      	bcc.n	8007f5a <quorem+0xfa>
 8007efc:	613c      	str	r4, [r7, #16]
 8007efe:	4638      	mov	r0, r7
 8007f00:	f001 f8be 	bl	8009080 <__mcmp>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	db24      	blt.n	8007f52 <quorem+0xf2>
 8007f08:	3601      	adds	r6, #1
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f04f 0c00 	mov.w	ip, #0
 8007f10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f14:	f8d0 e000 	ldr.w	lr, [r0]
 8007f18:	b293      	uxth	r3, r2
 8007f1a:	ebac 0303 	sub.w	r3, ip, r3
 8007f1e:	0c12      	lsrs	r2, r2, #16
 8007f20:	fa13 f38e 	uxtah	r3, r3, lr
 8007f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f32:	45c1      	cmp	r9, r8
 8007f34:	f840 3b04 	str.w	r3, [r0], #4
 8007f38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f3c:	d2e8      	bcs.n	8007f10 <quorem+0xb0>
 8007f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f46:	b922      	cbnz	r2, 8007f52 <quorem+0xf2>
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	d30a      	bcc.n	8007f66 <quorem+0x106>
 8007f50:	613c      	str	r4, [r7, #16]
 8007f52:	4630      	mov	r0, r6
 8007f54:	b003      	add	sp, #12
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d1cc      	bne.n	8007efc <quorem+0x9c>
 8007f62:	3c01      	subs	r4, #1
 8007f64:	e7c7      	b.n	8007ef6 <quorem+0x96>
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1f0      	bne.n	8007f50 <quorem+0xf0>
 8007f6e:	3c01      	subs	r4, #1
 8007f70:	e7eb      	b.n	8007f4a <quorem+0xea>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7ee      	b.n	8007f54 <quorem+0xf4>
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b02 	vpush	{d8}
 8007f80:	ec57 6b10 	vmov	r6, r7, d0
 8007f84:	b095      	sub	sp, #84	; 0x54
 8007f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f8c:	9105      	str	r1, [sp, #20]
 8007f8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f92:	4604      	mov	r4, r0
 8007f94:	9209      	str	r2, [sp, #36]	; 0x24
 8007f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f98:	b975      	cbnz	r5, 8007fb8 <_dtoa_r+0x40>
 8007f9a:	2010      	movs	r0, #16
 8007f9c:	f000 fddc 	bl	8008b58 <malloc>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa4:	b920      	cbnz	r0, 8007fb0 <_dtoa_r+0x38>
 8007fa6:	4bb2      	ldr	r3, [pc, #712]	; (8008270 <_dtoa_r+0x2f8>)
 8007fa8:	21ea      	movs	r1, #234	; 0xea
 8007faa:	48b2      	ldr	r0, [pc, #712]	; (8008274 <_dtoa_r+0x2fc>)
 8007fac:	f001 fa32 	bl	8009414 <__assert_func>
 8007fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb4:	6005      	str	r5, [r0, #0]
 8007fb6:	60c5      	str	r5, [r0, #12]
 8007fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	b151      	cbz	r1, 8007fd4 <_dtoa_r+0x5c>
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	604a      	str	r2, [r1, #4]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4093      	lsls	r3, r2
 8007fc6:	608b      	str	r3, [r1, #8]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fe1b 	bl	8008c04 <_Bfree>
 8007fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	1e3b      	subs	r3, r7, #0
 8007fd6:	bfb9      	ittee	lt
 8007fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	9303      	strlt	r3, [sp, #12]
 8007fde:	2300      	movge	r3, #0
 8007fe0:	f8c8 3000 	strge.w	r3, [r8]
 8007fe4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007fe8:	4ba3      	ldr	r3, [pc, #652]	; (8008278 <_dtoa_r+0x300>)
 8007fea:	bfbc      	itt	lt
 8007fec:	2201      	movlt	r2, #1
 8007fee:	f8c8 2000 	strlt.w	r2, [r8]
 8007ff2:	ea33 0309 	bics.w	r3, r3, r9
 8007ff6:	d11b      	bne.n	8008030 <_dtoa_r+0xb8>
 8007ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008004:	4333      	orrs	r3, r6
 8008006:	f000 857a 	beq.w	8008afe <_dtoa_r+0xb86>
 800800a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800c:	b963      	cbnz	r3, 8008028 <_dtoa_r+0xb0>
 800800e:	4b9b      	ldr	r3, [pc, #620]	; (800827c <_dtoa_r+0x304>)
 8008010:	e024      	b.n	800805c <_dtoa_r+0xe4>
 8008012:	4b9b      	ldr	r3, [pc, #620]	; (8008280 <_dtoa_r+0x308>)
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	9800      	ldr	r0, [sp, #0]
 800801e:	b015      	add	sp, #84	; 0x54
 8008020:	ecbd 8b02 	vpop	{d8}
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	4b94      	ldr	r3, [pc, #592]	; (800827c <_dtoa_r+0x304>)
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	3303      	adds	r3, #3
 800802e:	e7f3      	b.n	8008018 <_dtoa_r+0xa0>
 8008030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	ec51 0b17 	vmov	r0, r1, d7
 800803a:	2300      	movs	r3, #0
 800803c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008040:	f7f8 fd6a 	bl	8000b18 <__aeabi_dcmpeq>
 8008044:	4680      	mov	r8, r0
 8008046:	b158      	cbz	r0, 8008060 <_dtoa_r+0xe8>
 8008048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800804a:	2301      	movs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8551 	beq.w	8008af8 <_dtoa_r+0xb80>
 8008056:	488b      	ldr	r0, [pc, #556]	; (8008284 <_dtoa_r+0x30c>)
 8008058:	6018      	str	r0, [r3, #0]
 800805a:	1e43      	subs	r3, r0, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	e7dd      	b.n	800801c <_dtoa_r+0xa4>
 8008060:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008064:	aa12      	add	r2, sp, #72	; 0x48
 8008066:	a913      	add	r1, sp, #76	; 0x4c
 8008068:	4620      	mov	r0, r4
 800806a:	f001 f8ad 	bl	80091c8 <__d2b>
 800806e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008072:	4683      	mov	fp, r0
 8008074:	2d00      	cmp	r5, #0
 8008076:	d07c      	beq.n	8008172 <_dtoa_r+0x1fa>
 8008078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800807e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008082:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008086:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800808a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800808e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008092:	4b7d      	ldr	r3, [pc, #500]	; (8008288 <_dtoa_r+0x310>)
 8008094:	2200      	movs	r2, #0
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 f91d 	bl	80002d8 <__aeabi_dsub>
 800809e:	a36e      	add	r3, pc, #440	; (adr r3, 8008258 <_dtoa_r+0x2e0>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 fad0 	bl	8000648 <__aeabi_dmul>
 80080a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008260 <_dtoa_r+0x2e8>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f915 	bl	80002dc <__adddf3>
 80080b2:	4606      	mov	r6, r0
 80080b4:	4628      	mov	r0, r5
 80080b6:	460f      	mov	r7, r1
 80080b8:	f7f8 fa5c 	bl	8000574 <__aeabi_i2d>
 80080bc:	a36a      	add	r3, pc, #424	; (adr r3, 8008268 <_dtoa_r+0x2f0>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f7f8 fac1 	bl	8000648 <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 f905 	bl	80002dc <__adddf3>
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	f7f8 fd67 	bl	8000ba8 <__aeabi_d2iz>
 80080da:	2200      	movs	r2, #0
 80080dc:	4682      	mov	sl, r0
 80080de:	2300      	movs	r3, #0
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fd22 	bl	8000b2c <__aeabi_dcmplt>
 80080e8:	b148      	cbz	r0, 80080fe <_dtoa_r+0x186>
 80080ea:	4650      	mov	r0, sl
 80080ec:	f7f8 fa42 	bl	8000574 <__aeabi_i2d>
 80080f0:	4632      	mov	r2, r6
 80080f2:	463b      	mov	r3, r7
 80080f4:	f7f8 fd10 	bl	8000b18 <__aeabi_dcmpeq>
 80080f8:	b908      	cbnz	r0, 80080fe <_dtoa_r+0x186>
 80080fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fe:	f1ba 0f16 	cmp.w	sl, #22
 8008102:	d854      	bhi.n	80081ae <_dtoa_r+0x236>
 8008104:	4b61      	ldr	r3, [pc, #388]	; (800828c <_dtoa_r+0x314>)
 8008106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008112:	f7f8 fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d04b      	beq.n	80081b2 <_dtoa_r+0x23a>
 800811a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800811e:	2300      	movs	r3, #0
 8008120:	930e      	str	r3, [sp, #56]	; 0x38
 8008122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008124:	1b5d      	subs	r5, r3, r5
 8008126:	1e6b      	subs	r3, r5, #1
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	bf43      	ittte	mi
 800812c:	2300      	movmi	r3, #0
 800812e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008132:	9304      	strmi	r3, [sp, #16]
 8008134:	f04f 0800 	movpl.w	r8, #0
 8008138:	f1ba 0f00 	cmp.w	sl, #0
 800813c:	db3b      	blt.n	80081b6 <_dtoa_r+0x23e>
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008144:	4453      	add	r3, sl
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	2300      	movs	r3, #0
 800814a:	9306      	str	r3, [sp, #24]
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	2b09      	cmp	r3, #9
 8008150:	d869      	bhi.n	8008226 <_dtoa_r+0x2ae>
 8008152:	2b05      	cmp	r3, #5
 8008154:	bfc4      	itt	gt
 8008156:	3b04      	subgt	r3, #4
 8008158:	9305      	strgt	r3, [sp, #20]
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	f1a3 0302 	sub.w	r3, r3, #2
 8008160:	bfcc      	ite	gt
 8008162:	2500      	movgt	r5, #0
 8008164:	2501      	movle	r5, #1
 8008166:	2b03      	cmp	r3, #3
 8008168:	d869      	bhi.n	800823e <_dtoa_r+0x2c6>
 800816a:	e8df f003 	tbb	[pc, r3]
 800816e:	4e2c      	.short	0x4e2c
 8008170:	5a4c      	.short	0x5a4c
 8008172:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008176:	441d      	add	r5, r3
 8008178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800817c:	2b20      	cmp	r3, #32
 800817e:	bfc1      	itttt	gt
 8008180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008184:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008188:	fa09 f303 	lslgt.w	r3, r9, r3
 800818c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008190:	bfda      	itte	le
 8008192:	f1c3 0320 	rsble	r3, r3, #32
 8008196:	fa06 f003 	lslle.w	r0, r6, r3
 800819a:	4318      	orrgt	r0, r3
 800819c:	f7f8 f9da 	bl	8000554 <__aeabi_ui2d>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4606      	mov	r6, r0
 80081a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081a8:	3d01      	subs	r5, #1
 80081aa:	9310      	str	r3, [sp, #64]	; 0x40
 80081ac:	e771      	b.n	8008092 <_dtoa_r+0x11a>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e7b6      	b.n	8008120 <_dtoa_r+0x1a8>
 80081b2:	900e      	str	r0, [sp, #56]	; 0x38
 80081b4:	e7b5      	b.n	8008122 <_dtoa_r+0x1aa>
 80081b6:	f1ca 0300 	rsb	r3, sl, #0
 80081ba:	9306      	str	r3, [sp, #24]
 80081bc:	2300      	movs	r3, #0
 80081be:	eba8 080a 	sub.w	r8, r8, sl
 80081c2:	930d      	str	r3, [sp, #52]	; 0x34
 80081c4:	e7c2      	b.n	800814c <_dtoa_r+0x1d4>
 80081c6:	2300      	movs	r3, #0
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc39      	bgt.n	8008244 <_dtoa_r+0x2cc>
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081d8:	464b      	mov	r3, r9
 80081da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081e0:	2200      	movs	r2, #0
 80081e2:	6042      	str	r2, [r0, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	f102 0614 	add.w	r6, r2, #20
 80081ea:	429e      	cmp	r6, r3
 80081ec:	6841      	ldr	r1, [r0, #4]
 80081ee:	d92f      	bls.n	8008250 <_dtoa_r+0x2d8>
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fcc7 	bl	8008b84 <_Balloc>
 80081f6:	9000      	str	r0, [sp, #0]
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d14b      	bne.n	8008294 <_dtoa_r+0x31c>
 80081fc:	4b24      	ldr	r3, [pc, #144]	; (8008290 <_dtoa_r+0x318>)
 80081fe:	4602      	mov	r2, r0
 8008200:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008204:	e6d1      	b.n	8007faa <_dtoa_r+0x32>
 8008206:	2301      	movs	r3, #1
 8008208:	e7de      	b.n	80081c8 <_dtoa_r+0x250>
 800820a:	2300      	movs	r3, #0
 800820c:	9308      	str	r3, [sp, #32]
 800820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008210:	eb0a 0903 	add.w	r9, sl, r3
 8008214:	f109 0301 	add.w	r3, r9, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	bfb8      	it	lt
 800821e:	2301      	movlt	r3, #1
 8008220:	e7dd      	b.n	80081de <_dtoa_r+0x266>
 8008222:	2301      	movs	r3, #1
 8008224:	e7f2      	b.n	800820c <_dtoa_r+0x294>
 8008226:	2501      	movs	r5, #1
 8008228:	2300      	movs	r3, #0
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	9508      	str	r5, [sp, #32]
 800822e:	f04f 39ff 	mov.w	r9, #4294967295
 8008232:	2200      	movs	r2, #0
 8008234:	f8cd 9004 	str.w	r9, [sp, #4]
 8008238:	2312      	movs	r3, #18
 800823a:	9209      	str	r2, [sp, #36]	; 0x24
 800823c:	e7cf      	b.n	80081de <_dtoa_r+0x266>
 800823e:	2301      	movs	r3, #1
 8008240:	9308      	str	r3, [sp, #32]
 8008242:	e7f4      	b.n	800822e <_dtoa_r+0x2b6>
 8008244:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008248:	f8cd 9004 	str.w	r9, [sp, #4]
 800824c:	464b      	mov	r3, r9
 800824e:	e7c6      	b.n	80081de <_dtoa_r+0x266>
 8008250:	3101      	adds	r1, #1
 8008252:	6041      	str	r1, [r0, #4]
 8008254:	0052      	lsls	r2, r2, #1
 8008256:	e7c6      	b.n	80081e6 <_dtoa_r+0x26e>
 8008258:	636f4361 	.word	0x636f4361
 800825c:	3fd287a7 	.word	0x3fd287a7
 8008260:	8b60c8b3 	.word	0x8b60c8b3
 8008264:	3fc68a28 	.word	0x3fc68a28
 8008268:	509f79fb 	.word	0x509f79fb
 800826c:	3fd34413 	.word	0x3fd34413
 8008270:	08009fcd 	.word	0x08009fcd
 8008274:	08009fe4 	.word	0x08009fe4
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	08009fc9 	.word	0x08009fc9
 8008280:	08009fc0 	.word	0x08009fc0
 8008284:	08009f9d 	.word	0x08009f9d
 8008288:	3ff80000 	.word	0x3ff80000
 800828c:	0800a0e0 	.word	0x0800a0e0
 8008290:	0800a043 	.word	0x0800a043
 8008294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008296:	9a00      	ldr	r2, [sp, #0]
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	2b0e      	cmp	r3, #14
 800829e:	f200 80ad 	bhi.w	80083fc <_dtoa_r+0x484>
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	f000 80aa 	beq.w	80083fc <_dtoa_r+0x484>
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	dd36      	ble.n	800831c <_dtoa_r+0x3a4>
 80082ae:	4ac3      	ldr	r2, [pc, #780]	; (80085bc <_dtoa_r+0x644>)
 80082b0:	f00a 030f 	and.w	r3, sl, #15
 80082b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082b8:	ed93 7b00 	vldr	d7, [r3]
 80082bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082c4:	eeb0 8a47 	vmov.f32	s16, s14
 80082c8:	eef0 8a67 	vmov.f32	s17, s15
 80082cc:	d016      	beq.n	80082fc <_dtoa_r+0x384>
 80082ce:	4bbc      	ldr	r3, [pc, #752]	; (80085c0 <_dtoa_r+0x648>)
 80082d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d8:	f7f8 fae0 	bl	800089c <__aeabi_ddiv>
 80082dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e0:	f007 070f 	and.w	r7, r7, #15
 80082e4:	2503      	movs	r5, #3
 80082e6:	4eb6      	ldr	r6, [pc, #728]	; (80085c0 <_dtoa_r+0x648>)
 80082e8:	b957      	cbnz	r7, 8008300 <_dtoa_r+0x388>
 80082ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ee:	ec53 2b18 	vmov	r2, r3, d8
 80082f2:	f7f8 fad3 	bl	800089c <__aeabi_ddiv>
 80082f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082fa:	e029      	b.n	8008350 <_dtoa_r+0x3d8>
 80082fc:	2502      	movs	r5, #2
 80082fe:	e7f2      	b.n	80082e6 <_dtoa_r+0x36e>
 8008300:	07f9      	lsls	r1, r7, #31
 8008302:	d508      	bpl.n	8008316 <_dtoa_r+0x39e>
 8008304:	ec51 0b18 	vmov	r0, r1, d8
 8008308:	e9d6 2300 	ldrd	r2, r3, [r6]
 800830c:	f7f8 f99c 	bl	8000648 <__aeabi_dmul>
 8008310:	ec41 0b18 	vmov	d8, r0, r1
 8008314:	3501      	adds	r5, #1
 8008316:	107f      	asrs	r7, r7, #1
 8008318:	3608      	adds	r6, #8
 800831a:	e7e5      	b.n	80082e8 <_dtoa_r+0x370>
 800831c:	f000 80a6 	beq.w	800846c <_dtoa_r+0x4f4>
 8008320:	f1ca 0600 	rsb	r6, sl, #0
 8008324:	4ba5      	ldr	r3, [pc, #660]	; (80085bc <_dtoa_r+0x644>)
 8008326:	4fa6      	ldr	r7, [pc, #664]	; (80085c0 <_dtoa_r+0x648>)
 8008328:	f006 020f 	and.w	r2, r6, #15
 800832c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008338:	f7f8 f986 	bl	8000648 <__aeabi_dmul>
 800833c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008340:	1136      	asrs	r6, r6, #4
 8008342:	2300      	movs	r3, #0
 8008344:	2502      	movs	r5, #2
 8008346:	2e00      	cmp	r6, #0
 8008348:	f040 8085 	bne.w	8008456 <_dtoa_r+0x4de>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1d2      	bne.n	80082f6 <_dtoa_r+0x37e>
 8008350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 808c 	beq.w	8008470 <_dtoa_r+0x4f8>
 8008358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800835c:	4b99      	ldr	r3, [pc, #612]	; (80085c4 <_dtoa_r+0x64c>)
 800835e:	2200      	movs	r2, #0
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 fbe2 	bl	8000b2c <__aeabi_dcmplt>
 8008368:	2800      	cmp	r0, #0
 800836a:	f000 8081 	beq.w	8008470 <_dtoa_r+0x4f8>
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d07d      	beq.n	8008470 <_dtoa_r+0x4f8>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	dd3c      	ble.n	80083f4 <_dtoa_r+0x47c>
 800837a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	2200      	movs	r2, #0
 8008382:	4b91      	ldr	r3, [pc, #580]	; (80085c8 <_dtoa_r+0x650>)
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f95e 	bl	8000648 <__aeabi_dmul>
 800838c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008390:	3501      	adds	r5, #1
 8008392:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008396:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800839a:	4628      	mov	r0, r5
 800839c:	f7f8 f8ea 	bl	8000574 <__aeabi_i2d>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f8 f950 	bl	8000648 <__aeabi_dmul>
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <_dtoa_r+0x654>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	f7f7 ff96 	bl	80002dc <__adddf3>
 80083b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d15c      	bne.n	800847a <_dtoa_r+0x502>
 80083c0:	4b83      	ldr	r3, [pc, #524]	; (80085d0 <_dtoa_r+0x658>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f7 ff86 	bl	80002d8 <__aeabi_dsub>
 80083cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d0:	4606      	mov	r6, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	f7f8 fbc8 	bl	8000b68 <__aeabi_dcmpgt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f040 8296 	bne.w	800890a <_dtoa_r+0x992>
 80083de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083e2:	4630      	mov	r0, r6
 80083e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083e8:	4639      	mov	r1, r7
 80083ea:	f7f8 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f040 8288 	bne.w	8008904 <_dtoa_r+0x98c>
 80083f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f2c0 8158 	blt.w	80086b4 <_dtoa_r+0x73c>
 8008404:	f1ba 0f0e 	cmp.w	sl, #14
 8008408:	f300 8154 	bgt.w	80086b4 <_dtoa_r+0x73c>
 800840c:	4b6b      	ldr	r3, [pc, #428]	; (80085bc <_dtoa_r+0x644>)
 800840e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008412:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	f280 80e3 	bge.w	80085e4 <_dtoa_r+0x66c>
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f300 80df 	bgt.w	80085e4 <_dtoa_r+0x66c>
 8008426:	f040 826d 	bne.w	8008904 <_dtoa_r+0x98c>
 800842a:	4b69      	ldr	r3, [pc, #420]	; (80085d0 <_dtoa_r+0x658>)
 800842c:	2200      	movs	r2, #0
 800842e:	4640      	mov	r0, r8
 8008430:	4649      	mov	r1, r9
 8008432:	f7f8 f909 	bl	8000648 <__aeabi_dmul>
 8008436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800843a:	f7f8 fb8b 	bl	8000b54 <__aeabi_dcmpge>
 800843e:	9e01      	ldr	r6, [sp, #4]
 8008440:	4637      	mov	r7, r6
 8008442:	2800      	cmp	r0, #0
 8008444:	f040 8243 	bne.w	80088ce <_dtoa_r+0x956>
 8008448:	9d00      	ldr	r5, [sp, #0]
 800844a:	2331      	movs	r3, #49	; 0x31
 800844c:	f805 3b01 	strb.w	r3, [r5], #1
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	e23f      	b.n	80088d6 <_dtoa_r+0x95e>
 8008456:	07f2      	lsls	r2, r6, #31
 8008458:	d505      	bpl.n	8008466 <_dtoa_r+0x4ee>
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	f7f8 f8f3 	bl	8000648 <__aeabi_dmul>
 8008462:	3501      	adds	r5, #1
 8008464:	2301      	movs	r3, #1
 8008466:	1076      	asrs	r6, r6, #1
 8008468:	3708      	adds	r7, #8
 800846a:	e76c      	b.n	8008346 <_dtoa_r+0x3ce>
 800846c:	2502      	movs	r5, #2
 800846e:	e76f      	b.n	8008350 <_dtoa_r+0x3d8>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	f8cd a01c 	str.w	sl, [sp, #28]
 8008476:	930c      	str	r3, [sp, #48]	; 0x30
 8008478:	e78d      	b.n	8008396 <_dtoa_r+0x41e>
 800847a:	9900      	ldr	r1, [sp, #0]
 800847c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800847e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008480:	4b4e      	ldr	r3, [pc, #312]	; (80085bc <_dtoa_r+0x644>)
 8008482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008486:	4401      	add	r1, r0
 8008488:	9102      	str	r1, [sp, #8]
 800848a:	9908      	ldr	r1, [sp, #32]
 800848c:	eeb0 8a47 	vmov.f32	s16, s14
 8008490:	eef0 8a67 	vmov.f32	s17, s15
 8008494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800849c:	2900      	cmp	r1, #0
 800849e:	d045      	beq.n	800852c <_dtoa_r+0x5b4>
 80084a0:	494c      	ldr	r1, [pc, #304]	; (80085d4 <_dtoa_r+0x65c>)
 80084a2:	2000      	movs	r0, #0
 80084a4:	f7f8 f9fa 	bl	800089c <__aeabi_ddiv>
 80084a8:	ec53 2b18 	vmov	r2, r3, d8
 80084ac:	f7f7 ff14 	bl	80002d8 <__aeabi_dsub>
 80084b0:	9d00      	ldr	r5, [sp, #0]
 80084b2:	ec41 0b18 	vmov	d8, r0, r1
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7f8 fb75 	bl	8000ba8 <__aeabi_d2iz>
 80084be:	900c      	str	r0, [sp, #48]	; 0x30
 80084c0:	f7f8 f858 	bl	8000574 <__aeabi_i2d>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f7 ff04 	bl	80002d8 <__aeabi_dsub>
 80084d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d2:	3330      	adds	r3, #48	; 0x30
 80084d4:	f805 3b01 	strb.w	r3, [r5], #1
 80084d8:	ec53 2b18 	vmov	r2, r3, d8
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	f7f8 fb24 	bl	8000b2c <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d165      	bne.n	80085b4 <_dtoa_r+0x63c>
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	4935      	ldr	r1, [pc, #212]	; (80085c4 <_dtoa_r+0x64c>)
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7f7 fef2 	bl	80002d8 <__aeabi_dsub>
 80084f4:	ec53 2b18 	vmov	r2, r3, d8
 80084f8:	f7f8 fb18 	bl	8000b2c <__aeabi_dcmplt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f040 80b9 	bne.w	8008674 <_dtoa_r+0x6fc>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	429d      	cmp	r5, r3
 8008506:	f43f af75 	beq.w	80083f4 <_dtoa_r+0x47c>
 800850a:	4b2f      	ldr	r3, [pc, #188]	; (80085c8 <_dtoa_r+0x650>)
 800850c:	ec51 0b18 	vmov	r0, r1, d8
 8008510:	2200      	movs	r2, #0
 8008512:	f7f8 f899 	bl	8000648 <__aeabi_dmul>
 8008516:	4b2c      	ldr	r3, [pc, #176]	; (80085c8 <_dtoa_r+0x650>)
 8008518:	ec41 0b18 	vmov	d8, r0, r1
 800851c:	2200      	movs	r2, #0
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f8 f891 	bl	8000648 <__aeabi_dmul>
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	e7c4      	b.n	80084b6 <_dtoa_r+0x53e>
 800852c:	ec51 0b17 	vmov	r0, r1, d7
 8008530:	f7f8 f88a 	bl	8000648 <__aeabi_dmul>
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	9d00      	ldr	r5, [sp, #0]
 8008538:	930c      	str	r3, [sp, #48]	; 0x30
 800853a:	ec41 0b18 	vmov	d8, r0, r1
 800853e:	4639      	mov	r1, r7
 8008540:	4630      	mov	r0, r6
 8008542:	f7f8 fb31 	bl	8000ba8 <__aeabi_d2iz>
 8008546:	9011      	str	r0, [sp, #68]	; 0x44
 8008548:	f7f8 f814 	bl	8000574 <__aeabi_i2d>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f7 fec0 	bl	80002d8 <__aeabi_dsub>
 8008558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800855a:	3330      	adds	r3, #48	; 0x30
 800855c:	f805 3b01 	strb.w	r3, [r5], #1
 8008560:	9b02      	ldr	r3, [sp, #8]
 8008562:	429d      	cmp	r5, r3
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	d134      	bne.n	80085d8 <_dtoa_r+0x660>
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <_dtoa_r+0x65c>)
 8008570:	ec51 0b18 	vmov	r0, r1, d8
 8008574:	f7f7 feb2 	bl	80002dc <__adddf3>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	f7f8 faf2 	bl	8000b68 <__aeabi_dcmpgt>
 8008584:	2800      	cmp	r0, #0
 8008586:	d175      	bne.n	8008674 <_dtoa_r+0x6fc>
 8008588:	ec53 2b18 	vmov	r2, r3, d8
 800858c:	4911      	ldr	r1, [pc, #68]	; (80085d4 <_dtoa_r+0x65c>)
 800858e:	2000      	movs	r0, #0
 8008590:	f7f7 fea2 	bl	80002d8 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f8 fac6 	bl	8000b2c <__aeabi_dcmplt>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f43f af27 	beq.w	80083f4 <_dtoa_r+0x47c>
 80085a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a8:	1e6b      	subs	r3, r5, #1
 80085aa:	930c      	str	r3, [sp, #48]	; 0x30
 80085ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d0f8      	beq.n	80085a6 <_dtoa_r+0x62e>
 80085b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085b8:	e04a      	b.n	8008650 <_dtoa_r+0x6d8>
 80085ba:	bf00      	nop
 80085bc:	0800a0e0 	.word	0x0800a0e0
 80085c0:	0800a0b8 	.word	0x0800a0b8
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	40240000 	.word	0x40240000
 80085cc:	401c0000 	.word	0x401c0000
 80085d0:	40140000 	.word	0x40140000
 80085d4:	3fe00000 	.word	0x3fe00000
 80085d8:	4baf      	ldr	r3, [pc, #700]	; (8008898 <_dtoa_r+0x920>)
 80085da:	f7f8 f835 	bl	8000648 <__aeabi_dmul>
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	e7ac      	b.n	800853e <_dtoa_r+0x5c6>
 80085e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085e8:	9d00      	ldr	r5, [sp, #0]
 80085ea:	4642      	mov	r2, r8
 80085ec:	464b      	mov	r3, r9
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f8 f953 	bl	800089c <__aeabi_ddiv>
 80085f6:	f7f8 fad7 	bl	8000ba8 <__aeabi_d2iz>
 80085fa:	9002      	str	r0, [sp, #8]
 80085fc:	f7f7 ffba 	bl	8000574 <__aeabi_i2d>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	f7f8 f820 	bl	8000648 <__aeabi_dmul>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe62 	bl	80002d8 <__aeabi_dsub>
 8008614:	9e02      	ldr	r6, [sp, #8]
 8008616:	9f01      	ldr	r7, [sp, #4]
 8008618:	3630      	adds	r6, #48	; 0x30
 800861a:	f805 6b01 	strb.w	r6, [r5], #1
 800861e:	9e00      	ldr	r6, [sp, #0]
 8008620:	1bae      	subs	r6, r5, r6
 8008622:	42b7      	cmp	r7, r6
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	d137      	bne.n	800869a <_dtoa_r+0x722>
 800862a:	f7f7 fe57 	bl	80002dc <__adddf3>
 800862e:	4642      	mov	r2, r8
 8008630:	464b      	mov	r3, r9
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	f7f8 fa97 	bl	8000b68 <__aeabi_dcmpgt>
 800863a:	b9c8      	cbnz	r0, 8008670 <_dtoa_r+0x6f8>
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f8 fa68 	bl	8000b18 <__aeabi_dcmpeq>
 8008648:	b110      	cbz	r0, 8008650 <_dtoa_r+0x6d8>
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	07d9      	lsls	r1, r3, #31
 800864e:	d40f      	bmi.n	8008670 <_dtoa_r+0x6f8>
 8008650:	4620      	mov	r0, r4
 8008652:	4659      	mov	r1, fp
 8008654:	f000 fad6 	bl	8008c04 <_Bfree>
 8008658:	2300      	movs	r3, #0
 800865a:	702b      	strb	r3, [r5, #0]
 800865c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800865e:	f10a 0001 	add.w	r0, sl, #1
 8008662:	6018      	str	r0, [r3, #0]
 8008664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008666:	2b00      	cmp	r3, #0
 8008668:	f43f acd8 	beq.w	800801c <_dtoa_r+0xa4>
 800866c:	601d      	str	r5, [r3, #0]
 800866e:	e4d5      	b.n	800801c <_dtoa_r+0xa4>
 8008670:	f8cd a01c 	str.w	sl, [sp, #28]
 8008674:	462b      	mov	r3, r5
 8008676:	461d      	mov	r5, r3
 8008678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800867c:	2a39      	cmp	r2, #57	; 0x39
 800867e:	d108      	bne.n	8008692 <_dtoa_r+0x71a>
 8008680:	9a00      	ldr	r2, [sp, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d1f7      	bne.n	8008676 <_dtoa_r+0x6fe>
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	9900      	ldr	r1, [sp, #0]
 800868a:	3201      	adds	r2, #1
 800868c:	9207      	str	r2, [sp, #28]
 800868e:	2230      	movs	r2, #48	; 0x30
 8008690:	700a      	strb	r2, [r1, #0]
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	3201      	adds	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e78c      	b.n	80085b4 <_dtoa_r+0x63c>
 800869a:	4b7f      	ldr	r3, [pc, #508]	; (8008898 <_dtoa_r+0x920>)
 800869c:	2200      	movs	r2, #0
 800869e:	f7f7 ffd3 	bl	8000648 <__aeabi_dmul>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	f7f8 fa35 	bl	8000b18 <__aeabi_dcmpeq>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d09b      	beq.n	80085ea <_dtoa_r+0x672>
 80086b2:	e7cd      	b.n	8008650 <_dtoa_r+0x6d8>
 80086b4:	9a08      	ldr	r2, [sp, #32]
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	f000 80c4 	beq.w	8008844 <_dtoa_r+0x8cc>
 80086bc:	9a05      	ldr	r2, [sp, #20]
 80086be:	2a01      	cmp	r2, #1
 80086c0:	f300 80a8 	bgt.w	8008814 <_dtoa_r+0x89c>
 80086c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	f000 80a0 	beq.w	800880c <_dtoa_r+0x894>
 80086cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086d0:	9e06      	ldr	r6, [sp, #24]
 80086d2:	4645      	mov	r5, r8
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	2101      	movs	r1, #1
 80086d8:	441a      	add	r2, r3
 80086da:	4620      	mov	r0, r4
 80086dc:	4498      	add	r8, r3
 80086de:	9204      	str	r2, [sp, #16]
 80086e0:	f000 fb4c 	bl	8008d7c <__i2b>
 80086e4:	4607      	mov	r7, r0
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	dd0b      	ble.n	8008702 <_dtoa_r+0x78a>
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dd08      	ble.n	8008702 <_dtoa_r+0x78a>
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	9a04      	ldr	r2, [sp, #16]
 80086f4:	bfa8      	it	ge
 80086f6:	462b      	movge	r3, r5
 80086f8:	eba8 0803 	sub.w	r8, r8, r3
 80086fc:	1aed      	subs	r5, r5, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	9304      	str	r3, [sp, #16]
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	b1fb      	cbz	r3, 8008746 <_dtoa_r+0x7ce>
 8008706:	9b08      	ldr	r3, [sp, #32]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 809f 	beq.w	800884c <_dtoa_r+0x8d4>
 800870e:	2e00      	cmp	r6, #0
 8008710:	dd11      	ble.n	8008736 <_dtoa_r+0x7be>
 8008712:	4639      	mov	r1, r7
 8008714:	4632      	mov	r2, r6
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fbec 	bl	8008ef4 <__pow5mult>
 800871c:	465a      	mov	r2, fp
 800871e:	4601      	mov	r1, r0
 8008720:	4607      	mov	r7, r0
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fb40 	bl	8008da8 <__multiply>
 8008728:	4659      	mov	r1, fp
 800872a:	9007      	str	r0, [sp, #28]
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fa69 	bl	8008c04 <_Bfree>
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	469b      	mov	fp, r3
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	1b9a      	subs	r2, r3, r6
 800873a:	d004      	beq.n	8008746 <_dtoa_r+0x7ce>
 800873c:	4659      	mov	r1, fp
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fbd8 	bl	8008ef4 <__pow5mult>
 8008744:	4683      	mov	fp, r0
 8008746:	2101      	movs	r1, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fb17 	bl	8008d7c <__i2b>
 800874e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	4606      	mov	r6, r0
 8008754:	dd7c      	ble.n	8008850 <_dtoa_r+0x8d8>
 8008756:	461a      	mov	r2, r3
 8008758:	4601      	mov	r1, r0
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fbca 	bl	8008ef4 <__pow5mult>
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	2b01      	cmp	r3, #1
 8008764:	4606      	mov	r6, r0
 8008766:	dd76      	ble.n	8008856 <_dtoa_r+0x8de>
 8008768:	2300      	movs	r3, #0
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	6933      	ldr	r3, [r6, #16]
 800876e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008772:	6918      	ldr	r0, [r3, #16]
 8008774:	f000 fab2 	bl	8008cdc <__hi0bits>
 8008778:	f1c0 0020 	rsb	r0, r0, #32
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4418      	add	r0, r3
 8008780:	f010 001f 	ands.w	r0, r0, #31
 8008784:	f000 8086 	beq.w	8008894 <_dtoa_r+0x91c>
 8008788:	f1c0 0320 	rsb	r3, r0, #32
 800878c:	2b04      	cmp	r3, #4
 800878e:	dd7f      	ble.n	8008890 <_dtoa_r+0x918>
 8008790:	f1c0 001c 	rsb	r0, r0, #28
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	4403      	add	r3, r0
 8008798:	4480      	add	r8, r0
 800879a:	4405      	add	r5, r0
 800879c:	9304      	str	r3, [sp, #16]
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x838>
 80087a4:	4659      	mov	r1, fp
 80087a6:	4642      	mov	r2, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fbfd 	bl	8008fa8 <__lshift>
 80087ae:	4683      	mov	fp, r0
 80087b0:	9b04      	ldr	r3, [sp, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dd05      	ble.n	80087c2 <_dtoa_r+0x84a>
 80087b6:	4631      	mov	r1, r6
 80087b8:	461a      	mov	r2, r3
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fbf4 	bl	8008fa8 <__lshift>
 80087c0:	4606      	mov	r6, r0
 80087c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d069      	beq.n	800889c <_dtoa_r+0x924>
 80087c8:	4631      	mov	r1, r6
 80087ca:	4658      	mov	r0, fp
 80087cc:	f000 fc58 	bl	8009080 <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	da63      	bge.n	800889c <_dtoa_r+0x924>
 80087d4:	2300      	movs	r3, #0
 80087d6:	4659      	mov	r1, fp
 80087d8:	220a      	movs	r2, #10
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fa34 	bl	8008c48 <__multadd>
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087e6:	4683      	mov	fp, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 818f 	beq.w	8008b0c <_dtoa_r+0xb94>
 80087ee:	4639      	mov	r1, r7
 80087f0:	2300      	movs	r3, #0
 80087f2:	220a      	movs	r2, #10
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fa27 	bl	8008c48 <__multadd>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	4607      	mov	r7, r0
 8008800:	f300 808e 	bgt.w	8008920 <_dtoa_r+0x9a8>
 8008804:	9b05      	ldr	r3, [sp, #20]
 8008806:	2b02      	cmp	r3, #2
 8008808:	dc50      	bgt.n	80088ac <_dtoa_r+0x934>
 800880a:	e089      	b.n	8008920 <_dtoa_r+0x9a8>
 800880c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800880e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008812:	e75d      	b.n	80086d0 <_dtoa_r+0x758>
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	1e5e      	subs	r6, r3, #1
 8008818:	9b06      	ldr	r3, [sp, #24]
 800881a:	42b3      	cmp	r3, r6
 800881c:	bfbf      	itttt	lt
 800881e:	9b06      	ldrlt	r3, [sp, #24]
 8008820:	9606      	strlt	r6, [sp, #24]
 8008822:	1af2      	sublt	r2, r6, r3
 8008824:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008826:	bfb6      	itet	lt
 8008828:	189b      	addlt	r3, r3, r2
 800882a:	1b9e      	subge	r6, r3, r6
 800882c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	bfb8      	it	lt
 8008832:	2600      	movlt	r6, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfb5      	itete	lt
 8008838:	eba8 0503 	sublt.w	r5, r8, r3
 800883c:	9b01      	ldrge	r3, [sp, #4]
 800883e:	2300      	movlt	r3, #0
 8008840:	4645      	movge	r5, r8
 8008842:	e747      	b.n	80086d4 <_dtoa_r+0x75c>
 8008844:	9e06      	ldr	r6, [sp, #24]
 8008846:	9f08      	ldr	r7, [sp, #32]
 8008848:	4645      	mov	r5, r8
 800884a:	e74c      	b.n	80086e6 <_dtoa_r+0x76e>
 800884c:	9a06      	ldr	r2, [sp, #24]
 800884e:	e775      	b.n	800873c <_dtoa_r+0x7c4>
 8008850:	9b05      	ldr	r3, [sp, #20]
 8008852:	2b01      	cmp	r3, #1
 8008854:	dc18      	bgt.n	8008888 <_dtoa_r+0x910>
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	b9b3      	cbnz	r3, 8008888 <_dtoa_r+0x910>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008860:	b9a3      	cbnz	r3, 800888c <_dtoa_r+0x914>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008868:	0d1b      	lsrs	r3, r3, #20
 800886a:	051b      	lsls	r3, r3, #20
 800886c:	b12b      	cbz	r3, 800887a <_dtoa_r+0x902>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	f108 0801 	add.w	r8, r8, #1
 8008878:	2301      	movs	r3, #1
 800887a:	9306      	str	r3, [sp, #24]
 800887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887e:	2b00      	cmp	r3, #0
 8008880:	f47f af74 	bne.w	800876c <_dtoa_r+0x7f4>
 8008884:	2001      	movs	r0, #1
 8008886:	e779      	b.n	800877c <_dtoa_r+0x804>
 8008888:	2300      	movs	r3, #0
 800888a:	e7f6      	b.n	800887a <_dtoa_r+0x902>
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	e7f4      	b.n	800887a <_dtoa_r+0x902>
 8008890:	d085      	beq.n	800879e <_dtoa_r+0x826>
 8008892:	4618      	mov	r0, r3
 8008894:	301c      	adds	r0, #28
 8008896:	e77d      	b.n	8008794 <_dtoa_r+0x81c>
 8008898:	40240000 	.word	0x40240000
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc38      	bgt.n	8008914 <_dtoa_r+0x99c>
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	dd35      	ble.n	8008914 <_dtoa_r+0x99c>
 80088a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	d10d      	bne.n	80088ce <_dtoa_r+0x956>
 80088b2:	4631      	mov	r1, r6
 80088b4:	464b      	mov	r3, r9
 80088b6:	2205      	movs	r2, #5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f9c5 	bl	8008c48 <__multadd>
 80088be:	4601      	mov	r1, r0
 80088c0:	4606      	mov	r6, r0
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 fbdc 	bl	8009080 <__mcmp>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f73f adbd 	bgt.w	8008448 <_dtoa_r+0x4d0>
 80088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d0:	9d00      	ldr	r5, [sp, #0]
 80088d2:	ea6f 0a03 	mvn.w	sl, r3
 80088d6:	f04f 0800 	mov.w	r8, #0
 80088da:	4631      	mov	r1, r6
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 f991 	bl	8008c04 <_Bfree>
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	f43f aeb4 	beq.w	8008650 <_dtoa_r+0x6d8>
 80088e8:	f1b8 0f00 	cmp.w	r8, #0
 80088ec:	d005      	beq.n	80088fa <_dtoa_r+0x982>
 80088ee:	45b8      	cmp	r8, r7
 80088f0:	d003      	beq.n	80088fa <_dtoa_r+0x982>
 80088f2:	4641      	mov	r1, r8
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f985 	bl	8008c04 <_Bfree>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 f981 	bl	8008c04 <_Bfree>
 8008902:	e6a5      	b.n	8008650 <_dtoa_r+0x6d8>
 8008904:	2600      	movs	r6, #0
 8008906:	4637      	mov	r7, r6
 8008908:	e7e1      	b.n	80088ce <_dtoa_r+0x956>
 800890a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800890c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008910:	4637      	mov	r7, r6
 8008912:	e599      	b.n	8008448 <_dtoa_r+0x4d0>
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80fd 	beq.w	8008b1a <_dtoa_r+0xba2>
 8008920:	2d00      	cmp	r5, #0
 8008922:	dd05      	ble.n	8008930 <_dtoa_r+0x9b8>
 8008924:	4639      	mov	r1, r7
 8008926:	462a      	mov	r2, r5
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fb3d 	bl	8008fa8 <__lshift>
 800892e:	4607      	mov	r7, r0
 8008930:	9b06      	ldr	r3, [sp, #24]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d05c      	beq.n	80089f0 <_dtoa_r+0xa78>
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 f923 	bl	8008b84 <_Balloc>
 800893e:	4605      	mov	r5, r0
 8008940:	b928      	cbnz	r0, 800894e <_dtoa_r+0x9d6>
 8008942:	4b80      	ldr	r3, [pc, #512]	; (8008b44 <_dtoa_r+0xbcc>)
 8008944:	4602      	mov	r2, r0
 8008946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800894a:	f7ff bb2e 	b.w	8007faa <_dtoa_r+0x32>
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	3202      	adds	r2, #2
 8008952:	0092      	lsls	r2, r2, #2
 8008954:	f107 010c 	add.w	r1, r7, #12
 8008958:	300c      	adds	r0, #12
 800895a:	f000 f905 	bl	8008b68 <memcpy>
 800895e:	2201      	movs	r2, #1
 8008960:	4629      	mov	r1, r5
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fb20 	bl	8008fa8 <__lshift>
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	444b      	add	r3, r9
 8008972:	9307      	str	r3, [sp, #28]
 8008974:	9b02      	ldr	r3, [sp, #8]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	46b8      	mov	r8, r7
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	4607      	mov	r7, r0
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	4631      	mov	r1, r6
 8008984:	3b01      	subs	r3, #1
 8008986:	4658      	mov	r0, fp
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	f7ff fa69 	bl	8007e60 <quorem>
 800898e:	4603      	mov	r3, r0
 8008990:	3330      	adds	r3, #48	; 0x30
 8008992:	9004      	str	r0, [sp, #16]
 8008994:	4641      	mov	r1, r8
 8008996:	4658      	mov	r0, fp
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	f000 fb71 	bl	8009080 <__mcmp>
 800899e:	463a      	mov	r2, r7
 80089a0:	4681      	mov	r9, r0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fb87 	bl	80090b8 <__mdiff>
 80089aa:	68c2      	ldr	r2, [r0, #12]
 80089ac:	9b08      	ldr	r3, [sp, #32]
 80089ae:	4605      	mov	r5, r0
 80089b0:	bb02      	cbnz	r2, 80089f4 <_dtoa_r+0xa7c>
 80089b2:	4601      	mov	r1, r0
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fb63 	bl	8009080 <__mcmp>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	4602      	mov	r2, r0
 80089be:	4629      	mov	r1, r5
 80089c0:	4620      	mov	r0, r4
 80089c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089c6:	f000 f91d 	bl	8008c04 <_Bfree>
 80089ca:	9b05      	ldr	r3, [sp, #20]
 80089cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ce:	9d01      	ldr	r5, [sp, #4]
 80089d0:	ea43 0102 	orr.w	r1, r3, r2
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	430b      	orrs	r3, r1
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	d10d      	bne.n	80089f8 <_dtoa_r+0xa80>
 80089dc:	2b39      	cmp	r3, #57	; 0x39
 80089de:	d029      	beq.n	8008a34 <_dtoa_r+0xabc>
 80089e0:	f1b9 0f00 	cmp.w	r9, #0
 80089e4:	dd01      	ble.n	80089ea <_dtoa_r+0xa72>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	3331      	adds	r3, #49	; 0x31
 80089ea:	9a02      	ldr	r2, [sp, #8]
 80089ec:	7013      	strb	r3, [r2, #0]
 80089ee:	e774      	b.n	80088da <_dtoa_r+0x962>
 80089f0:	4638      	mov	r0, r7
 80089f2:	e7b9      	b.n	8008968 <_dtoa_r+0x9f0>
 80089f4:	2201      	movs	r2, #1
 80089f6:	e7e2      	b.n	80089be <_dtoa_r+0xa46>
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	db06      	blt.n	8008a0c <_dtoa_r+0xa94>
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	ea41 0909 	orr.w	r9, r1, r9
 8008a04:	9906      	ldr	r1, [sp, #24]
 8008a06:	ea59 0101 	orrs.w	r1, r9, r1
 8008a0a:	d120      	bne.n	8008a4e <_dtoa_r+0xad6>
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	ddec      	ble.n	80089ea <_dtoa_r+0xa72>
 8008a10:	4659      	mov	r1, fp
 8008a12:	2201      	movs	r2, #1
 8008a14:	4620      	mov	r0, r4
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f000 fac6 	bl	8008fa8 <__lshift>
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4683      	mov	fp, r0
 8008a20:	f000 fb2e 	bl	8009080 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	dc02      	bgt.n	8008a30 <_dtoa_r+0xab8>
 8008a2a:	d1de      	bne.n	80089ea <_dtoa_r+0xa72>
 8008a2c:	07da      	lsls	r2, r3, #31
 8008a2e:	d5dc      	bpl.n	80089ea <_dtoa_r+0xa72>
 8008a30:	2b39      	cmp	r3, #57	; 0x39
 8008a32:	d1d8      	bne.n	80089e6 <_dtoa_r+0xa6e>
 8008a34:	9a02      	ldr	r2, [sp, #8]
 8008a36:	2339      	movs	r3, #57	; 0x39
 8008a38:	7013      	strb	r3, [r2, #0]
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a44:	2a39      	cmp	r2, #57	; 0x39
 8008a46:	d050      	beq.n	8008aea <_dtoa_r+0xb72>
 8008a48:	3201      	adds	r2, #1
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e745      	b.n	80088da <_dtoa_r+0x962>
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	dd03      	ble.n	8008a5a <_dtoa_r+0xae2>
 8008a52:	2b39      	cmp	r3, #57	; 0x39
 8008a54:	d0ee      	beq.n	8008a34 <_dtoa_r+0xabc>
 8008a56:	3301      	adds	r3, #1
 8008a58:	e7c7      	b.n	80089ea <_dtoa_r+0xa72>
 8008a5a:	9a01      	ldr	r2, [sp, #4]
 8008a5c:	9907      	ldr	r1, [sp, #28]
 8008a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a62:	428a      	cmp	r2, r1
 8008a64:	d02a      	beq.n	8008abc <_dtoa_r+0xb44>
 8008a66:	4659      	mov	r1, fp
 8008a68:	2300      	movs	r3, #0
 8008a6a:	220a      	movs	r2, #10
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f8eb 	bl	8008c48 <__multadd>
 8008a72:	45b8      	cmp	r8, r7
 8008a74:	4683      	mov	fp, r0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	f04f 020a 	mov.w	r2, #10
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4620      	mov	r0, r4
 8008a82:	d107      	bne.n	8008a94 <_dtoa_r+0xb1c>
 8008a84:	f000 f8e0 	bl	8008c48 <__multadd>
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	e775      	b.n	8008980 <_dtoa_r+0xa08>
 8008a94:	f000 f8d8 	bl	8008c48 <__multadd>
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	220a      	movs	r2, #10
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f8d1 	bl	8008c48 <__multadd>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	e7f0      	b.n	8008a8c <_dtoa_r+0xb14>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	9a00      	ldr	r2, [sp, #0]
 8008ab0:	bfcc      	ite	gt
 8008ab2:	464d      	movgt	r5, r9
 8008ab4:	2501      	movle	r5, #1
 8008ab6:	4415      	add	r5, r2
 8008ab8:	f04f 0800 	mov.w	r8, #0
 8008abc:	4659      	mov	r1, fp
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	f000 fa70 	bl	8008fa8 <__lshift>
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4683      	mov	fp, r0
 8008acc:	f000 fad8 	bl	8009080 <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dcb2      	bgt.n	8008a3a <_dtoa_r+0xac2>
 8008ad4:	d102      	bne.n	8008adc <_dtoa_r+0xb64>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	07db      	lsls	r3, r3, #31
 8008ada:	d4ae      	bmi.n	8008a3a <_dtoa_r+0xac2>
 8008adc:	462b      	mov	r3, r5
 8008ade:	461d      	mov	r5, r3
 8008ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ae4:	2a30      	cmp	r2, #48	; 0x30
 8008ae6:	d0fa      	beq.n	8008ade <_dtoa_r+0xb66>
 8008ae8:	e6f7      	b.n	80088da <_dtoa_r+0x962>
 8008aea:	9a00      	ldr	r2, [sp, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d1a5      	bne.n	8008a3c <_dtoa_r+0xac4>
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	2331      	movs	r3, #49	; 0x31
 8008af6:	e779      	b.n	80089ec <_dtoa_r+0xa74>
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <_dtoa_r+0xbd0>)
 8008afa:	f7ff baaf 	b.w	800805c <_dtoa_r+0xe4>
 8008afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f aa86 	bne.w	8008012 <_dtoa_r+0x9a>
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <_dtoa_r+0xbd4>)
 8008b08:	f7ff baa8 	b.w	800805c <_dtoa_r+0xe4>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	dc03      	bgt.n	8008b1a <_dtoa_r+0xba2>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f73f aec9 	bgt.w	80088ac <_dtoa_r+0x934>
 8008b1a:	9d00      	ldr	r5, [sp, #0]
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f7ff f99e 	bl	8007e60 <quorem>
 8008b24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b28:	f805 3b01 	strb.w	r3, [r5], #1
 8008b2c:	9a00      	ldr	r2, [sp, #0]
 8008b2e:	1aaa      	subs	r2, r5, r2
 8008b30:	4591      	cmp	r9, r2
 8008b32:	ddba      	ble.n	8008aaa <_dtoa_r+0xb32>
 8008b34:	4659      	mov	r1, fp
 8008b36:	2300      	movs	r3, #0
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f884 	bl	8008c48 <__multadd>
 8008b40:	4683      	mov	fp, r0
 8008b42:	e7eb      	b.n	8008b1c <_dtoa_r+0xba4>
 8008b44:	0800a043 	.word	0x0800a043
 8008b48:	08009f9c 	.word	0x08009f9c
 8008b4c:	08009fc0 	.word	0x08009fc0

08008b50 <_localeconv_r>:
 8008b50:	4800      	ldr	r0, [pc, #0]	; (8008b54 <_localeconv_r+0x4>)
 8008b52:	4770      	bx	lr
 8008b54:	20000164 	.word	0x20000164

08008b58 <malloc>:
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <malloc+0xc>)
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	6818      	ldr	r0, [r3, #0]
 8008b5e:	f000 bbef 	b.w	8009340 <_malloc_r>
 8008b62:	bf00      	nop
 8008b64:	20000010 	.word	0x20000010

08008b68 <memcpy>:
 8008b68:	440a      	add	r2, r1
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b70:	d100      	bne.n	8008b74 <memcpy+0xc>
 8008b72:	4770      	bx	lr
 8008b74:	b510      	push	{r4, lr}
 8008b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	d1f9      	bne.n	8008b76 <memcpy+0xe>
 8008b82:	bd10      	pop	{r4, pc}

08008b84 <_Balloc>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	b976      	cbnz	r6, 8008bac <_Balloc+0x28>
 8008b8e:	2010      	movs	r0, #16
 8008b90:	f7ff ffe2 	bl	8008b58 <malloc>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6260      	str	r0, [r4, #36]	; 0x24
 8008b98:	b920      	cbnz	r0, 8008ba4 <_Balloc+0x20>
 8008b9a:	4b18      	ldr	r3, [pc, #96]	; (8008bfc <_Balloc+0x78>)
 8008b9c:	4818      	ldr	r0, [pc, #96]	; (8008c00 <_Balloc+0x7c>)
 8008b9e:	2166      	movs	r1, #102	; 0x66
 8008ba0:	f000 fc38 	bl	8009414 <__assert_func>
 8008ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba8:	6006      	str	r6, [r0, #0]
 8008baa:	60c6      	str	r6, [r0, #12]
 8008bac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bae:	68f3      	ldr	r3, [r6, #12]
 8008bb0:	b183      	cbz	r3, 8008bd4 <_Balloc+0x50>
 8008bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bba:	b9b8      	cbnz	r0, 8008bec <_Balloc+0x68>
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	fa01 f605 	lsl.w	r6, r1, r5
 8008bc2:	1d72      	adds	r2, r6, #5
 8008bc4:	0092      	lsls	r2, r2, #2
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fb5a 	bl	8009280 <_calloc_r>
 8008bcc:	b160      	cbz	r0, 8008be8 <_Balloc+0x64>
 8008bce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bd2:	e00e      	b.n	8008bf2 <_Balloc+0x6e>
 8008bd4:	2221      	movs	r2, #33	; 0x21
 8008bd6:	2104      	movs	r1, #4
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fb51 	bl	8009280 <_calloc_r>
 8008bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be0:	60f0      	str	r0, [r6, #12]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e4      	bne.n	8008bb2 <_Balloc+0x2e>
 8008be8:	2000      	movs	r0, #0
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	6802      	ldr	r2, [r0, #0]
 8008bee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf8:	e7f7      	b.n	8008bea <_Balloc+0x66>
 8008bfa:	bf00      	nop
 8008bfc:	08009fcd 	.word	0x08009fcd
 8008c00:	0800a054 	.word	0x0800a054

08008c04 <_Bfree>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b976      	cbnz	r6, 8008c2c <_Bfree+0x28>
 8008c0e:	2010      	movs	r0, #16
 8008c10:	f7ff ffa2 	bl	8008b58 <malloc>
 8008c14:	4602      	mov	r2, r0
 8008c16:	6268      	str	r0, [r5, #36]	; 0x24
 8008c18:	b920      	cbnz	r0, 8008c24 <_Bfree+0x20>
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <_Bfree+0x3c>)
 8008c1c:	4809      	ldr	r0, [pc, #36]	; (8008c44 <_Bfree+0x40>)
 8008c1e:	218a      	movs	r1, #138	; 0x8a
 8008c20:	f000 fbf8 	bl	8009414 <__assert_func>
 8008c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c28:	6006      	str	r6, [r0, #0]
 8008c2a:	60c6      	str	r6, [r0, #12]
 8008c2c:	b13c      	cbz	r4, 8008c3e <_Bfree+0x3a>
 8008c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c30:	6862      	ldr	r2, [r4, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c38:	6021      	str	r1, [r4, #0]
 8008c3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	08009fcd 	.word	0x08009fcd
 8008c44:	0800a054 	.word	0x0800a054

08008c48 <__multadd>:
 8008c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4c:	690e      	ldr	r6, [r1, #16]
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4698      	mov	r8, r3
 8008c52:	460c      	mov	r4, r1
 8008c54:	f101 0014 	add.w	r0, r1, #20
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6805      	ldr	r5, [r0, #0]
 8008c5c:	b2a9      	uxth	r1, r5
 8008c5e:	fb02 8101 	mla	r1, r2, r1, r8
 8008c62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c66:	0c2d      	lsrs	r5, r5, #16
 8008c68:	fb02 c505 	mla	r5, r2, r5, ip
 8008c6c:	b289      	uxth	r1, r1
 8008c6e:	3301      	adds	r3, #1
 8008c70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c74:	429e      	cmp	r6, r3
 8008c76:	f840 1b04 	str.w	r1, [r0], #4
 8008c7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c7e:	dcec      	bgt.n	8008c5a <__multadd+0x12>
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d022      	beq.n	8008ccc <__multadd+0x84>
 8008c86:	68a3      	ldr	r3, [r4, #8]
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	dc19      	bgt.n	8008cc0 <__multadd+0x78>
 8008c8c:	6861      	ldr	r1, [r4, #4]
 8008c8e:	4638      	mov	r0, r7
 8008c90:	3101      	adds	r1, #1
 8008c92:	f7ff ff77 	bl	8008b84 <_Balloc>
 8008c96:	4605      	mov	r5, r0
 8008c98:	b928      	cbnz	r0, 8008ca6 <__multadd+0x5e>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <__multadd+0x8c>)
 8008c9e:	480e      	ldr	r0, [pc, #56]	; (8008cd8 <__multadd+0x90>)
 8008ca0:	21b5      	movs	r1, #181	; 0xb5
 8008ca2:	f000 fbb7 	bl	8009414 <__assert_func>
 8008ca6:	6922      	ldr	r2, [r4, #16]
 8008ca8:	3202      	adds	r2, #2
 8008caa:	f104 010c 	add.w	r1, r4, #12
 8008cae:	0092      	lsls	r2, r2, #2
 8008cb0:	300c      	adds	r0, #12
 8008cb2:	f7ff ff59 	bl	8008b68 <memcpy>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff ffa3 	bl	8008c04 <_Bfree>
 8008cbe:	462c      	mov	r4, r5
 8008cc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008cca:	6126      	str	r6, [r4, #16]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800a043 	.word	0x0800a043
 8008cd8:	0800a054 	.word	0x0800a054

08008cdc <__hi0bits>:
 8008cdc:	0c03      	lsrs	r3, r0, #16
 8008cde:	041b      	lsls	r3, r3, #16
 8008ce0:	b9d3      	cbnz	r3, 8008d18 <__hi0bits+0x3c>
 8008ce2:	0400      	lsls	r0, r0, #16
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008cea:	bf04      	itt	eq
 8008cec:	0200      	lsleq	r0, r0, #8
 8008cee:	3308      	addeq	r3, #8
 8008cf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cf4:	bf04      	itt	eq
 8008cf6:	0100      	lsleq	r0, r0, #4
 8008cf8:	3304      	addeq	r3, #4
 8008cfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008cfe:	bf04      	itt	eq
 8008d00:	0080      	lsleq	r0, r0, #2
 8008d02:	3302      	addeq	r3, #2
 8008d04:	2800      	cmp	r0, #0
 8008d06:	db05      	blt.n	8008d14 <__hi0bits+0x38>
 8008d08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d0c:	f103 0301 	add.w	r3, r3, #1
 8008d10:	bf08      	it	eq
 8008d12:	2320      	moveq	r3, #32
 8008d14:	4618      	mov	r0, r3
 8008d16:	4770      	bx	lr
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e7e4      	b.n	8008ce6 <__hi0bits+0xa>

08008d1c <__lo0bits>:
 8008d1c:	6803      	ldr	r3, [r0, #0]
 8008d1e:	f013 0207 	ands.w	r2, r3, #7
 8008d22:	4601      	mov	r1, r0
 8008d24:	d00b      	beq.n	8008d3e <__lo0bits+0x22>
 8008d26:	07da      	lsls	r2, r3, #31
 8008d28:	d424      	bmi.n	8008d74 <__lo0bits+0x58>
 8008d2a:	0798      	lsls	r0, r3, #30
 8008d2c:	bf49      	itett	mi
 8008d2e:	085b      	lsrmi	r3, r3, #1
 8008d30:	089b      	lsrpl	r3, r3, #2
 8008d32:	2001      	movmi	r0, #1
 8008d34:	600b      	strmi	r3, [r1, #0]
 8008d36:	bf5c      	itt	pl
 8008d38:	600b      	strpl	r3, [r1, #0]
 8008d3a:	2002      	movpl	r0, #2
 8008d3c:	4770      	bx	lr
 8008d3e:	b298      	uxth	r0, r3
 8008d40:	b9b0      	cbnz	r0, 8008d70 <__lo0bits+0x54>
 8008d42:	0c1b      	lsrs	r3, r3, #16
 8008d44:	2010      	movs	r0, #16
 8008d46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d4a:	bf04      	itt	eq
 8008d4c:	0a1b      	lsreq	r3, r3, #8
 8008d4e:	3008      	addeq	r0, #8
 8008d50:	071a      	lsls	r2, r3, #28
 8008d52:	bf04      	itt	eq
 8008d54:	091b      	lsreq	r3, r3, #4
 8008d56:	3004      	addeq	r0, #4
 8008d58:	079a      	lsls	r2, r3, #30
 8008d5a:	bf04      	itt	eq
 8008d5c:	089b      	lsreq	r3, r3, #2
 8008d5e:	3002      	addeq	r0, #2
 8008d60:	07da      	lsls	r2, r3, #31
 8008d62:	d403      	bmi.n	8008d6c <__lo0bits+0x50>
 8008d64:	085b      	lsrs	r3, r3, #1
 8008d66:	f100 0001 	add.w	r0, r0, #1
 8008d6a:	d005      	beq.n	8008d78 <__lo0bits+0x5c>
 8008d6c:	600b      	str	r3, [r1, #0]
 8008d6e:	4770      	bx	lr
 8008d70:	4610      	mov	r0, r2
 8008d72:	e7e8      	b.n	8008d46 <__lo0bits+0x2a>
 8008d74:	2000      	movs	r0, #0
 8008d76:	4770      	bx	lr
 8008d78:	2020      	movs	r0, #32
 8008d7a:	4770      	bx	lr

08008d7c <__i2b>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2101      	movs	r1, #1
 8008d82:	f7ff feff 	bl	8008b84 <_Balloc>
 8008d86:	4602      	mov	r2, r0
 8008d88:	b928      	cbnz	r0, 8008d96 <__i2b+0x1a>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <__i2b+0x24>)
 8008d8c:	4805      	ldr	r0, [pc, #20]	; (8008da4 <__i2b+0x28>)
 8008d8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d92:	f000 fb3f 	bl	8009414 <__assert_func>
 8008d96:	2301      	movs	r3, #1
 8008d98:	6144      	str	r4, [r0, #20]
 8008d9a:	6103      	str	r3, [r0, #16]
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	0800a043 	.word	0x0800a043
 8008da4:	0800a054 	.word	0x0800a054

08008da8 <__multiply>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4614      	mov	r4, r2
 8008dae:	690a      	ldr	r2, [r1, #16]
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	bfb8      	it	lt
 8008db6:	460b      	movlt	r3, r1
 8008db8:	460d      	mov	r5, r1
 8008dba:	bfbc      	itt	lt
 8008dbc:	4625      	movlt	r5, r4
 8008dbe:	461c      	movlt	r4, r3
 8008dc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008dc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008dc8:	68ab      	ldr	r3, [r5, #8]
 8008dca:	6869      	ldr	r1, [r5, #4]
 8008dcc:	eb0a 0709 	add.w	r7, sl, r9
 8008dd0:	42bb      	cmp	r3, r7
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	bfb8      	it	lt
 8008dd6:	3101      	addlt	r1, #1
 8008dd8:	f7ff fed4 	bl	8008b84 <_Balloc>
 8008ddc:	b930      	cbnz	r0, 8008dec <__multiply+0x44>
 8008dde:	4602      	mov	r2, r0
 8008de0:	4b42      	ldr	r3, [pc, #264]	; (8008eec <__multiply+0x144>)
 8008de2:	4843      	ldr	r0, [pc, #268]	; (8008ef0 <__multiply+0x148>)
 8008de4:	f240 115d 	movw	r1, #349	; 0x15d
 8008de8:	f000 fb14 	bl	8009414 <__assert_func>
 8008dec:	f100 0614 	add.w	r6, r0, #20
 8008df0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008df4:	4633      	mov	r3, r6
 8008df6:	2200      	movs	r2, #0
 8008df8:	4543      	cmp	r3, r8
 8008dfa:	d31e      	bcc.n	8008e3a <__multiply+0x92>
 8008dfc:	f105 0c14 	add.w	ip, r5, #20
 8008e00:	f104 0314 	add.w	r3, r4, #20
 8008e04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	ebac 0205 	sub.w	r2, ip, r5
 8008e12:	3a15      	subs	r2, #21
 8008e14:	f022 0203 	bic.w	r2, r2, #3
 8008e18:	3204      	adds	r2, #4
 8008e1a:	f105 0115 	add.w	r1, r5, #21
 8008e1e:	458c      	cmp	ip, r1
 8008e20:	bf38      	it	cc
 8008e22:	2204      	movcc	r2, #4
 8008e24:	9201      	str	r2, [sp, #4]
 8008e26:	9a02      	ldr	r2, [sp, #8]
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d808      	bhi.n	8008e40 <__multiply+0x98>
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	dc55      	bgt.n	8008ede <__multiply+0x136>
 8008e32:	6107      	str	r7, [r0, #16]
 8008e34:	b005      	add	sp, #20
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	f843 2b04 	str.w	r2, [r3], #4
 8008e3e:	e7db      	b.n	8008df8 <__multiply+0x50>
 8008e40:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e44:	f1ba 0f00 	cmp.w	sl, #0
 8008e48:	d020      	beq.n	8008e8c <__multiply+0xe4>
 8008e4a:	f105 0e14 	add.w	lr, r5, #20
 8008e4e:	46b1      	mov	r9, r6
 8008e50:	2200      	movs	r2, #0
 8008e52:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008e56:	f8d9 b000 	ldr.w	fp, [r9]
 8008e5a:	b2a1      	uxth	r1, r4
 8008e5c:	fa1f fb8b 	uxth.w	fp, fp
 8008e60:	fb0a b101 	mla	r1, sl, r1, fp
 8008e64:	4411      	add	r1, r2
 8008e66:	f8d9 2000 	ldr.w	r2, [r9]
 8008e6a:	0c24      	lsrs	r4, r4, #16
 8008e6c:	0c12      	lsrs	r2, r2, #16
 8008e6e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008e72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008e76:	b289      	uxth	r1, r1
 8008e78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e7c:	45f4      	cmp	ip, lr
 8008e7e:	f849 1b04 	str.w	r1, [r9], #4
 8008e82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008e86:	d8e4      	bhi.n	8008e52 <__multiply+0xaa>
 8008e88:	9901      	ldr	r1, [sp, #4]
 8008e8a:	5072      	str	r2, [r6, r1]
 8008e8c:	9a03      	ldr	r2, [sp, #12]
 8008e8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e92:	3304      	adds	r3, #4
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	d01f      	beq.n	8008eda <__multiply+0x132>
 8008e9a:	6834      	ldr	r4, [r6, #0]
 8008e9c:	f105 0114 	add.w	r1, r5, #20
 8008ea0:	46b6      	mov	lr, r6
 8008ea2:	f04f 0a00 	mov.w	sl, #0
 8008ea6:	880a      	ldrh	r2, [r1, #0]
 8008ea8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008eac:	fb09 b202 	mla	r2, r9, r2, fp
 8008eb0:	4492      	add	sl, r2
 8008eb2:	b2a4      	uxth	r4, r4
 8008eb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008eb8:	f84e 4b04 	str.w	r4, [lr], #4
 8008ebc:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ec0:	f8be 2000 	ldrh.w	r2, [lr]
 8008ec4:	0c24      	lsrs	r4, r4, #16
 8008ec6:	fb09 2404 	mla	r4, r9, r4, r2
 8008eca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ece:	458c      	cmp	ip, r1
 8008ed0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ed4:	d8e7      	bhi.n	8008ea6 <__multiply+0xfe>
 8008ed6:	9a01      	ldr	r2, [sp, #4]
 8008ed8:	50b4      	str	r4, [r6, r2]
 8008eda:	3604      	adds	r6, #4
 8008edc:	e7a3      	b.n	8008e26 <__multiply+0x7e>
 8008ede:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1a5      	bne.n	8008e32 <__multiply+0x8a>
 8008ee6:	3f01      	subs	r7, #1
 8008ee8:	e7a1      	b.n	8008e2e <__multiply+0x86>
 8008eea:	bf00      	nop
 8008eec:	0800a043 	.word	0x0800a043
 8008ef0:	0800a054 	.word	0x0800a054

08008ef4 <__pow5mult>:
 8008ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef8:	4615      	mov	r5, r2
 8008efa:	f012 0203 	ands.w	r2, r2, #3
 8008efe:	4606      	mov	r6, r0
 8008f00:	460f      	mov	r7, r1
 8008f02:	d007      	beq.n	8008f14 <__pow5mult+0x20>
 8008f04:	4c25      	ldr	r4, [pc, #148]	; (8008f9c <__pow5mult+0xa8>)
 8008f06:	3a01      	subs	r2, #1
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f0e:	f7ff fe9b 	bl	8008c48 <__multadd>
 8008f12:	4607      	mov	r7, r0
 8008f14:	10ad      	asrs	r5, r5, #2
 8008f16:	d03d      	beq.n	8008f94 <__pow5mult+0xa0>
 8008f18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f1a:	b97c      	cbnz	r4, 8008f3c <__pow5mult+0x48>
 8008f1c:	2010      	movs	r0, #16
 8008f1e:	f7ff fe1b 	bl	8008b58 <malloc>
 8008f22:	4602      	mov	r2, r0
 8008f24:	6270      	str	r0, [r6, #36]	; 0x24
 8008f26:	b928      	cbnz	r0, 8008f34 <__pow5mult+0x40>
 8008f28:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <__pow5mult+0xac>)
 8008f2a:	481e      	ldr	r0, [pc, #120]	; (8008fa4 <__pow5mult+0xb0>)
 8008f2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f30:	f000 fa70 	bl	8009414 <__assert_func>
 8008f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f38:	6004      	str	r4, [r0, #0]
 8008f3a:	60c4      	str	r4, [r0, #12]
 8008f3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f44:	b94c      	cbnz	r4, 8008f5a <__pow5mult+0x66>
 8008f46:	f240 2171 	movw	r1, #625	; 0x271
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7ff ff16 	bl	8008d7c <__i2b>
 8008f50:	2300      	movs	r3, #0
 8008f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f56:	4604      	mov	r4, r0
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	f04f 0900 	mov.w	r9, #0
 8008f5e:	07eb      	lsls	r3, r5, #31
 8008f60:	d50a      	bpl.n	8008f78 <__pow5mult+0x84>
 8008f62:	4639      	mov	r1, r7
 8008f64:	4622      	mov	r2, r4
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff ff1e 	bl	8008da8 <__multiply>
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4680      	mov	r8, r0
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff fe47 	bl	8008c04 <_Bfree>
 8008f76:	4647      	mov	r7, r8
 8008f78:	106d      	asrs	r5, r5, #1
 8008f7a:	d00b      	beq.n	8008f94 <__pow5mult+0xa0>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	b938      	cbnz	r0, 8008f90 <__pow5mult+0x9c>
 8008f80:	4622      	mov	r2, r4
 8008f82:	4621      	mov	r1, r4
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff ff0f 	bl	8008da8 <__multiply>
 8008f8a:	6020      	str	r0, [r4, #0]
 8008f8c:	f8c0 9000 	str.w	r9, [r0]
 8008f90:	4604      	mov	r4, r0
 8008f92:	e7e4      	b.n	8008f5e <__pow5mult+0x6a>
 8008f94:	4638      	mov	r0, r7
 8008f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9a:	bf00      	nop
 8008f9c:	0800a1a8 	.word	0x0800a1a8
 8008fa0:	08009fcd 	.word	0x08009fcd
 8008fa4:	0800a054 	.word	0x0800a054

08008fa8 <__lshift>:
 8008fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	460c      	mov	r4, r1
 8008fae:	6849      	ldr	r1, [r1, #4]
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	4607      	mov	r7, r0
 8008fba:	4691      	mov	r9, r2
 8008fbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fc0:	f108 0601 	add.w	r6, r8, #1
 8008fc4:	42b3      	cmp	r3, r6
 8008fc6:	db0b      	blt.n	8008fe0 <__lshift+0x38>
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff fddb 	bl	8008b84 <_Balloc>
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b948      	cbnz	r0, 8008fe6 <__lshift+0x3e>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4b28      	ldr	r3, [pc, #160]	; (8009078 <__lshift+0xd0>)
 8008fd6:	4829      	ldr	r0, [pc, #164]	; (800907c <__lshift+0xd4>)
 8008fd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008fdc:	f000 fa1a 	bl	8009414 <__assert_func>
 8008fe0:	3101      	adds	r1, #1
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__lshift+0x1c>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f100 0114 	add.w	r1, r0, #20
 8008fec:	f100 0210 	add.w	r2, r0, #16
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	4553      	cmp	r3, sl
 8008ff4:	db33      	blt.n	800905e <__lshift+0xb6>
 8008ff6:	6920      	ldr	r0, [r4, #16]
 8008ff8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ffc:	f104 0314 	add.w	r3, r4, #20
 8009000:	f019 091f 	ands.w	r9, r9, #31
 8009004:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009008:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800900c:	d02b      	beq.n	8009066 <__lshift+0xbe>
 800900e:	f1c9 0e20 	rsb	lr, r9, #32
 8009012:	468a      	mov	sl, r1
 8009014:	2200      	movs	r2, #0
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	fa00 f009 	lsl.w	r0, r0, r9
 800901c:	4302      	orrs	r2, r0
 800901e:	f84a 2b04 	str.w	r2, [sl], #4
 8009022:	f853 2b04 	ldr.w	r2, [r3], #4
 8009026:	459c      	cmp	ip, r3
 8009028:	fa22 f20e 	lsr.w	r2, r2, lr
 800902c:	d8f3      	bhi.n	8009016 <__lshift+0x6e>
 800902e:	ebac 0304 	sub.w	r3, ip, r4
 8009032:	3b15      	subs	r3, #21
 8009034:	f023 0303 	bic.w	r3, r3, #3
 8009038:	3304      	adds	r3, #4
 800903a:	f104 0015 	add.w	r0, r4, #21
 800903e:	4584      	cmp	ip, r0
 8009040:	bf38      	it	cc
 8009042:	2304      	movcc	r3, #4
 8009044:	50ca      	str	r2, [r1, r3]
 8009046:	b10a      	cbz	r2, 800904c <__lshift+0xa4>
 8009048:	f108 0602 	add.w	r6, r8, #2
 800904c:	3e01      	subs	r6, #1
 800904e:	4638      	mov	r0, r7
 8009050:	612e      	str	r6, [r5, #16]
 8009052:	4621      	mov	r1, r4
 8009054:	f7ff fdd6 	bl	8008c04 <_Bfree>
 8009058:	4628      	mov	r0, r5
 800905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009062:	3301      	adds	r3, #1
 8009064:	e7c5      	b.n	8008ff2 <__lshift+0x4a>
 8009066:	3904      	subs	r1, #4
 8009068:	f853 2b04 	ldr.w	r2, [r3], #4
 800906c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009070:	459c      	cmp	ip, r3
 8009072:	d8f9      	bhi.n	8009068 <__lshift+0xc0>
 8009074:	e7ea      	b.n	800904c <__lshift+0xa4>
 8009076:	bf00      	nop
 8009078:	0800a043 	.word	0x0800a043
 800907c:	0800a054 	.word	0x0800a054

08009080 <__mcmp>:
 8009080:	b530      	push	{r4, r5, lr}
 8009082:	6902      	ldr	r2, [r0, #16]
 8009084:	690c      	ldr	r4, [r1, #16]
 8009086:	1b12      	subs	r2, r2, r4
 8009088:	d10e      	bne.n	80090a8 <__mcmp+0x28>
 800908a:	f100 0314 	add.w	r3, r0, #20
 800908e:	3114      	adds	r1, #20
 8009090:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009094:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009098:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800909c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090a0:	42a5      	cmp	r5, r4
 80090a2:	d003      	beq.n	80090ac <__mcmp+0x2c>
 80090a4:	d305      	bcc.n	80090b2 <__mcmp+0x32>
 80090a6:	2201      	movs	r2, #1
 80090a8:	4610      	mov	r0, r2
 80090aa:	bd30      	pop	{r4, r5, pc}
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d3f3      	bcc.n	8009098 <__mcmp+0x18>
 80090b0:	e7fa      	b.n	80090a8 <__mcmp+0x28>
 80090b2:	f04f 32ff 	mov.w	r2, #4294967295
 80090b6:	e7f7      	b.n	80090a8 <__mcmp+0x28>

080090b8 <__mdiff>:
 80090b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	4606      	mov	r6, r0
 80090c0:	4611      	mov	r1, r2
 80090c2:	4620      	mov	r0, r4
 80090c4:	4617      	mov	r7, r2
 80090c6:	f7ff ffdb 	bl	8009080 <__mcmp>
 80090ca:	1e05      	subs	r5, r0, #0
 80090cc:	d110      	bne.n	80090f0 <__mdiff+0x38>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff fd57 	bl	8008b84 <_Balloc>
 80090d6:	b930      	cbnz	r0, 80090e6 <__mdiff+0x2e>
 80090d8:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <__mdiff+0x108>)
 80090da:	4602      	mov	r2, r0
 80090dc:	f240 2132 	movw	r1, #562	; 0x232
 80090e0:	4838      	ldr	r0, [pc, #224]	; (80091c4 <__mdiff+0x10c>)
 80090e2:	f000 f997 	bl	8009414 <__assert_func>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	bfa4      	itt	ge
 80090f2:	463b      	movge	r3, r7
 80090f4:	4627      	movge	r7, r4
 80090f6:	4630      	mov	r0, r6
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	bfa6      	itte	ge
 80090fc:	461c      	movge	r4, r3
 80090fe:	2500      	movge	r5, #0
 8009100:	2501      	movlt	r5, #1
 8009102:	f7ff fd3f 	bl	8008b84 <_Balloc>
 8009106:	b920      	cbnz	r0, 8009112 <__mdiff+0x5a>
 8009108:	4b2d      	ldr	r3, [pc, #180]	; (80091c0 <__mdiff+0x108>)
 800910a:	4602      	mov	r2, r0
 800910c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009110:	e7e6      	b.n	80090e0 <__mdiff+0x28>
 8009112:	693e      	ldr	r6, [r7, #16]
 8009114:	60c5      	str	r5, [r0, #12]
 8009116:	6925      	ldr	r5, [r4, #16]
 8009118:	f107 0114 	add.w	r1, r7, #20
 800911c:	f104 0914 	add.w	r9, r4, #20
 8009120:	f100 0e14 	add.w	lr, r0, #20
 8009124:	f107 0210 	add.w	r2, r7, #16
 8009128:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800912c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009130:	46f2      	mov	sl, lr
 8009132:	2700      	movs	r7, #0
 8009134:	f859 3b04 	ldr.w	r3, [r9], #4
 8009138:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800913c:	fa1f f883 	uxth.w	r8, r3
 8009140:	fa17 f78b 	uxtah	r7, r7, fp
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	eba7 0808 	sub.w	r8, r7, r8
 800914a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800914e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009152:	fa1f f888 	uxth.w	r8, r8
 8009156:	141f      	asrs	r7, r3, #16
 8009158:	454d      	cmp	r5, r9
 800915a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800915e:	f84a 3b04 	str.w	r3, [sl], #4
 8009162:	d8e7      	bhi.n	8009134 <__mdiff+0x7c>
 8009164:	1b2b      	subs	r3, r5, r4
 8009166:	3b15      	subs	r3, #21
 8009168:	f023 0303 	bic.w	r3, r3, #3
 800916c:	3304      	adds	r3, #4
 800916e:	3415      	adds	r4, #21
 8009170:	42a5      	cmp	r5, r4
 8009172:	bf38      	it	cc
 8009174:	2304      	movcc	r3, #4
 8009176:	4419      	add	r1, r3
 8009178:	4473      	add	r3, lr
 800917a:	469e      	mov	lr, r3
 800917c:	460d      	mov	r5, r1
 800917e:	4565      	cmp	r5, ip
 8009180:	d30e      	bcc.n	80091a0 <__mdiff+0xe8>
 8009182:	f10c 0203 	add.w	r2, ip, #3
 8009186:	1a52      	subs	r2, r2, r1
 8009188:	f022 0203 	bic.w	r2, r2, #3
 800918c:	3903      	subs	r1, #3
 800918e:	458c      	cmp	ip, r1
 8009190:	bf38      	it	cc
 8009192:	2200      	movcc	r2, #0
 8009194:	441a      	add	r2, r3
 8009196:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800919a:	b17b      	cbz	r3, 80091bc <__mdiff+0x104>
 800919c:	6106      	str	r6, [r0, #16]
 800919e:	e7a5      	b.n	80090ec <__mdiff+0x34>
 80091a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80091a4:	fa17 f488 	uxtah	r4, r7, r8
 80091a8:	1422      	asrs	r2, r4, #16
 80091aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80091ae:	b2a4      	uxth	r4, r4
 80091b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091b4:	f84e 4b04 	str.w	r4, [lr], #4
 80091b8:	1417      	asrs	r7, r2, #16
 80091ba:	e7e0      	b.n	800917e <__mdiff+0xc6>
 80091bc:	3e01      	subs	r6, #1
 80091be:	e7ea      	b.n	8009196 <__mdiff+0xde>
 80091c0:	0800a043 	.word	0x0800a043
 80091c4:	0800a054 	.word	0x0800a054

080091c8 <__d2b>:
 80091c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	4689      	mov	r9, r1
 80091ce:	2101      	movs	r1, #1
 80091d0:	ec57 6b10 	vmov	r6, r7, d0
 80091d4:	4690      	mov	r8, r2
 80091d6:	f7ff fcd5 	bl	8008b84 <_Balloc>
 80091da:	4604      	mov	r4, r0
 80091dc:	b930      	cbnz	r0, 80091ec <__d2b+0x24>
 80091de:	4602      	mov	r2, r0
 80091e0:	4b25      	ldr	r3, [pc, #148]	; (8009278 <__d2b+0xb0>)
 80091e2:	4826      	ldr	r0, [pc, #152]	; (800927c <__d2b+0xb4>)
 80091e4:	f240 310a 	movw	r1, #778	; 0x30a
 80091e8:	f000 f914 	bl	8009414 <__assert_func>
 80091ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091f4:	bb35      	cbnz	r5, 8009244 <__d2b+0x7c>
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	d028      	beq.n	800924e <__d2b+0x86>
 80091fc:	4668      	mov	r0, sp
 80091fe:	9600      	str	r6, [sp, #0]
 8009200:	f7ff fd8c 	bl	8008d1c <__lo0bits>
 8009204:	9900      	ldr	r1, [sp, #0]
 8009206:	b300      	cbz	r0, 800924a <__d2b+0x82>
 8009208:	9a01      	ldr	r2, [sp, #4]
 800920a:	f1c0 0320 	rsb	r3, r0, #32
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	430b      	orrs	r3, r1
 8009214:	40c2      	lsrs	r2, r0
 8009216:	6163      	str	r3, [r4, #20]
 8009218:	9201      	str	r2, [sp, #4]
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	61a3      	str	r3, [r4, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf14      	ite	ne
 8009222:	2202      	movne	r2, #2
 8009224:	2201      	moveq	r2, #1
 8009226:	6122      	str	r2, [r4, #16]
 8009228:	b1d5      	cbz	r5, 8009260 <__d2b+0x98>
 800922a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800922e:	4405      	add	r5, r0
 8009230:	f8c9 5000 	str.w	r5, [r9]
 8009234:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009238:	f8c8 0000 	str.w	r0, [r8]
 800923c:	4620      	mov	r0, r4
 800923e:	b003      	add	sp, #12
 8009240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009248:	e7d5      	b.n	80091f6 <__d2b+0x2e>
 800924a:	6161      	str	r1, [r4, #20]
 800924c:	e7e5      	b.n	800921a <__d2b+0x52>
 800924e:	a801      	add	r0, sp, #4
 8009250:	f7ff fd64 	bl	8008d1c <__lo0bits>
 8009254:	9b01      	ldr	r3, [sp, #4]
 8009256:	6163      	str	r3, [r4, #20]
 8009258:	2201      	movs	r2, #1
 800925a:	6122      	str	r2, [r4, #16]
 800925c:	3020      	adds	r0, #32
 800925e:	e7e3      	b.n	8009228 <__d2b+0x60>
 8009260:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009264:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009268:	f8c9 0000 	str.w	r0, [r9]
 800926c:	6918      	ldr	r0, [r3, #16]
 800926e:	f7ff fd35 	bl	8008cdc <__hi0bits>
 8009272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009276:	e7df      	b.n	8009238 <__d2b+0x70>
 8009278:	0800a043 	.word	0x0800a043
 800927c:	0800a054 	.word	0x0800a054

08009280 <_calloc_r>:
 8009280:	b513      	push	{r0, r1, r4, lr}
 8009282:	434a      	muls	r2, r1
 8009284:	4611      	mov	r1, r2
 8009286:	9201      	str	r2, [sp, #4]
 8009288:	f000 f85a 	bl	8009340 <_malloc_r>
 800928c:	4604      	mov	r4, r0
 800928e:	b118      	cbz	r0, 8009298 <_calloc_r+0x18>
 8009290:	9a01      	ldr	r2, [sp, #4]
 8009292:	2100      	movs	r1, #0
 8009294:	f7fe f972 	bl	800757c <memset>
 8009298:	4620      	mov	r0, r4
 800929a:	b002      	add	sp, #8
 800929c:	bd10      	pop	{r4, pc}
	...

080092a0 <_free_r>:
 80092a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092a2:	2900      	cmp	r1, #0
 80092a4:	d048      	beq.n	8009338 <_free_r+0x98>
 80092a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092aa:	9001      	str	r0, [sp, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f1a1 0404 	sub.w	r4, r1, #4
 80092b2:	bfb8      	it	lt
 80092b4:	18e4      	addlt	r4, r4, r3
 80092b6:	f000 f8ef 	bl	8009498 <__malloc_lock>
 80092ba:	4a20      	ldr	r2, [pc, #128]	; (800933c <_free_r+0x9c>)
 80092bc:	9801      	ldr	r0, [sp, #4]
 80092be:	6813      	ldr	r3, [r2, #0]
 80092c0:	4615      	mov	r5, r2
 80092c2:	b933      	cbnz	r3, 80092d2 <_free_r+0x32>
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6014      	str	r4, [r2, #0]
 80092c8:	b003      	add	sp, #12
 80092ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ce:	f000 b8e9 	b.w	80094a4 <__malloc_unlock>
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	d90b      	bls.n	80092ee <_free_r+0x4e>
 80092d6:	6821      	ldr	r1, [r4, #0]
 80092d8:	1862      	adds	r2, r4, r1
 80092da:	4293      	cmp	r3, r2
 80092dc:	bf04      	itt	eq
 80092de:	681a      	ldreq	r2, [r3, #0]
 80092e0:	685b      	ldreq	r3, [r3, #4]
 80092e2:	6063      	str	r3, [r4, #4]
 80092e4:	bf04      	itt	eq
 80092e6:	1852      	addeq	r2, r2, r1
 80092e8:	6022      	streq	r2, [r4, #0]
 80092ea:	602c      	str	r4, [r5, #0]
 80092ec:	e7ec      	b.n	80092c8 <_free_r+0x28>
 80092ee:	461a      	mov	r2, r3
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	b10b      	cbz	r3, 80092f8 <_free_r+0x58>
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	d9fa      	bls.n	80092ee <_free_r+0x4e>
 80092f8:	6811      	ldr	r1, [r2, #0]
 80092fa:	1855      	adds	r5, r2, r1
 80092fc:	42a5      	cmp	r5, r4
 80092fe:	d10b      	bne.n	8009318 <_free_r+0x78>
 8009300:	6824      	ldr	r4, [r4, #0]
 8009302:	4421      	add	r1, r4
 8009304:	1854      	adds	r4, r2, r1
 8009306:	42a3      	cmp	r3, r4
 8009308:	6011      	str	r1, [r2, #0]
 800930a:	d1dd      	bne.n	80092c8 <_free_r+0x28>
 800930c:	681c      	ldr	r4, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	6053      	str	r3, [r2, #4]
 8009312:	4421      	add	r1, r4
 8009314:	6011      	str	r1, [r2, #0]
 8009316:	e7d7      	b.n	80092c8 <_free_r+0x28>
 8009318:	d902      	bls.n	8009320 <_free_r+0x80>
 800931a:	230c      	movs	r3, #12
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	e7d3      	b.n	80092c8 <_free_r+0x28>
 8009320:	6825      	ldr	r5, [r4, #0]
 8009322:	1961      	adds	r1, r4, r5
 8009324:	428b      	cmp	r3, r1
 8009326:	bf04      	itt	eq
 8009328:	6819      	ldreq	r1, [r3, #0]
 800932a:	685b      	ldreq	r3, [r3, #4]
 800932c:	6063      	str	r3, [r4, #4]
 800932e:	bf04      	itt	eq
 8009330:	1949      	addeq	r1, r1, r5
 8009332:	6021      	streq	r1, [r4, #0]
 8009334:	6054      	str	r4, [r2, #4]
 8009336:	e7c7      	b.n	80092c8 <_free_r+0x28>
 8009338:	b003      	add	sp, #12
 800933a:	bd30      	pop	{r4, r5, pc}
 800933c:	20000dfc 	.word	0x20000dfc

08009340 <_malloc_r>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	1ccd      	adds	r5, r1, #3
 8009344:	f025 0503 	bic.w	r5, r5, #3
 8009348:	3508      	adds	r5, #8
 800934a:	2d0c      	cmp	r5, #12
 800934c:	bf38      	it	cc
 800934e:	250c      	movcc	r5, #12
 8009350:	2d00      	cmp	r5, #0
 8009352:	4606      	mov	r6, r0
 8009354:	db01      	blt.n	800935a <_malloc_r+0x1a>
 8009356:	42a9      	cmp	r1, r5
 8009358:	d903      	bls.n	8009362 <_malloc_r+0x22>
 800935a:	230c      	movs	r3, #12
 800935c:	6033      	str	r3, [r6, #0]
 800935e:	2000      	movs	r0, #0
 8009360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009362:	f000 f899 	bl	8009498 <__malloc_lock>
 8009366:	4921      	ldr	r1, [pc, #132]	; (80093ec <_malloc_r+0xac>)
 8009368:	680a      	ldr	r2, [r1, #0]
 800936a:	4614      	mov	r4, r2
 800936c:	b99c      	cbnz	r4, 8009396 <_malloc_r+0x56>
 800936e:	4f20      	ldr	r7, [pc, #128]	; (80093f0 <_malloc_r+0xb0>)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	b923      	cbnz	r3, 800937e <_malloc_r+0x3e>
 8009374:	4621      	mov	r1, r4
 8009376:	4630      	mov	r0, r6
 8009378:	f000 f83c 	bl	80093f4 <_sbrk_r>
 800937c:	6038      	str	r0, [r7, #0]
 800937e:	4629      	mov	r1, r5
 8009380:	4630      	mov	r0, r6
 8009382:	f000 f837 	bl	80093f4 <_sbrk_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d123      	bne.n	80093d2 <_malloc_r+0x92>
 800938a:	230c      	movs	r3, #12
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	4630      	mov	r0, r6
 8009390:	f000 f888 	bl	80094a4 <__malloc_unlock>
 8009394:	e7e3      	b.n	800935e <_malloc_r+0x1e>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	1b5b      	subs	r3, r3, r5
 800939a:	d417      	bmi.n	80093cc <_malloc_r+0x8c>
 800939c:	2b0b      	cmp	r3, #11
 800939e:	d903      	bls.n	80093a8 <_malloc_r+0x68>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	441c      	add	r4, r3
 80093a4:	6025      	str	r5, [r4, #0]
 80093a6:	e004      	b.n	80093b2 <_malloc_r+0x72>
 80093a8:	6863      	ldr	r3, [r4, #4]
 80093aa:	42a2      	cmp	r2, r4
 80093ac:	bf0c      	ite	eq
 80093ae:	600b      	streq	r3, [r1, #0]
 80093b0:	6053      	strne	r3, [r2, #4]
 80093b2:	4630      	mov	r0, r6
 80093b4:	f000 f876 	bl	80094a4 <__malloc_unlock>
 80093b8:	f104 000b 	add.w	r0, r4, #11
 80093bc:	1d23      	adds	r3, r4, #4
 80093be:	f020 0007 	bic.w	r0, r0, #7
 80093c2:	1ac2      	subs	r2, r0, r3
 80093c4:	d0cc      	beq.n	8009360 <_malloc_r+0x20>
 80093c6:	1a1b      	subs	r3, r3, r0
 80093c8:	50a3      	str	r3, [r4, r2]
 80093ca:	e7c9      	b.n	8009360 <_malloc_r+0x20>
 80093cc:	4622      	mov	r2, r4
 80093ce:	6864      	ldr	r4, [r4, #4]
 80093d0:	e7cc      	b.n	800936c <_malloc_r+0x2c>
 80093d2:	1cc4      	adds	r4, r0, #3
 80093d4:	f024 0403 	bic.w	r4, r4, #3
 80093d8:	42a0      	cmp	r0, r4
 80093da:	d0e3      	beq.n	80093a4 <_malloc_r+0x64>
 80093dc:	1a21      	subs	r1, r4, r0
 80093de:	4630      	mov	r0, r6
 80093e0:	f000 f808 	bl	80093f4 <_sbrk_r>
 80093e4:	3001      	adds	r0, #1
 80093e6:	d1dd      	bne.n	80093a4 <_malloc_r+0x64>
 80093e8:	e7cf      	b.n	800938a <_malloc_r+0x4a>
 80093ea:	bf00      	nop
 80093ec:	20000dfc 	.word	0x20000dfc
 80093f0:	20000e00 	.word	0x20000e00

080093f4 <_sbrk_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d06      	ldr	r5, [pc, #24]	; (8009410 <_sbrk_r+0x1c>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f9 fa9c 	bl	800293c <_sbrk>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_sbrk_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_sbrk_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20001198 	.word	0x20001198

08009414 <__assert_func>:
 8009414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009416:	4614      	mov	r4, r2
 8009418:	461a      	mov	r2, r3
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <__assert_func+0x2c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4605      	mov	r5, r0
 8009420:	68d8      	ldr	r0, [r3, #12]
 8009422:	b14c      	cbz	r4, 8009438 <__assert_func+0x24>
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <__assert_func+0x30>)
 8009426:	9100      	str	r1, [sp, #0]
 8009428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800942c:	4906      	ldr	r1, [pc, #24]	; (8009448 <__assert_func+0x34>)
 800942e:	462b      	mov	r3, r5
 8009430:	f000 f80e 	bl	8009450 <fiprintf>
 8009434:	f000 fa64 	bl	8009900 <abort>
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <__assert_func+0x38>)
 800943a:	461c      	mov	r4, r3
 800943c:	e7f3      	b.n	8009426 <__assert_func+0x12>
 800943e:	bf00      	nop
 8009440:	20000010 	.word	0x20000010
 8009444:	0800a1b4 	.word	0x0800a1b4
 8009448:	0800a1c1 	.word	0x0800a1c1
 800944c:	0800a1ef 	.word	0x0800a1ef

08009450 <fiprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b503      	push	{r0, r1, lr}
 8009454:	4601      	mov	r1, r0
 8009456:	ab03      	add	r3, sp, #12
 8009458:	4805      	ldr	r0, [pc, #20]	; (8009470 <fiprintf+0x20>)
 800945a:	f853 2b04 	ldr.w	r2, [r3], #4
 800945e:	6800      	ldr	r0, [r0, #0]
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	f000 f84f 	bl	8009504 <_vfiprintf_r>
 8009466:	b002      	add	sp, #8
 8009468:	f85d eb04 	ldr.w	lr, [sp], #4
 800946c:	b003      	add	sp, #12
 800946e:	4770      	bx	lr
 8009470:	20000010 	.word	0x20000010

08009474 <__ascii_mbtowc>:
 8009474:	b082      	sub	sp, #8
 8009476:	b901      	cbnz	r1, 800947a <__ascii_mbtowc+0x6>
 8009478:	a901      	add	r1, sp, #4
 800947a:	b142      	cbz	r2, 800948e <__ascii_mbtowc+0x1a>
 800947c:	b14b      	cbz	r3, 8009492 <__ascii_mbtowc+0x1e>
 800947e:	7813      	ldrb	r3, [r2, #0]
 8009480:	600b      	str	r3, [r1, #0]
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	1e10      	subs	r0, r2, #0
 8009486:	bf18      	it	ne
 8009488:	2001      	movne	r0, #1
 800948a:	b002      	add	sp, #8
 800948c:	4770      	bx	lr
 800948e:	4610      	mov	r0, r2
 8009490:	e7fb      	b.n	800948a <__ascii_mbtowc+0x16>
 8009492:	f06f 0001 	mvn.w	r0, #1
 8009496:	e7f8      	b.n	800948a <__ascii_mbtowc+0x16>

08009498 <__malloc_lock>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__malloc_lock+0x8>)
 800949a:	f000 bbf1 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 800949e:	bf00      	nop
 80094a0:	200011a0 	.word	0x200011a0

080094a4 <__malloc_unlock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_unlock+0x8>)
 80094a6:	f000 bbec 	b.w	8009c82 <__retarget_lock_release_recursive>
 80094aa:	bf00      	nop
 80094ac:	200011a0 	.word	0x200011a0

080094b0 <__sfputc_r>:
 80094b0:	6893      	ldr	r3, [r2, #8]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	b410      	push	{r4}
 80094b8:	6093      	str	r3, [r2, #8]
 80094ba:	da08      	bge.n	80094ce <__sfputc_r+0x1e>
 80094bc:	6994      	ldr	r4, [r2, #24]
 80094be:	42a3      	cmp	r3, r4
 80094c0:	db01      	blt.n	80094c6 <__sfputc_r+0x16>
 80094c2:	290a      	cmp	r1, #10
 80094c4:	d103      	bne.n	80094ce <__sfputc_r+0x1e>
 80094c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ca:	f000 b94b 	b.w	8009764 <__swbuf_r>
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	1c58      	adds	r0, r3, #1
 80094d2:	6010      	str	r0, [r2, #0]
 80094d4:	7019      	strb	r1, [r3, #0]
 80094d6:	4608      	mov	r0, r1
 80094d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094dc:	4770      	bx	lr

080094de <__sfputs_r>:
 80094de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e0:	4606      	mov	r6, r0
 80094e2:	460f      	mov	r7, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	18d5      	adds	r5, r2, r3
 80094e8:	42ac      	cmp	r4, r5
 80094ea:	d101      	bne.n	80094f0 <__sfputs_r+0x12>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e007      	b.n	8009500 <__sfputs_r+0x22>
 80094f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f4:	463a      	mov	r2, r7
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff ffda 	bl	80094b0 <__sfputc_r>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d1f3      	bne.n	80094e8 <__sfputs_r+0xa>
 8009500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009504 <_vfiprintf_r>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	460d      	mov	r5, r1
 800950a:	b09d      	sub	sp, #116	; 0x74
 800950c:	4614      	mov	r4, r2
 800950e:	4698      	mov	r8, r3
 8009510:	4606      	mov	r6, r0
 8009512:	b118      	cbz	r0, 800951c <_vfiprintf_r+0x18>
 8009514:	6983      	ldr	r3, [r0, #24]
 8009516:	b90b      	cbnz	r3, 800951c <_vfiprintf_r+0x18>
 8009518:	f000 fb14 	bl	8009b44 <__sinit>
 800951c:	4b89      	ldr	r3, [pc, #548]	; (8009744 <_vfiprintf_r+0x240>)
 800951e:	429d      	cmp	r5, r3
 8009520:	d11b      	bne.n	800955a <_vfiprintf_r+0x56>
 8009522:	6875      	ldr	r5, [r6, #4]
 8009524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009526:	07d9      	lsls	r1, r3, #31
 8009528:	d405      	bmi.n	8009536 <_vfiprintf_r+0x32>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	059a      	lsls	r2, r3, #22
 800952e:	d402      	bmi.n	8009536 <_vfiprintf_r+0x32>
 8009530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009532:	f000 fba5 	bl	8009c80 <__retarget_lock_acquire_recursive>
 8009536:	89ab      	ldrh	r3, [r5, #12]
 8009538:	071b      	lsls	r3, r3, #28
 800953a:	d501      	bpl.n	8009540 <_vfiprintf_r+0x3c>
 800953c:	692b      	ldr	r3, [r5, #16]
 800953e:	b9eb      	cbnz	r3, 800957c <_vfiprintf_r+0x78>
 8009540:	4629      	mov	r1, r5
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f96e 	bl	8009824 <__swsetup_r>
 8009548:	b1c0      	cbz	r0, 800957c <_vfiprintf_r+0x78>
 800954a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954c:	07dc      	lsls	r4, r3, #31
 800954e:	d50e      	bpl.n	800956e <_vfiprintf_r+0x6a>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	b01d      	add	sp, #116	; 0x74
 8009556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955a:	4b7b      	ldr	r3, [pc, #492]	; (8009748 <_vfiprintf_r+0x244>)
 800955c:	429d      	cmp	r5, r3
 800955e:	d101      	bne.n	8009564 <_vfiprintf_r+0x60>
 8009560:	68b5      	ldr	r5, [r6, #8]
 8009562:	e7df      	b.n	8009524 <_vfiprintf_r+0x20>
 8009564:	4b79      	ldr	r3, [pc, #484]	; (800974c <_vfiprintf_r+0x248>)
 8009566:	429d      	cmp	r5, r3
 8009568:	bf08      	it	eq
 800956a:	68f5      	ldreq	r5, [r6, #12]
 800956c:	e7da      	b.n	8009524 <_vfiprintf_r+0x20>
 800956e:	89ab      	ldrh	r3, [r5, #12]
 8009570:	0598      	lsls	r0, r3, #22
 8009572:	d4ed      	bmi.n	8009550 <_vfiprintf_r+0x4c>
 8009574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009576:	f000 fb84 	bl	8009c82 <__retarget_lock_release_recursive>
 800957a:	e7e9      	b.n	8009550 <_vfiprintf_r+0x4c>
 800957c:	2300      	movs	r3, #0
 800957e:	9309      	str	r3, [sp, #36]	; 0x24
 8009580:	2320      	movs	r3, #32
 8009582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009586:	f8cd 800c 	str.w	r8, [sp, #12]
 800958a:	2330      	movs	r3, #48	; 0x30
 800958c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009750 <_vfiprintf_r+0x24c>
 8009590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009594:	f04f 0901 	mov.w	r9, #1
 8009598:	4623      	mov	r3, r4
 800959a:	469a      	mov	sl, r3
 800959c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a0:	b10a      	cbz	r2, 80095a6 <_vfiprintf_r+0xa2>
 80095a2:	2a25      	cmp	r2, #37	; 0x25
 80095a4:	d1f9      	bne.n	800959a <_vfiprintf_r+0x96>
 80095a6:	ebba 0b04 	subs.w	fp, sl, r4
 80095aa:	d00b      	beq.n	80095c4 <_vfiprintf_r+0xc0>
 80095ac:	465b      	mov	r3, fp
 80095ae:	4622      	mov	r2, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff93 	bl	80094de <__sfputs_r>
 80095b8:	3001      	adds	r0, #1
 80095ba:	f000 80aa 	beq.w	8009712 <_vfiprintf_r+0x20e>
 80095be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c0:	445a      	add	r2, fp
 80095c2:	9209      	str	r2, [sp, #36]	; 0x24
 80095c4:	f89a 3000 	ldrb.w	r3, [sl]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 80a2 	beq.w	8009712 <_vfiprintf_r+0x20e>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d8:	f10a 0a01 	add.w	sl, sl, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095e4:	931a      	str	r3, [sp, #104]	; 0x68
 80095e6:	4654      	mov	r4, sl
 80095e8:	2205      	movs	r2, #5
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4858      	ldr	r0, [pc, #352]	; (8009750 <_vfiprintf_r+0x24c>)
 80095f0:	f7f6 fe1e 	bl	8000230 <memchr>
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	b9d8      	cbnz	r0, 8009630 <_vfiprintf_r+0x12c>
 80095f8:	06d1      	lsls	r1, r2, #27
 80095fa:	bf44      	itt	mi
 80095fc:	2320      	movmi	r3, #32
 80095fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009602:	0713      	lsls	r3, r2, #28
 8009604:	bf44      	itt	mi
 8009606:	232b      	movmi	r3, #43	; 0x2b
 8009608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800960c:	f89a 3000 	ldrb.w	r3, [sl]
 8009610:	2b2a      	cmp	r3, #42	; 0x2a
 8009612:	d015      	beq.n	8009640 <_vfiprintf_r+0x13c>
 8009614:	9a07      	ldr	r2, [sp, #28]
 8009616:	4654      	mov	r4, sl
 8009618:	2000      	movs	r0, #0
 800961a:	f04f 0c0a 	mov.w	ip, #10
 800961e:	4621      	mov	r1, r4
 8009620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009624:	3b30      	subs	r3, #48	; 0x30
 8009626:	2b09      	cmp	r3, #9
 8009628:	d94e      	bls.n	80096c8 <_vfiprintf_r+0x1c4>
 800962a:	b1b0      	cbz	r0, 800965a <_vfiprintf_r+0x156>
 800962c:	9207      	str	r2, [sp, #28]
 800962e:	e014      	b.n	800965a <_vfiprintf_r+0x156>
 8009630:	eba0 0308 	sub.w	r3, r0, r8
 8009634:	fa09 f303 	lsl.w	r3, r9, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	9304      	str	r3, [sp, #16]
 800963c:	46a2      	mov	sl, r4
 800963e:	e7d2      	b.n	80095e6 <_vfiprintf_r+0xe2>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	1d19      	adds	r1, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	9103      	str	r1, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbb      	ittet	lt
 800964c:	425b      	neglt	r3, r3
 800964e:	f042 0202 	orrlt.w	r2, r2, #2
 8009652:	9307      	strge	r3, [sp, #28]
 8009654:	9307      	strlt	r3, [sp, #28]
 8009656:	bfb8      	it	lt
 8009658:	9204      	strlt	r2, [sp, #16]
 800965a:	7823      	ldrb	r3, [r4, #0]
 800965c:	2b2e      	cmp	r3, #46	; 0x2e
 800965e:	d10c      	bne.n	800967a <_vfiprintf_r+0x176>
 8009660:	7863      	ldrb	r3, [r4, #1]
 8009662:	2b2a      	cmp	r3, #42	; 0x2a
 8009664:	d135      	bne.n	80096d2 <_vfiprintf_r+0x1ce>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9203      	str	r2, [sp, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfb8      	it	lt
 8009672:	f04f 33ff 	movlt.w	r3, #4294967295
 8009676:	3402      	adds	r4, #2
 8009678:	9305      	str	r3, [sp, #20]
 800967a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009760 <_vfiprintf_r+0x25c>
 800967e:	7821      	ldrb	r1, [r4, #0]
 8009680:	2203      	movs	r2, #3
 8009682:	4650      	mov	r0, sl
 8009684:	f7f6 fdd4 	bl	8000230 <memchr>
 8009688:	b140      	cbz	r0, 800969c <_vfiprintf_r+0x198>
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	eba0 000a 	sub.w	r0, r0, sl
 8009690:	fa03 f000 	lsl.w	r0, r3, r0
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	4303      	orrs	r3, r0
 8009698:	3401      	adds	r4, #1
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a0:	482c      	ldr	r0, [pc, #176]	; (8009754 <_vfiprintf_r+0x250>)
 80096a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096a6:	2206      	movs	r2, #6
 80096a8:	f7f6 fdc2 	bl	8000230 <memchr>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d03f      	beq.n	8009730 <_vfiprintf_r+0x22c>
 80096b0:	4b29      	ldr	r3, [pc, #164]	; (8009758 <_vfiprintf_r+0x254>)
 80096b2:	bb1b      	cbnz	r3, 80096fc <_vfiprintf_r+0x1f8>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	3307      	adds	r3, #7
 80096b8:	f023 0307 	bic.w	r3, r3, #7
 80096bc:	3308      	adds	r3, #8
 80096be:	9303      	str	r3, [sp, #12]
 80096c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c2:	443b      	add	r3, r7
 80096c4:	9309      	str	r3, [sp, #36]	; 0x24
 80096c6:	e767      	b.n	8009598 <_vfiprintf_r+0x94>
 80096c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096cc:	460c      	mov	r4, r1
 80096ce:	2001      	movs	r0, #1
 80096d0:	e7a5      	b.n	800961e <_vfiprintf_r+0x11a>
 80096d2:	2300      	movs	r3, #0
 80096d4:	3401      	adds	r4, #1
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	4619      	mov	r1, r3
 80096da:	f04f 0c0a 	mov.w	ip, #10
 80096de:	4620      	mov	r0, r4
 80096e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e4:	3a30      	subs	r2, #48	; 0x30
 80096e6:	2a09      	cmp	r2, #9
 80096e8:	d903      	bls.n	80096f2 <_vfiprintf_r+0x1ee>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0c5      	beq.n	800967a <_vfiprintf_r+0x176>
 80096ee:	9105      	str	r1, [sp, #20]
 80096f0:	e7c3      	b.n	800967a <_vfiprintf_r+0x176>
 80096f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f6:	4604      	mov	r4, r0
 80096f8:	2301      	movs	r3, #1
 80096fa:	e7f0      	b.n	80096de <_vfiprintf_r+0x1da>
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	462a      	mov	r2, r5
 8009702:	4b16      	ldr	r3, [pc, #88]	; (800975c <_vfiprintf_r+0x258>)
 8009704:	a904      	add	r1, sp, #16
 8009706:	4630      	mov	r0, r6
 8009708:	f7fd ffe0 	bl	80076cc <_printf_float>
 800970c:	4607      	mov	r7, r0
 800970e:	1c78      	adds	r0, r7, #1
 8009710:	d1d6      	bne.n	80096c0 <_vfiprintf_r+0x1bc>
 8009712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009714:	07d9      	lsls	r1, r3, #31
 8009716:	d405      	bmi.n	8009724 <_vfiprintf_r+0x220>
 8009718:	89ab      	ldrh	r3, [r5, #12]
 800971a:	059a      	lsls	r2, r3, #22
 800971c:	d402      	bmi.n	8009724 <_vfiprintf_r+0x220>
 800971e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009720:	f000 faaf 	bl	8009c82 <__retarget_lock_release_recursive>
 8009724:	89ab      	ldrh	r3, [r5, #12]
 8009726:	065b      	lsls	r3, r3, #25
 8009728:	f53f af12 	bmi.w	8009550 <_vfiprintf_r+0x4c>
 800972c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972e:	e711      	b.n	8009554 <_vfiprintf_r+0x50>
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4b09      	ldr	r3, [pc, #36]	; (800975c <_vfiprintf_r+0x258>)
 8009738:	a904      	add	r1, sp, #16
 800973a:	4630      	mov	r0, r6
 800973c:	f7fe fa6a 	bl	8007c14 <_printf_i>
 8009740:	e7e4      	b.n	800970c <_vfiprintf_r+0x208>
 8009742:	bf00      	nop
 8009744:	0800a32c 	.word	0x0800a32c
 8009748:	0800a34c 	.word	0x0800a34c
 800974c:	0800a30c 	.word	0x0800a30c
 8009750:	0800a1fa 	.word	0x0800a1fa
 8009754:	0800a204 	.word	0x0800a204
 8009758:	080076cd 	.word	0x080076cd
 800975c:	080094df 	.word	0x080094df
 8009760:	0800a200 	.word	0x0800a200

08009764 <__swbuf_r>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	460e      	mov	r6, r1
 8009768:	4614      	mov	r4, r2
 800976a:	4605      	mov	r5, r0
 800976c:	b118      	cbz	r0, 8009776 <__swbuf_r+0x12>
 800976e:	6983      	ldr	r3, [r0, #24]
 8009770:	b90b      	cbnz	r3, 8009776 <__swbuf_r+0x12>
 8009772:	f000 f9e7 	bl	8009b44 <__sinit>
 8009776:	4b21      	ldr	r3, [pc, #132]	; (80097fc <__swbuf_r+0x98>)
 8009778:	429c      	cmp	r4, r3
 800977a:	d12b      	bne.n	80097d4 <__swbuf_r+0x70>
 800977c:	686c      	ldr	r4, [r5, #4]
 800977e:	69a3      	ldr	r3, [r4, #24]
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	071a      	lsls	r2, r3, #28
 8009786:	d52f      	bpl.n	80097e8 <__swbuf_r+0x84>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	b36b      	cbz	r3, 80097e8 <__swbuf_r+0x84>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	1ac0      	subs	r0, r0, r3
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	b2f6      	uxtb	r6, r6
 8009796:	4283      	cmp	r3, r0
 8009798:	4637      	mov	r7, r6
 800979a:	dc04      	bgt.n	80097a6 <__swbuf_r+0x42>
 800979c:	4621      	mov	r1, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f93c 	bl	8009a1c <_fflush_r>
 80097a4:	bb30      	cbnz	r0, 80097f4 <__swbuf_r+0x90>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	6022      	str	r2, [r4, #0]
 80097b2:	701e      	strb	r6, [r3, #0]
 80097b4:	6963      	ldr	r3, [r4, #20]
 80097b6:	3001      	adds	r0, #1
 80097b8:	4283      	cmp	r3, r0
 80097ba:	d004      	beq.n	80097c6 <__swbuf_r+0x62>
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	07db      	lsls	r3, r3, #31
 80097c0:	d506      	bpl.n	80097d0 <__swbuf_r+0x6c>
 80097c2:	2e0a      	cmp	r6, #10
 80097c4:	d104      	bne.n	80097d0 <__swbuf_r+0x6c>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 f927 	bl	8009a1c <_fflush_r>
 80097ce:	b988      	cbnz	r0, 80097f4 <__swbuf_r+0x90>
 80097d0:	4638      	mov	r0, r7
 80097d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <__swbuf_r+0x9c>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d101      	bne.n	80097de <__swbuf_r+0x7a>
 80097da:	68ac      	ldr	r4, [r5, #8]
 80097dc:	e7cf      	b.n	800977e <__swbuf_r+0x1a>
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <__swbuf_r+0xa0>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	bf08      	it	eq
 80097e4:	68ec      	ldreq	r4, [r5, #12]
 80097e6:	e7ca      	b.n	800977e <__swbuf_r+0x1a>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f81a 	bl	8009824 <__swsetup_r>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d0cb      	beq.n	800978c <__swbuf_r+0x28>
 80097f4:	f04f 37ff 	mov.w	r7, #4294967295
 80097f8:	e7ea      	b.n	80097d0 <__swbuf_r+0x6c>
 80097fa:	bf00      	nop
 80097fc:	0800a32c 	.word	0x0800a32c
 8009800:	0800a34c 	.word	0x0800a34c
 8009804:	0800a30c 	.word	0x0800a30c

08009808 <__ascii_wctomb>:
 8009808:	b149      	cbz	r1, 800981e <__ascii_wctomb+0x16>
 800980a:	2aff      	cmp	r2, #255	; 0xff
 800980c:	bf85      	ittet	hi
 800980e:	238a      	movhi	r3, #138	; 0x8a
 8009810:	6003      	strhi	r3, [r0, #0]
 8009812:	700a      	strbls	r2, [r1, #0]
 8009814:	f04f 30ff 	movhi.w	r0, #4294967295
 8009818:	bf98      	it	ls
 800981a:	2001      	movls	r0, #1
 800981c:	4770      	bx	lr
 800981e:	4608      	mov	r0, r1
 8009820:	4770      	bx	lr
	...

08009824 <__swsetup_r>:
 8009824:	4b32      	ldr	r3, [pc, #200]	; (80098f0 <__swsetup_r+0xcc>)
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	4606      	mov	r6, r0
 800982c:	460c      	mov	r4, r1
 800982e:	b125      	cbz	r5, 800983a <__swsetup_r+0x16>
 8009830:	69ab      	ldr	r3, [r5, #24]
 8009832:	b913      	cbnz	r3, 800983a <__swsetup_r+0x16>
 8009834:	4628      	mov	r0, r5
 8009836:	f000 f985 	bl	8009b44 <__sinit>
 800983a:	4b2e      	ldr	r3, [pc, #184]	; (80098f4 <__swsetup_r+0xd0>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d10f      	bne.n	8009860 <__swsetup_r+0x3c>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	d42c      	bmi.n	80098a6 <__swsetup_r+0x82>
 800984c:	06dd      	lsls	r5, r3, #27
 800984e:	d411      	bmi.n	8009874 <__swsetup_r+0x50>
 8009850:	2309      	movs	r3, #9
 8009852:	6033      	str	r3, [r6, #0]
 8009854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	f04f 30ff 	mov.w	r0, #4294967295
 800985e:	e03e      	b.n	80098de <__swsetup_r+0xba>
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <__swsetup_r+0xd4>)
 8009862:	429c      	cmp	r4, r3
 8009864:	d101      	bne.n	800986a <__swsetup_r+0x46>
 8009866:	68ac      	ldr	r4, [r5, #8]
 8009868:	e7eb      	b.n	8009842 <__swsetup_r+0x1e>
 800986a:	4b24      	ldr	r3, [pc, #144]	; (80098fc <__swsetup_r+0xd8>)
 800986c:	429c      	cmp	r4, r3
 800986e:	bf08      	it	eq
 8009870:	68ec      	ldreq	r4, [r5, #12]
 8009872:	e7e6      	b.n	8009842 <__swsetup_r+0x1e>
 8009874:	0758      	lsls	r0, r3, #29
 8009876:	d512      	bpl.n	800989e <__swsetup_r+0x7a>
 8009878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987a:	b141      	cbz	r1, 800988e <__swsetup_r+0x6a>
 800987c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009880:	4299      	cmp	r1, r3
 8009882:	d002      	beq.n	800988a <__swsetup_r+0x66>
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fd0b 	bl	80092a0 <_free_r>
 800988a:	2300      	movs	r3, #0
 800988c:	6363      	str	r3, [r4, #52]	; 0x34
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	2300      	movs	r3, #0
 8009898:	6063      	str	r3, [r4, #4]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0308 	orr.w	r3, r3, #8
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	b94b      	cbnz	r3, 80098be <__swsetup_r+0x9a>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b4:	d003      	beq.n	80098be <__swsetup_r+0x9a>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 fa07 	bl	8009ccc <__smakebuf_r>
 80098be:	89a0      	ldrh	r0, [r4, #12]
 80098c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c4:	f010 0301 	ands.w	r3, r0, #1
 80098c8:	d00a      	beq.n	80098e0 <__swsetup_r+0xbc>
 80098ca:	2300      	movs	r3, #0
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	425b      	negs	r3, r3
 80098d2:	61a3      	str	r3, [r4, #24]
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b943      	cbnz	r3, 80098ea <__swsetup_r+0xc6>
 80098d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098dc:	d1ba      	bne.n	8009854 <__swsetup_r+0x30>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	0781      	lsls	r1, r0, #30
 80098e2:	bf58      	it	pl
 80098e4:	6963      	ldrpl	r3, [r4, #20]
 80098e6:	60a3      	str	r3, [r4, #8]
 80098e8:	e7f4      	b.n	80098d4 <__swsetup_r+0xb0>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7f7      	b.n	80098de <__swsetup_r+0xba>
 80098ee:	bf00      	nop
 80098f0:	20000010 	.word	0x20000010
 80098f4:	0800a32c 	.word	0x0800a32c
 80098f8:	0800a34c 	.word	0x0800a34c
 80098fc:	0800a30c 	.word	0x0800a30c

08009900 <abort>:
 8009900:	b508      	push	{r3, lr}
 8009902:	2006      	movs	r0, #6
 8009904:	f000 fa4a 	bl	8009d9c <raise>
 8009908:	2001      	movs	r0, #1
 800990a:	f7f8 ff9f 	bl	800284c <_exit>
	...

08009910 <__sflush_r>:
 8009910:	898a      	ldrh	r2, [r1, #12]
 8009912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	4605      	mov	r5, r0
 8009918:	0710      	lsls	r0, r2, #28
 800991a:	460c      	mov	r4, r1
 800991c:	d458      	bmi.n	80099d0 <__sflush_r+0xc0>
 800991e:	684b      	ldr	r3, [r1, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	dc05      	bgt.n	8009930 <__sflush_r+0x20>
 8009924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	dc02      	bgt.n	8009930 <__sflush_r+0x20>
 800992a:	2000      	movs	r0, #0
 800992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009932:	2e00      	cmp	r6, #0
 8009934:	d0f9      	beq.n	800992a <__sflush_r+0x1a>
 8009936:	2300      	movs	r3, #0
 8009938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800993c:	682f      	ldr	r7, [r5, #0]
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	d032      	beq.n	80099a8 <__sflush_r+0x98>
 8009942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	075a      	lsls	r2, r3, #29
 8009948:	d505      	bpl.n	8009956 <__sflush_r+0x46>
 800994a:	6863      	ldr	r3, [r4, #4]
 800994c:	1ac0      	subs	r0, r0, r3
 800994e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009950:	b10b      	cbz	r3, 8009956 <__sflush_r+0x46>
 8009952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009954:	1ac0      	subs	r0, r0, r3
 8009956:	2300      	movs	r3, #0
 8009958:	4602      	mov	r2, r0
 800995a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	4628      	mov	r0, r5
 8009960:	47b0      	blx	r6
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	d106      	bne.n	8009976 <__sflush_r+0x66>
 8009968:	6829      	ldr	r1, [r5, #0]
 800996a:	291d      	cmp	r1, #29
 800996c:	d82c      	bhi.n	80099c8 <__sflush_r+0xb8>
 800996e:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <__sflush_r+0x108>)
 8009970:	40ca      	lsrs	r2, r1
 8009972:	07d6      	lsls	r6, r2, #31
 8009974:	d528      	bpl.n	80099c8 <__sflush_r+0xb8>
 8009976:	2200      	movs	r2, #0
 8009978:	6062      	str	r2, [r4, #4]
 800997a:	04d9      	lsls	r1, r3, #19
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	6022      	str	r2, [r4, #0]
 8009980:	d504      	bpl.n	800998c <__sflush_r+0x7c>
 8009982:	1c42      	adds	r2, r0, #1
 8009984:	d101      	bne.n	800998a <__sflush_r+0x7a>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	b903      	cbnz	r3, 800998c <__sflush_r+0x7c>
 800998a:	6560      	str	r0, [r4, #84]	; 0x54
 800998c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998e:	602f      	str	r7, [r5, #0]
 8009990:	2900      	cmp	r1, #0
 8009992:	d0ca      	beq.n	800992a <__sflush_r+0x1a>
 8009994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009998:	4299      	cmp	r1, r3
 800999a:	d002      	beq.n	80099a2 <__sflush_r+0x92>
 800999c:	4628      	mov	r0, r5
 800999e:	f7ff fc7f 	bl	80092a0 <_free_r>
 80099a2:	2000      	movs	r0, #0
 80099a4:	6360      	str	r0, [r4, #52]	; 0x34
 80099a6:	e7c1      	b.n	800992c <__sflush_r+0x1c>
 80099a8:	6a21      	ldr	r1, [r4, #32]
 80099aa:	2301      	movs	r3, #1
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b0      	blx	r6
 80099b0:	1c41      	adds	r1, r0, #1
 80099b2:	d1c7      	bne.n	8009944 <__sflush_r+0x34>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0c4      	beq.n	8009944 <__sflush_r+0x34>
 80099ba:	2b1d      	cmp	r3, #29
 80099bc:	d001      	beq.n	80099c2 <__sflush_r+0xb2>
 80099be:	2b16      	cmp	r3, #22
 80099c0:	d101      	bne.n	80099c6 <__sflush_r+0xb6>
 80099c2:	602f      	str	r7, [r5, #0]
 80099c4:	e7b1      	b.n	800992a <__sflush_r+0x1a>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	e7ad      	b.n	800992c <__sflush_r+0x1c>
 80099d0:	690f      	ldr	r7, [r1, #16]
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	d0a9      	beq.n	800992a <__sflush_r+0x1a>
 80099d6:	0793      	lsls	r3, r2, #30
 80099d8:	680e      	ldr	r6, [r1, #0]
 80099da:	bf08      	it	eq
 80099dc:	694b      	ldreq	r3, [r1, #20]
 80099de:	600f      	str	r7, [r1, #0]
 80099e0:	bf18      	it	ne
 80099e2:	2300      	movne	r3, #0
 80099e4:	eba6 0807 	sub.w	r8, r6, r7
 80099e8:	608b      	str	r3, [r1, #8]
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	dd9c      	ble.n	800992a <__sflush_r+0x1a>
 80099f0:	6a21      	ldr	r1, [r4, #32]
 80099f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099f4:	4643      	mov	r3, r8
 80099f6:	463a      	mov	r2, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b0      	blx	r6
 80099fc:	2800      	cmp	r0, #0
 80099fe:	dc06      	bgt.n	8009a0e <__sflush_r+0xfe>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e78e      	b.n	800992c <__sflush_r+0x1c>
 8009a0e:	4407      	add	r7, r0
 8009a10:	eba8 0800 	sub.w	r8, r8, r0
 8009a14:	e7e9      	b.n	80099ea <__sflush_r+0xda>
 8009a16:	bf00      	nop
 8009a18:	20400001 	.word	0x20400001

08009a1c <_fflush_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	690b      	ldr	r3, [r1, #16]
 8009a20:	4605      	mov	r5, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	b913      	cbnz	r3, 8009a2c <_fflush_r+0x10>
 8009a26:	2500      	movs	r5, #0
 8009a28:	4628      	mov	r0, r5
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	b118      	cbz	r0, 8009a36 <_fflush_r+0x1a>
 8009a2e:	6983      	ldr	r3, [r0, #24]
 8009a30:	b90b      	cbnz	r3, 8009a36 <_fflush_r+0x1a>
 8009a32:	f000 f887 	bl	8009b44 <__sinit>
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <_fflush_r+0x6c>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d11b      	bne.n	8009a74 <_fflush_r+0x58>
 8009a3c:	686c      	ldr	r4, [r5, #4]
 8009a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0ef      	beq.n	8009a26 <_fflush_r+0xa>
 8009a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a48:	07d0      	lsls	r0, r2, #31
 8009a4a:	d404      	bmi.n	8009a56 <_fflush_r+0x3a>
 8009a4c:	0599      	lsls	r1, r3, #22
 8009a4e:	d402      	bmi.n	8009a56 <_fflush_r+0x3a>
 8009a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a52:	f000 f915 	bl	8009c80 <__retarget_lock_acquire_recursive>
 8009a56:	4628      	mov	r0, r5
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f7ff ff59 	bl	8009910 <__sflush_r>
 8009a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a60:	07da      	lsls	r2, r3, #31
 8009a62:	4605      	mov	r5, r0
 8009a64:	d4e0      	bmi.n	8009a28 <_fflush_r+0xc>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	059b      	lsls	r3, r3, #22
 8009a6a:	d4dd      	bmi.n	8009a28 <_fflush_r+0xc>
 8009a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6e:	f000 f908 	bl	8009c82 <__retarget_lock_release_recursive>
 8009a72:	e7d9      	b.n	8009a28 <_fflush_r+0xc>
 8009a74:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <_fflush_r+0x70>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d101      	bne.n	8009a7e <_fflush_r+0x62>
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	e7df      	b.n	8009a3e <_fflush_r+0x22>
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <_fflush_r+0x74>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	bf08      	it	eq
 8009a84:	68ec      	ldreq	r4, [r5, #12]
 8009a86:	e7da      	b.n	8009a3e <_fflush_r+0x22>
 8009a88:	0800a32c 	.word	0x0800a32c
 8009a8c:	0800a34c 	.word	0x0800a34c
 8009a90:	0800a30c 	.word	0x0800a30c

08009a94 <std>:
 8009a94:	2300      	movs	r3, #0
 8009a96:	b510      	push	{r4, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aa2:	6083      	str	r3, [r0, #8]
 8009aa4:	8181      	strh	r1, [r0, #12]
 8009aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8009aa8:	81c2      	strh	r2, [r0, #14]
 8009aaa:	6183      	str	r3, [r0, #24]
 8009aac:	4619      	mov	r1, r3
 8009aae:	2208      	movs	r2, #8
 8009ab0:	305c      	adds	r0, #92	; 0x5c
 8009ab2:	f7fd fd63 	bl	800757c <memset>
 8009ab6:	4b05      	ldr	r3, [pc, #20]	; (8009acc <std+0x38>)
 8009ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <std+0x3c>)
 8009abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <std+0x40>)
 8009ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x44>)
 8009ac4:	6224      	str	r4, [r4, #32]
 8009ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	bf00      	nop
 8009acc:	08009dd5 	.word	0x08009dd5
 8009ad0:	08009df7 	.word	0x08009df7
 8009ad4:	08009e2f 	.word	0x08009e2f
 8009ad8:	08009e53 	.word	0x08009e53

08009adc <_cleanup_r>:
 8009adc:	4901      	ldr	r1, [pc, #4]	; (8009ae4 <_cleanup_r+0x8>)
 8009ade:	f000 b8af 	b.w	8009c40 <_fwalk_reent>
 8009ae2:	bf00      	nop
 8009ae4:	08009a1d 	.word	0x08009a1d

08009ae8 <__sfmoreglue>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	1e4a      	subs	r2, r1, #1
 8009aec:	2568      	movs	r5, #104	; 0x68
 8009aee:	4355      	muls	r5, r2
 8009af0:	460e      	mov	r6, r1
 8009af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009af6:	f7ff fc23 	bl	8009340 <_malloc_r>
 8009afa:	4604      	mov	r4, r0
 8009afc:	b140      	cbz	r0, 8009b10 <__sfmoreglue+0x28>
 8009afe:	2100      	movs	r1, #0
 8009b00:	e9c0 1600 	strd	r1, r6, [r0]
 8009b04:	300c      	adds	r0, #12
 8009b06:	60a0      	str	r0, [r4, #8]
 8009b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b0c:	f7fd fd36 	bl	800757c <memset>
 8009b10:	4620      	mov	r0, r4
 8009b12:	bd70      	pop	{r4, r5, r6, pc}

08009b14 <__sfp_lock_acquire>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__sfp_lock_acquire+0x8>)
 8009b16:	f000 b8b3 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	200011a4 	.word	0x200011a4

08009b20 <__sfp_lock_release>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__sfp_lock_release+0x8>)
 8009b22:	f000 b8ae 	b.w	8009c82 <__retarget_lock_release_recursive>
 8009b26:	bf00      	nop
 8009b28:	200011a4 	.word	0x200011a4

08009b2c <__sinit_lock_acquire>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sinit_lock_acquire+0x8>)
 8009b2e:	f000 b8a7 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 8009b32:	bf00      	nop
 8009b34:	2000119f 	.word	0x2000119f

08009b38 <__sinit_lock_release>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sinit_lock_release+0x8>)
 8009b3a:	f000 b8a2 	b.w	8009c82 <__retarget_lock_release_recursive>
 8009b3e:	bf00      	nop
 8009b40:	2000119f 	.word	0x2000119f

08009b44 <__sinit>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4604      	mov	r4, r0
 8009b48:	f7ff fff0 	bl	8009b2c <__sinit_lock_acquire>
 8009b4c:	69a3      	ldr	r3, [r4, #24]
 8009b4e:	b11b      	cbz	r3, 8009b58 <__sinit+0x14>
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b54:	f7ff bff0 	b.w	8009b38 <__sinit_lock_release>
 8009b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <__sinit+0x68>)
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <__sinit+0x6c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	bf04      	itt	eq
 8009b6a:	2301      	moveq	r3, #1
 8009b6c:	61a3      	streq	r3, [r4, #24]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 f820 	bl	8009bb4 <__sfp>
 8009b74:	6060      	str	r0, [r4, #4]
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 f81c 	bl	8009bb4 <__sfp>
 8009b7c:	60a0      	str	r0, [r4, #8]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 f818 	bl	8009bb4 <__sfp>
 8009b84:	2200      	movs	r2, #0
 8009b86:	60e0      	str	r0, [r4, #12]
 8009b88:	2104      	movs	r1, #4
 8009b8a:	6860      	ldr	r0, [r4, #4]
 8009b8c:	f7ff ff82 	bl	8009a94 <std>
 8009b90:	68a0      	ldr	r0, [r4, #8]
 8009b92:	2201      	movs	r2, #1
 8009b94:	2109      	movs	r1, #9
 8009b96:	f7ff ff7d 	bl	8009a94 <std>
 8009b9a:	68e0      	ldr	r0, [r4, #12]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	2112      	movs	r1, #18
 8009ba0:	f7ff ff78 	bl	8009a94 <std>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	61a3      	str	r3, [r4, #24]
 8009ba8:	e7d2      	b.n	8009b50 <__sinit+0xc>
 8009baa:	bf00      	nop
 8009bac:	08009f88 	.word	0x08009f88
 8009bb0:	08009add 	.word	0x08009add

08009bb4 <__sfp>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	f7ff ffac 	bl	8009b14 <__sfp_lock_acquire>
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <__sfp+0x84>)
 8009bbe:	681e      	ldr	r6, [r3, #0]
 8009bc0:	69b3      	ldr	r3, [r6, #24]
 8009bc2:	b913      	cbnz	r3, 8009bca <__sfp+0x16>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ffbd 	bl	8009b44 <__sinit>
 8009bca:	3648      	adds	r6, #72	; 0x48
 8009bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	d503      	bpl.n	8009bdc <__sfp+0x28>
 8009bd4:	6833      	ldr	r3, [r6, #0]
 8009bd6:	b30b      	cbz	r3, 8009c1c <__sfp+0x68>
 8009bd8:	6836      	ldr	r6, [r6, #0]
 8009bda:	e7f7      	b.n	8009bcc <__sfp+0x18>
 8009bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009be0:	b9d5      	cbnz	r5, 8009c18 <__sfp+0x64>
 8009be2:	4b16      	ldr	r3, [pc, #88]	; (8009c3c <__sfp+0x88>)
 8009be4:	60e3      	str	r3, [r4, #12]
 8009be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bea:	6665      	str	r5, [r4, #100]	; 0x64
 8009bec:	f000 f847 	bl	8009c7e <__retarget_lock_init_recursive>
 8009bf0:	f7ff ff96 	bl	8009b20 <__sfp_lock_release>
 8009bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bfc:	6025      	str	r5, [r4, #0]
 8009bfe:	61a5      	str	r5, [r4, #24]
 8009c00:	2208      	movs	r2, #8
 8009c02:	4629      	mov	r1, r5
 8009c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c08:	f7fd fcb8 	bl	800757c <memset>
 8009c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c14:	4620      	mov	r0, r4
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	3468      	adds	r4, #104	; 0x68
 8009c1a:	e7d9      	b.n	8009bd0 <__sfp+0x1c>
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7ff ff62 	bl	8009ae8 <__sfmoreglue>
 8009c24:	4604      	mov	r4, r0
 8009c26:	6030      	str	r0, [r6, #0]
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1d5      	bne.n	8009bd8 <__sfp+0x24>
 8009c2c:	f7ff ff78 	bl	8009b20 <__sfp_lock_release>
 8009c30:	230c      	movs	r3, #12
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	e7ee      	b.n	8009c14 <__sfp+0x60>
 8009c36:	bf00      	nop
 8009c38:	08009f88 	.word	0x08009f88
 8009c3c:	ffff0001 	.word	0xffff0001

08009c40 <_fwalk_reent>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	4606      	mov	r6, r0
 8009c46:	4688      	mov	r8, r1
 8009c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c4c:	2700      	movs	r7, #0
 8009c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c52:	f1b9 0901 	subs.w	r9, r9, #1
 8009c56:	d505      	bpl.n	8009c64 <_fwalk_reent+0x24>
 8009c58:	6824      	ldr	r4, [r4, #0]
 8009c5a:	2c00      	cmp	r4, #0
 8009c5c:	d1f7      	bne.n	8009c4e <_fwalk_reent+0xe>
 8009c5e:	4638      	mov	r0, r7
 8009c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c64:	89ab      	ldrh	r3, [r5, #12]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d907      	bls.n	8009c7a <_fwalk_reent+0x3a>
 8009c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	d003      	beq.n	8009c7a <_fwalk_reent+0x3a>
 8009c72:	4629      	mov	r1, r5
 8009c74:	4630      	mov	r0, r6
 8009c76:	47c0      	blx	r8
 8009c78:	4307      	orrs	r7, r0
 8009c7a:	3568      	adds	r5, #104	; 0x68
 8009c7c:	e7e9      	b.n	8009c52 <_fwalk_reent+0x12>

08009c7e <__retarget_lock_init_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <__retarget_lock_acquire_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <__retarget_lock_release_recursive>:
 8009c82:	4770      	bx	lr

08009c84 <__swhatbuf_r>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	460e      	mov	r6, r1
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	b096      	sub	sp, #88	; 0x58
 8009c90:	4614      	mov	r4, r2
 8009c92:	461d      	mov	r5, r3
 8009c94:	da07      	bge.n	8009ca6 <__swhatbuf_r+0x22>
 8009c96:	2300      	movs	r3, #0
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	89b3      	ldrh	r3, [r6, #12]
 8009c9c:	061a      	lsls	r2, r3, #24
 8009c9e:	d410      	bmi.n	8009cc2 <__swhatbuf_r+0x3e>
 8009ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca4:	e00e      	b.n	8009cc4 <__swhatbuf_r+0x40>
 8009ca6:	466a      	mov	r2, sp
 8009ca8:	f000 f8fa 	bl	8009ea0 <_fstat_r>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	dbf2      	blt.n	8009c96 <__swhatbuf_r+0x12>
 8009cb0:	9a01      	ldr	r2, [sp, #4]
 8009cb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cba:	425a      	negs	r2, r3
 8009cbc:	415a      	adcs	r2, r3
 8009cbe:	602a      	str	r2, [r5, #0]
 8009cc0:	e7ee      	b.n	8009ca0 <__swhatbuf_r+0x1c>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	b016      	add	sp, #88	; 0x58
 8009cca:	bd70      	pop	{r4, r5, r6, pc}

08009ccc <__smakebuf_r>:
 8009ccc:	898b      	ldrh	r3, [r1, #12]
 8009cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd0:	079d      	lsls	r5, r3, #30
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	d507      	bpl.n	8009ce8 <__smakebuf_r+0x1c>
 8009cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	6163      	str	r3, [r4, #20]
 8009ce4:	b002      	add	sp, #8
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	ab01      	add	r3, sp, #4
 8009cea:	466a      	mov	r2, sp
 8009cec:	f7ff ffca 	bl	8009c84 <__swhatbuf_r>
 8009cf0:	9900      	ldr	r1, [sp, #0]
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7ff fb23 	bl	8009340 <_malloc_r>
 8009cfa:	b948      	cbnz	r0, 8009d10 <__smakebuf_r+0x44>
 8009cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d00:	059a      	lsls	r2, r3, #22
 8009d02:	d4ef      	bmi.n	8009ce4 <__smakebuf_r+0x18>
 8009d04:	f023 0303 	bic.w	r3, r3, #3
 8009d08:	f043 0302 	orr.w	r3, r3, #2
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	e7e3      	b.n	8009cd8 <__smakebuf_r+0xc>
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <__smakebuf_r+0x7c>)
 8009d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	6020      	str	r0, [r4, #0]
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	6163      	str	r3, [r4, #20]
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	6120      	str	r0, [r4, #16]
 8009d26:	b15b      	cbz	r3, 8009d40 <__smakebuf_r+0x74>
 8009d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 f8c9 	bl	8009ec4 <_isatty_r>
 8009d32:	b128      	cbz	r0, 8009d40 <__smakebuf_r+0x74>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	89a0      	ldrh	r0, [r4, #12]
 8009d42:	4305      	orrs	r5, r0
 8009d44:	81a5      	strh	r5, [r4, #12]
 8009d46:	e7cd      	b.n	8009ce4 <__smakebuf_r+0x18>
 8009d48:	08009add 	.word	0x08009add

08009d4c <_raise_r>:
 8009d4c:	291f      	cmp	r1, #31
 8009d4e:	b538      	push	{r3, r4, r5, lr}
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	d904      	bls.n	8009d60 <_raise_r+0x14>
 8009d56:	2316      	movs	r3, #22
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d62:	b112      	cbz	r2, 8009d6a <_raise_r+0x1e>
 8009d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d68:	b94b      	cbnz	r3, 8009d7e <_raise_r+0x32>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f830 	bl	8009dd0 <_getpid_r>
 8009d70:	462a      	mov	r2, r5
 8009d72:	4601      	mov	r1, r0
 8009d74:	4620      	mov	r0, r4
 8009d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7a:	f000 b817 	b.w	8009dac <_kill_r>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d00a      	beq.n	8009d98 <_raise_r+0x4c>
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	d103      	bne.n	8009d8e <_raise_r+0x42>
 8009d86:	2316      	movs	r3, #22
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	e7e7      	b.n	8009d5e <_raise_r+0x12>
 8009d8e:	2400      	movs	r4, #0
 8009d90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d94:	4628      	mov	r0, r5
 8009d96:	4798      	blx	r3
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e7e0      	b.n	8009d5e <_raise_r+0x12>

08009d9c <raise>:
 8009d9c:	4b02      	ldr	r3, [pc, #8]	; (8009da8 <raise+0xc>)
 8009d9e:	4601      	mov	r1, r0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f7ff bfd3 	b.w	8009d4c <_raise_r>
 8009da6:	bf00      	nop
 8009da8:	20000010 	.word	0x20000010

08009dac <_kill_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d07      	ldr	r5, [pc, #28]	; (8009dcc <_kill_r+0x20>)
 8009db0:	2300      	movs	r3, #0
 8009db2:	4604      	mov	r4, r0
 8009db4:	4608      	mov	r0, r1
 8009db6:	4611      	mov	r1, r2
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	f7f8 fd37 	bl	800282c <_kill>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	d102      	bne.n	8009dc8 <_kill_r+0x1c>
 8009dc2:	682b      	ldr	r3, [r5, #0]
 8009dc4:	b103      	cbz	r3, 8009dc8 <_kill_r+0x1c>
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	bd38      	pop	{r3, r4, r5, pc}
 8009dca:	bf00      	nop
 8009dcc:	20001198 	.word	0x20001198

08009dd0 <_getpid_r>:
 8009dd0:	f7f8 bd24 	b.w	800281c <_getpid>

08009dd4 <__sread>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ddc:	f000 f894 	bl	8009f08 <_read_r>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	bfab      	itete	ge
 8009de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009de6:	89a3      	ldrhlt	r3, [r4, #12]
 8009de8:	181b      	addge	r3, r3, r0
 8009dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dee:	bfac      	ite	ge
 8009df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df2:	81a3      	strhlt	r3, [r4, #12]
 8009df4:	bd10      	pop	{r4, pc}

08009df6 <__swrite>:
 8009df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	05db      	lsls	r3, r3, #23
 8009e00:	4605      	mov	r5, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4616      	mov	r6, r2
 8009e06:	d505      	bpl.n	8009e14 <__swrite+0x1e>
 8009e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f000 f868 	bl	8009ee4 <_lseek_r>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	4632      	mov	r2, r6
 8009e22:	463b      	mov	r3, r7
 8009e24:	4628      	mov	r0, r5
 8009e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	f000 b817 	b.w	8009e5c <_write_r>

08009e2e <__sseek>:
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 f855 	bl	8009ee4 <_lseek_r>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	bf15      	itete	ne
 8009e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4a:	81a3      	strheq	r3, [r4, #12]
 8009e4c:	bf18      	it	ne
 8009e4e:	81a3      	strhne	r3, [r4, #12]
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <__sclose>:
 8009e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e56:	f000 b813 	b.w	8009e80 <_close_r>
	...

08009e5c <_write_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d07      	ldr	r5, [pc, #28]	; (8009e7c <_write_r+0x20>)
 8009e60:	4604      	mov	r4, r0
 8009e62:	4608      	mov	r0, r1
 8009e64:	4611      	mov	r1, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	602a      	str	r2, [r5, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f7f8 fd15 	bl	800289a <_write>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_write_r+0x1e>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_write_r+0x1e>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	20001198 	.word	0x20001198

08009e80 <_close_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_close_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f8 fd21 	bl	80028d2 <_close>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_close_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_close_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20001198 	.word	0x20001198

08009ea0 <_fstat_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_fstat_r+0x20>)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	f7f8 fd1c 	bl	80028ea <_fstat>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_fstat_r+0x1c>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_fstat_r+0x1c>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001198 	.word	0x20001198

08009ec4 <_isatty_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d06      	ldr	r5, [pc, #24]	; (8009ee0 <_isatty_r+0x1c>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	f7f8 fd1b 	bl	800290a <_isatty>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_isatty_r+0x1a>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_isatty_r+0x1a>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20001198 	.word	0x20001198

08009ee4 <_lseek_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	; (8009f04 <_lseek_r+0x20>)
 8009ee8:	4604      	mov	r4, r0
 8009eea:	4608      	mov	r0, r1
 8009eec:	4611      	mov	r1, r2
 8009eee:	2200      	movs	r2, #0
 8009ef0:	602a      	str	r2, [r5, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f7f8 fd14 	bl	8002920 <_lseek>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_lseek_r+0x1e>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_lseek_r+0x1e>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20001198 	.word	0x20001198

08009f08 <_read_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_read_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f8 fca2 	bl	8002860 <_read>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_read_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_read_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20001198 	.word	0x20001198

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
