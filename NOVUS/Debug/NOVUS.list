
NOVUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800a6a0  0800a6a0  0001a6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac4  0800aac4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aacc  0800aacc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aacc  0800aacc  0001aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aad0  0800aad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  200001e0  0800acb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  0800acb4  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a69e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e4  00000000  00000000  0003a8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208e5  00000000  00000000  00040820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172a7  00000000  00000000  00061105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca0b6  00000000  00000000  000783ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006798  00000000  00000000  001424b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a684 	.word	0x0800a684

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a684 	.word	0x0800a684

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <controllerInit>:
#include "Controller/controller.h"

TIM_HandleTypeDef* time_handler;

void controllerInit(TIM_HandleTypeDef* htimex){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	time_handler = htimex;
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <controllerInit+0x44>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
	time_handler->Instance->CCR1 = 1000;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <controllerInit+0x44>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef I_CONTROLLER
	setSpeedGain(7, 4.5, 0);
#else
	setSpeedGain(1, 1.5);
 8000faa:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000fae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fb2:	f000 f8f1 	bl	8001198 <setSpeedGain>
#endif
	setAmplitudeGain(1);
 8000fb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fba:	f000 f903 	bl	80011c4 <setAmplitudeGain>

	HAL_TIM_PWM_Start(time_handler, TIM_CHANNEL_1);
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <controllerInit+0x44>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fc3b 	bl	8005840 <HAL_TIM_PWM_Start>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000ea4 	.word	0x20000ea4

08000fd8 <getMode>:
    control_value = proportion_controll_value + differential_controll_value + integral_controll_value;

    return control_value;
}

MODE getMode(RC rc){
 8000fd8:	b490      	push	{r4, r7}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	463c      	mov	r4, r7
 8000fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(rc.aux3 > 1300){
 8000fe4:	89bb      	ldrh	r3, [r7, #12]
 8000fe6:	f240 5214 	movw	r2, #1300	; 0x514
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d911      	bls.n	8001012 <getMode+0x3a>
		if(rc.aux1 < 500){
 8000fee:	893b      	ldrh	r3, [r7, #8]
 8000ff0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff4:	d201      	bcs.n	8000ffa <getMode+0x22>
			return ARM;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00c      	b.n	8001014 <getMode+0x3c>
		}else if(rc.aux1 > 500 && rc.aux1 < 1400){
 8000ffa:	893b      	ldrh	r3, [r7, #8]
 8000ffc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001000:	d905      	bls.n	800100e <getMode+0x36>
 8001002:	893b      	ldrh	r3, [r7, #8]
 8001004:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001008:	d201      	bcs.n	800100e <getMode+0x36>
			return NON_MOMENT;
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <getMode+0x3c>
		}else{
			return MOMENT;
 800100e:	2303      	movs	r3, #3
 8001010:	e000      	b.n	8001014 <getMode+0x3c>
		}
	}else{
		return CUT_OFF;
 8001012:	2300      	movs	r3, #0
	}
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bc90      	pop	{r4, r7}
 800101c:	4770      	bx	lr

0800101e <momentController>:
    control_value += motor.rpm;

    return control_value;
}

float momentController(SPT_Value setpoint, MOTOR motor){
 800101e:	b084      	sub	sp, #16
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	eef0 6a40 	vmov.f32	s13, s0
 800102a:	eeb0 7a60 	vmov.f32	s14, s1
 800102e:	eef0 7a41 	vmov.f32	s15, s2
 8001032:	f107 0c18 	add.w	ip, r7, #24
 8001036:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800103a:	edc7 6a01 	vstr	s13, [r7, #4]
 800103e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001042:	edc7 7a03 	vstr	s15, [r7, #12]
	return 0;
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	ee07 3a90 	vmov	s15, r3
}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	b004      	add	sp, #16
 800105c:	4770      	bx	lr
	...

08001060 <outputMotor>:

void outputMotor(float speed_command, float moment_command, MODE mode){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a03 	vstr	s0, [r7, #12]
 800106a:	edc7 0a02 	vstr	s1, [r7, #8]
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    float command;

    //! NOTE :: rpm command to throttle percent scalar
    switch(mode){
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d82b      	bhi.n	80010d0 <outputMotor+0x70>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <outputMotor+0x20>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001091 	.word	0x08001091
 8001084:	0800109f 	.word	0x0800109f
 8001088:	080010ad 	.word	0x080010ad
 800108c:	080010b3 	.word	0x080010b3
        case CUT_OFF:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <outputMotor+0x80>)
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
            command = 1000;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <outputMotor+0x84>)
 800109a:	617b      	str	r3, [r7, #20]
            break;
 800109c:	e018      	b.n	80010d0 <outputMotor+0x70>
        case ARM:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <outputMotor+0x80>)
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
            command = 1200;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <outputMotor+0x88>)
 80010a8:	617b      	str	r3, [r7, #20]
            break;
 80010aa:	e011      	b.n	80010d0 <outputMotor+0x70>
        case NON_MOMENT:
            //command = map(speed_command, 600, 5900, 1190, 2000);
        	command = speed_command;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	617b      	str	r3, [r7, #20]
            break;
 80010b0:	e00e      	b.n	80010d0 <outputMotor+0x70>
        case MOMENT:
            command = map(moment_command, RPM_MIN, RPM_MAX, PWM_MIN, PWM_MAX);
 80010b2:	f240 733a 	movw	r3, #1850	; 0x73a
 80010b6:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80010ba:	f641 51b0 	movw	r1, #7600	; 0x1db0
 80010be:	f44f 7016 	mov.w	r0, #600	; 0x258
 80010c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80010c6:	f000 f82d 	bl	8001124 <map>
 80010ca:	ed87 0a05 	vstr	s0, [r7, #20]
            break;
 80010ce:	bf00      	nop
    }

    PWM_Generator(command);
 80010d0:	ed97 0a05 	vldr	s0, [r7, #20]
 80010d4:	f000 f80a 	bl	80010ec <PWM_Generator>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000e70 	.word	0x20000e70
 80010e4:	447a0000 	.word	0x447a0000
 80010e8:	44960000 	.word	0x44960000

080010ec <PWM_Generator>:

void PWM_Generator(float command){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	ed87 0a01 	vstr	s0, [r7, #4]
    motor.pwm = command;
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <PWM_Generator+0x30>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6153      	str	r3, [r2, #20]
    time_handler->Instance->CCR1 = command;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <PWM_Generator+0x34>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 2a90 	vmov	r2, s15
 800110e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000e80 	.word	0x20000e80
 8001120:	20000ea4 	.word	0x20000ea4

08001124 <map>:
#include "Controller/novus_math.h"

float map(float target, int from_min, int from_max, int to_min, int to_max){
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	ed87 0a05 	vstr	s0, [r7, #20]
 800112e:	6138      	str	r0, [r7, #16]
 8001130:	60f9      	str	r1, [r7, #12]
 8001132:	60ba      	str	r2, [r7, #8]
 8001134:	607b      	str	r3, [r7, #4]
    float mult = (float)(to_max - to_min) / (float)(from_max - from_min);
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	edc7 7a07 	vstr	s15, [r7, #28]
    target = target - from_min;
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed97 7a05 	vldr	s14, [r7, #20]
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	edc7 7a05 	vstr	s15, [r7, #20]
    return to_min + (target * mult);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	edd7 6a05 	vldr	s13, [r7, #20]
 800117e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	3724      	adds	r7, #36	; 0x24
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <setSpeedGain>:
  * @param  p Proportional Controller Gain, Recommaned amount of Change 0.1
  * @param  d Differential  Controller Gain, Recommaned amount of Change 0.01
  * @param  i Integral  Controller Gain, Recommaned amount of Change 0.001
  * @retval None
  */
void setSpeedGain(float p, float d){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
 80011a2:	edc7 0a00 	vstr	s1, [r7]
	speed_gain.P_gain = p;
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <setSpeedGain+0x28>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]
	speed_gain.D_gain = d;
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <setSpeedGain+0x28>)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6053      	str	r3, [r2, #4]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000e9c 	.word	0x20000e9c

080011c4 <setAmplitudeGain>:
  * @brief  Setting amount of multiplied sin wave's Amplitude
  * @param  gain Setting amount of multiply with RC controller's Scalar
  *             Recommaned amount of Change 0.1
  * @retval None
  */
void setAmplitudeGain(float gain){
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	ed87 0a01 	vstr	s0, [r7, #4]
	amplitude_gain = gain;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <setAmplitudeGain+0x1c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000e38 	.word	0x20000e38

080011e4 <getStickPercent>:
/**
  * @brief  Unit Conversion RC command - PWM data to Percentage 
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent of stick position
  */
float getStickPercent(uint16_t stick_pos){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
    float percent = map(stick_pos, RC_MIN, RC_MAX, 0, 100);
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	2200      	movs	r2, #0
 80011fc:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8001200:	f44f 70ab 	mov.w	r0, #342	; 0x156
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	f7ff ff8c 	bl	8001124 <map>
 800120c:	ed87 0a03 	vstr	s0, [r7, #12]

    return percent;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	ee07 3a90 	vmov	s15, r3
}
 8001216:	eeb0 0a67 	vmov.f32	s0, s15
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <getStickVector>:
  *         '+'Vector = UP/RIGHT
  *         '-'Vector = DOWN/LEFT
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent vector of stick position
  */
float getStickVector(uint16_t stick_pos){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
    float vector = map(stick_pos, RC_MIN, RC_MAX, -100, 100);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800123a:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800123e:	f44f 70ab 	mov.w	r0, #342	; 0x156
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	f7ff ff6d 	bl	8001124 <map>
 800124a:	ed87 0a03 	vstr	s0, [r7, #12]

    return vector;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	ee07 3a90 	vmov	s15, r3
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <getStickScalar>:
/**
  * @brief  Unit Conversion RC command - Percentage Vector to Percentage Scalar
  * @param  stick_vector percent vector of RC stick position
  * @retval percent scalar of stick position
  */
float getStickScalar(float stick_vector){
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	ed87 0a01 	vstr	s0, [r7, #4]
    float stick_scalar = 0;
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]

    if(stick_vector < 0){
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d506      	bpl.n	800128a <getStickScalar+0x2c>
        stick_scalar = stick_vector * (-1);
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	eef1 7a67 	vneg.f32	s15, s15
 8001284:	edc7 7a03 	vstr	s15, [r7, #12]
 8001288:	e001      	b.n	800128e <getStickScalar+0x30>
    }else{
        stick_scalar = stick_vector;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]
    }

    return stick_scalar;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <checkMargin>:
  * @brief  Check Margin of RC Command 
  *         When Roll/Pitch Stick is in center position it will ignore a tiny movement
  * @param  stick_vector percent vector of RC stick position
  * @retval percent vector of stick position
  */
float checkMargin(float stick_vector){
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	ed87 0a01 	vstr	s0, [r7, #4]
    if(stick_vector > (RC_MARGIN_RANGE * (-1)) && stick_vector < RC_MARGIN_RANGE){
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd0b      	ble.n	80012d6 <checkMargin+0x34>
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d502      	bpl.n	80012d6 <checkMargin+0x34>
        stick_vector = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
    }
    return stick_vector;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	ee07 3a90 	vmov	s15, r3
}
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <setpoint>:
  *         based on RC command.
  * @param  rc have 7ch information (throttle, roll, pitch, yaw, aux1, aux2, aux3)
  *         this is PWM based data
  * @retval SPT_Value setpoint - updated setpoint value
  */
SPT_Value setpoint(RC rc){
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b08f      	sub	sp, #60	; 0x3c
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f107 0410 	add.w	r4, r7, #16
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    SPT_Value setpoint;

    setpoint.speed = setSpeed(rc.throttle);
 80012f8:	8a3b      	ldrh	r3, [r7, #16]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f831 	bl	8001362 <setSpeed>
 8001300:	eef0 7a40 	vmov.f32	s15, s0
 8001304:	edc7 7a08 	vstr	s15, [r7, #32]
    setpoint.amplitude = setAmplitude(rc.roll, rc.pitch);
 8001308:	8a7b      	ldrh	r3, [r7, #18]
 800130a:	8aba      	ldrh	r2, [r7, #20]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f846 	bl	80013a0 <setAmplitude>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    setpoint.cyclic_shift = setCyclicShift(rc.roll, rc.pitch);
 800131c:	8a7b      	ldrh	r3, [r7, #18]
 800131e:	8aba      	ldrh	r2, [r7, #20]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f894 	bl	8001450 <setCyclicShift>
 8001328:	eef0 7a40 	vmov.f32	s15, s0
 800132c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    return setpoint;
 8001330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001334:	f107 0220 	add.w	r2, r7, #32
 8001338:	ca07      	ldmia	r2, {r0, r1, r2}
 800133a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800133e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	ee06 1a90 	vmov	s13, r1
 8001348:	ee07 2a10 	vmov	s14, r2
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a66 	vmov.f32	s0, s13
 8001354:	eef0 0a47 	vmov.f32	s1, s14
 8001358:	eeb0 1a67 	vmov.f32	s2, s15
 800135c:	373c      	adds	r7, #60	; 0x3c
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}

08001362 <setSpeed>:
/**
  * @brief  Calculate target speed based throttle information
  * @param  throttle RC throttle channel command based on PWM
  * @retval updated target speed setpoint value
  */
float setSpeed(uint16_t throttle){
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	80fb      	strh	r3, [r7, #6]
    float throttle_percent = getStickPercent(throttle);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff38 	bl	80011e4 <getStickPercent>
 8001374:	ed87 0a03 	vstr	s0, [r7, #12]

    //!NOTE :: Percent to RPM @mhlee
    float speed = map(throttle_percent, 0, 100, RPM_MIN, RPM_MAX);
 8001378:	f641 53b0 	movw	r3, #7600	; 0x1db0
 800137c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001380:	2164      	movs	r1, #100	; 0x64
 8001382:	2000      	movs	r0, #0
 8001384:	ed97 0a03 	vldr	s0, [r7, #12]
 8001388:	f7ff fecc 	bl	8001124 <map>
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
    
    return speed;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	ee07 3a90 	vmov	s15, r3
}
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <setAmplitude>:
  * @brief  Calculate target amplitude of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target amplitude setpoint value
  */
float setAmplitude(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	80fb      	strh	r3, [r7, #6]
 80013ac:	4613      	mov	r3, r2
 80013ae:	80bb      	strh	r3, [r7, #4]
    float roll_scalar = getStickScalar(getStickVector(roll_stick_pos));
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff34 	bl	8001220 <getStickVector>
 80013b8:	eef0 7a40 	vmov.f32	s15, s0
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	f7ff ff4d 	bl	800125e <getStickScalar>
 80013c4:	ed87 0a07 	vstr	s0, [r7, #28]
    float pitch_scalar = getStickScalar(getStickVector(pitch_stick_pos));
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff28 	bl	8001220 <getStickVector>
 80013d0:	eef0 7a40 	vmov.f32	s15, s0
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	f7ff ff41 	bl	800125e <getStickScalar>
 80013dc:	ed87 0a06 	vstr	s0, [r7, #24]

    float pitch_ratio = pitch_scalar / (roll_scalar + pitch_scalar);
 80013e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80013e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ec:	edd7 6a06 	vldr	s13, [r7, #24]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	edc7 7a05 	vstr	s15, [r7, #20]
    float roll_ratio = 1 - pitch_ratio;
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001404:	edc7 7a04 	vstr	s15, [r7, #16]

    float cmd_scalar = (pitch_scalar * pitch_ratio) + (roll_scalar * roll_ratio);
 8001408:	ed97 7a06 	vldr	s14, [r7, #24]
 800140c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001414:	edd7 6a07 	vldr	s13, [r7, #28]
 8001418:	edd7 7a04 	vldr	s15, [r7, #16]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a03 	vstr	s15, [r7, #12]

    float amplitude = (cmd_scalar * amplitude_gain);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <setAmplitude+0xac>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001436:	edc7 7a02 	vstr	s15, [r7, #8]

    return amplitude;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000e38 	.word	0x20000e38

08001450 <setCyclicShift>:
  * @brief  Calculate target cyclic shift of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target cyclic shift setpoint value
  */
float setCyclicShift(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	460a      	mov	r2, r1
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	4613      	mov	r3, r2
 800145e:	80bb      	strh	r3, [r7, #4]
    float roll_vector = getStickVector(roll_stick_pos);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fedc 	bl	8001220 <getStickVector>
 8001468:	ed87 0a06 	vstr	s0, [r7, #24]
    float pitch_vector = getStickVector(pitch_stick_pos);
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fed6 	bl	8001220 <getStickVector>
 8001474:	ed87 0a05 	vstr	s0, [r7, #20]

    roll_vector = checkMargin(roll_vector);
 8001478:	ed97 0a06 	vldr	s0, [r7, #24]
 800147c:	f7ff ff11 	bl	80012a2 <checkMargin>
 8001480:	ed87 0a06 	vstr	s0, [r7, #24]
    pitch_vector = checkMargin(pitch_vector);
 8001484:	ed97 0a05 	vldr	s0, [r7, #20]
 8001488:	f7ff ff0b 	bl	80012a2 <checkMargin>
 800148c:	ed87 0a05 	vstr	s0, [r7, #20]

    float roll_scalar = getStickScalar(roll_vector);
 8001490:	ed97 0a06 	vldr	s0, [r7, #24]
 8001494:	f7ff fee3 	bl	800125e <getStickScalar>
 8001498:	ed87 0a04 	vstr	s0, [r7, #16]
    float pitch_scalar = getStickScalar(pitch_vector);
 800149c:	ed97 0a05 	vldr	s0, [r7, #20]
 80014a0:	f7ff fedd 	bl	800125e <getStickScalar>
 80014a4:	ed87 0a03 	vstr	s0, [r7, #12]

    float shift = 0;
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]

    if(roll_vector == 0 && pitch_vector == 0){
 80014ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d10a      	bne.n	80014d2 <setCyclicShift+0x82>
 80014bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d103      	bne.n	80014d2 <setCyclicShift+0x82>
        shift = 0;                      /*!< There is any command Roll and Pitch  */
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e09f      	b.n	8001612 <setCyclicShift+0x1c2>
    }else if(roll_vector == 0 && pitch_vector != 0){
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d114      	bne.n	800150a <setCyclicShift+0xba>
 80014e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d00d      	beq.n	800150a <setCyclicShift+0xba>
        if(pitch_vector < 0){
 80014ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d502      	bpl.n	8001502 <setCyclicShift+0xb2>
            shift = PI;                 /*!< There is only negative Pitch command  */
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <setCyclicShift+0x1f0>)
 80014fe:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 8001500:	e087      	b.n	8001612 <setCyclicShift+0x1c2>
        }else{
            shift = 0;                  /*!< There is only positive Pitch command  */
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 8001508:	e083      	b.n	8001612 <setCyclicShift+0x1c2>
        }
    }else if(roll_vector != 0 && pitch_vector == 0){
 800150a:	edd7 7a06 	vldr	s15, [r7, #24]
 800150e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d013      	beq.n	8001540 <setCyclicShift+0xf0>
 8001518:	edd7 7a05 	vldr	s15, [r7, #20]
 800151c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d10c      	bne.n	8001540 <setCyclicShift+0xf0>
        if(roll_vector < 0){
 8001526:	edd7 7a06 	vldr	s15, [r7, #24]
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d502      	bpl.n	800153a <setCyclicShift+0xea>
            shift = (3 * PI) / 2.0;     /*!< There is only negative Roll command  */
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <setCyclicShift+0x1f4>)
 8001536:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 8001538:	e06b      	b.n	8001612 <setCyclicShift+0x1c2>
        }else{
            shift = PI / 2.0;           /*!< There is only positive Roll command  */
 800153a:	4b43      	ldr	r3, [pc, #268]	; (8001648 <setCyclicShift+0x1f8>)
 800153c:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 800153e:	e068      	b.n	8001612 <setCyclicShift+0x1c2>
        }
    }else{
        float shift_ratio = (PI/2) * (roll_scalar / (roll_scalar+pitch_scalar));
 8001540:	ed97 7a04 	vldr	s14, [r7, #16]
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001550:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001554:	ee16 0a90 	vmov	r0, s13
 8001558:	f7ff f81e 	bl	8000598 <__aeabi_f2d>
 800155c:	a332      	add	r3, pc, #200	; (adr r3, 8001628 <setCyclicShift+0x1d8>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f871 	bl	8000648 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb43 	bl	8000bf8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	60bb      	str	r3, [r7, #8]

        if(pitch_vector < 0){
 8001576:	edd7 7a05 	vldr	s15, [r7, #20]
 800157a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d52a      	bpl.n	80015da <setCyclicShift+0x18a>
            if(roll_vector < 0){
 8001584:	edd7 7a06 	vldr	s15, [r7, #24]
 8001588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d510      	bpl.n	80015b4 <setCyclicShift+0x164>
                shift = PI + shift_ratio;       /*!< There is negative Pitch and negative Roll command  */
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff f800 	bl	8000598 <__aeabi_f2d>
 8001598:	a325      	add	r3, pc, #148	; (adr r3, 8001630 <setCyclicShift+0x1e0>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe fe9d 	bl	80002dc <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fb25 	bl	8000bf8 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e02e      	b.n	8001612 <setCyclicShift+0x1c2>
            }else{
                shift = PI - shift_ratio;     /*!< There is negative Pitch and positive Roll command  */
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7fe ffef 	bl	8000598 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	a11c      	add	r1, pc, #112	; (adr r1, 8001630 <setCyclicShift+0x1e0>)
 80015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c4:	f7fe fe88 	bl	80002d8 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb12 	bl	8000bf8 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	e01b      	b.n	8001612 <setCyclicShift+0x1c2>
            }
        }else{
            if(roll_vector < 0){
 80015da:	edd7 7a06 	vldr	s15, [r7, #24]
 80015de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d512      	bpl.n	800160e <setCyclicShift+0x1be>
                shift = (2*PI) - shift_ratio;       /*!< There is positive Pitch and negative Roll command  */
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7fe ffd5 	bl	8000598 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	a111      	add	r1, pc, #68	; (adr r1, 8001638 <setCyclicShift+0x1e8>)
 80015f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015f8:	f7fe fe6e 	bl	80002d8 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff faf8 	bl	8000bf8 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	e001      	b.n	8001612 <setCyclicShift+0x1c2>
            }else{
                shift = shift_ratio;            /*!< There is positive Pitch and positive Roll command  */
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return shift;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	53c8d4f1 	.word	0x53c8d4f1
 800162c:	3ff921fb 	.word	0x3ff921fb
 8001630:	53c8d4f1 	.word	0x53c8d4f1
 8001634:	400921fb 	.word	0x400921fb
 8001638:	53c8d4f1 	.word	0x53c8d4f1
 800163c:	401921fb 	.word	0x401921fb
 8001640:	40490fdb 	.word	0x40490fdb
 8001644:	4096cbe4 	.word	0x4096cbe4
 8001648:	3fc90fdb 	.word	0x3fc90fdb

0800164c <as5147_Init>:
  * @param  GPIO_num GPIO pin number
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]

	chip_num = addChip(hspix, GPIO_port, GPIO_num);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	461a      	mov	r2, r3
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fec5 	bl	80023f0 <addChip>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <as5147_Init+0x4c>)
 800166c:	701a      	strb	r2, [r3, #0]
	if(chip_num < 0){
		return -1;
	}

	registerRead(AS5047P_ERRFL);
 800166e:	2001      	movs	r0, #1
 8001670:	f000 f8b2 	bl	80017d8 <registerRead>
	int16_t error = registerRead(AS5047P_ERRFL);
 8001674:	2001      	movs	r0, #1
 8001676:	f000 f8af 	bl	80017d8 <registerRead>
 800167a:	4603      	mov	r3, r0
 800167c:	82fb      	strh	r3, [r7, #22]

	if(error != 0) return -1;
 800167e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <as5147_Init+0x40>
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e000      	b.n	800168e <as5147_Init+0x42>

	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001fc 	.word	0x200001fc

0800169c <as5147_setZeroPosition>:
  * @param  none
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_setZeroPosition(){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
	Frame current_zero_position = { 0, };
 80016a2:	2300      	movs	r3, #0
 80016a4:	813b      	strh	r3, [r7, #8]
	Frame current_position = { 0, };
 80016a6:	2300      	movs	r3, #0
 80016a8:	80bb      	strh	r3, [r7, #4]
	uint16_t zero_position_L = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	81fb      	strh	r3, [r7, #14]
	uint16_t zero_position_M = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	81bb      	strh	r3, [r7, #12]
	int8_t error;

	current_zero_position.raw = registerRead(AS5047P_ZPOSL);
 80016b2:	2017      	movs	r0, #23
 80016b4:	f000 f890 	bl	80017d8 <registerRead>
 80016b8:	4603      	mov	r3, r0
 80016ba:	813b      	strh	r3, [r7, #8]
	if(current_zero_position.values.data < 0) return -1;

	error = registerWrite(AS5047P_ZPOSL, current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN));
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	2017      	movs	r0, #23
 80016ce:	f000 f8a7 	bl	8001820 <registerWrite>
 80016d2:	4603      	mov	r3, r0
 80016d4:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSL, 0x0000);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2017      	movs	r0, #23
 80016da:	f000 f8a1 	bl	8001820 <registerWrite>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 80016e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <as5147_setZeroPosition+0x5a>
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	e03f      	b.n	8001776 <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f001 fb54 	bl	8002da4 <HAL_Delay>

	current_position.raw = registerRead(AS5047P_ANGLECOM);
 80016fc:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001700:	f000 f86a 	bl	80017d8 <registerRead>
 8001704:	4603      	mov	r3, r0
 8001706:	80bb      	strh	r3, [r7, #4]
	if(current_position.values.data < 0) return -1;

	zero_position_L = (current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (current_position.values.data & AS5047P_ZPOSL_ZPOSL);
 8001708:	893b      	ldrh	r3, [r7, #8]
 800170a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21b      	sxth	r3, r3
 8001712:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001716:	b21a      	sxth	r2, r3
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21b      	sxth	r3, r3
 8001722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	81fb      	strh	r3, [r7, #14]
	zero_position_M = (current_position.values.data >> 6 ) & AS5047P_ZPOSM_ZPOSM;
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001734:	b29b      	uxth	r3, r3
 8001736:	119b      	asrs	r3, r3, #6
 8001738:	b29b      	uxth	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]

	error = registerWrite(AS5047P_ZPOSL, zero_position_L);
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	4619      	mov	r1, r3
 8001742:	2017      	movs	r0, #23
 8001744:	f000 f86c 	bl	8001820 <registerWrite>
 8001748:	4603      	mov	r3, r0
 800174a:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSM, zero_position_M);
 800174c:	89bb      	ldrh	r3, [r7, #12]
 800174e:	4619      	mov	r1, r3
 8001750:	2016      	movs	r0, #22
 8001752:	f000 f865 	bl	8001820 <registerWrite>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	4313      	orrs	r3, r2
 800175e:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8001760:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <as5147_setZeroPosition+0xd2>
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	e003      	b.n	8001776 <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f001 fb18 	bl	8002da4 <HAL_Delay>

	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <as5147_readPosition>:
  * @brief  read current position from AS5147
  * @param  none
  * @retval position value without DAEC (0 ~ 360)
  */

float as5147_readPosition(){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	Frame position = { 0, };
 8001786:	2300      	movs	r3, #0
 8001788:	80bb      	strh	r3, [r7, #4]

	position.raw = registerRead(AS5047P_ANGLECOM);
 800178a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800178e:	f000 f823 	bl	80017d8 <registerRead>
 8001792:	4603      	mov	r3, r0
 8001794:	80bb      	strh	r3, [r7, #4]

	return position.values.data * 360 / 16384.;
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017a4:	fb03 f302 	mul.w	r3, r3, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fee3 	bl	8000574 <__aeabi_i2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <as5147_readPosition+0x54>)
 80017b4:	f7ff f872 	bl	800089c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff fa1a 	bl	8000bf8 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	ee07 3a90 	vmov	s15, r3
}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40d00000 	.word	0x40d00000

080017d8 <registerRead>:
  * @brief  read register according to register address
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @retval register value in register's address
  */

uint16_t registerRead(uint16_t resgister_address){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	int16_t register_data = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	81fb      	strh	r3, [r7, #14]

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_READ);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f856 	bl	800189c <packCommandFrame>
 80017f0:	4603      	mov	r3, r0
 80017f2:	81bb      	strh	r3, [r7, #12]
	write2ByteRegister(&command.raw, chip_num);
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <registerRead+0x44>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fea8 	bl	8002554 <write2ByteRegister>

	register_data = read2ByteRegister(chip_num);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <registerRead+0x44>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fe4f 	bl	80024ac <read2ByteRegister>
 800180e:	4603      	mov	r3, r0
 8001810:	81fb      	strh	r3, [r7, #14]

	return register_data;
 8001812:	89fb      	ldrh	r3, [r7, #14]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001fc 	.word	0x200001fc

08001820 <registerWrite>:
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @param  data register value based on AS5147 datasheet
  * @retval return 0
  */

int8_t registerWrite(uint16_t resgister_address, uint16_t data){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	80fb      	strh	r3, [r7, #6]
 800182c:	4613      	mov	r3, r2
 800182e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef state;

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_WRITE);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f831 	bl	800189c <packCommandFrame>
 800183a:	4603      	mov	r3, r0
 800183c:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <registerWrite+0x78>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fe83 	bl	8002554 <write2ByteRegister>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <registerWrite+0x3e>
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	e017      	b.n	800188e <registerWrite+0x6e>

	command = packCommandFrame(data, AS5047P_ACCESS_WRITE);
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f81a 	bl	800189c <packCommandFrame>
 8001868:	4603      	mov	r3, r0
 800186a:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <registerWrite+0x78>)
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fe6c 	bl	8002554 <write2ByteRegister>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <registerWrite+0x6c>
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e000      	b.n	800188e <registerWrite+0x6e>

	return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001fc 	.word	0x200001fc

0800189c <packCommandFrame>:
  * @param  rw intput read or write state
  * @param  data register value based on AS5147 datasheet
  * @retval Frame struct which has data & R/W state & parity Bit 
  */

Frame packCommandFrame(uint16_t data, uint8_t rw){
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	80fb      	strh	r3, [r7, #6]
 80018a8:	4613      	mov	r3, r2
 80018aa:	717b      	strb	r3, [r7, #5]
	Frame frame = { 0, };
 80018ac:	2300      	movs	r3, #0
 80018ae:	81bb      	strh	r3, [r7, #12]
	frame.values.data = data & AS5047P_FRAME_DATA;
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	89bb      	ldrh	r3, [r7, #12]
 80018ba:	f362 030d 	bfi	r3, r2, #0, #14
 80018be:	81bb      	strh	r3, [r7, #12]
	frame.values.rw = rw;
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	f362 1386 	bfi	r3, r2, #6, #1
 80018ce:	737b      	strb	r3, [r7, #13]
	frame.values.pard = calcParity(frame.raw);
 80018d0:	89bb      	ldrh	r3, [r7, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f80d 	bl	80018f2 <calcParity>
 80018d8:	4603      	mov	r3, r0
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	f362 13c7 	bfi	r3, r2, #7, #1
 80018e6:	737b      	strb	r3, [r7, #13]

	return frame;
 80018e8:	89bb      	ldrh	r3, [r7, #12]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <calcParity>:
/**
  * @brief calculate parity bit
  * @param  data register value
  * @retval data
  */
uint8_t calcParity(uint16_t data){
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 8;              // example for 8-bir (this line scales it up to 16 bit)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	b29a      	uxth	r2, r3
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4053      	eors	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b29a      	uxth	r2, r3
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4053      	eors	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4053      	eors	r3, r2
 800191e:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4053      	eors	r3, r2
 800192a:	80fb      	strh	r3, [r7, #6]

	data = data & 0x0001;
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)data;
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	b2db      	uxtb	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	0000      	movs	r0, r0
	...

08001948 <calcRPM>:
  * @brief calculate rpm based on motor variable angle
  * @param  dif difference between current angle and pre-angle
  * @retval revolution per minute
  */

float calcRPM(float dif){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(dif < 0) dif += 360;
 8001952:	edd7 7a01 	vldr	s15, [r7, #4]
 8001956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d507      	bpl.n	8001970 <calcRPM+0x28>
 8001960:	edd7 7a01 	vldr	s15, [r7, #4]
 8001964:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a08 <calcRPM+0xc0>
 8001968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800196c:	edc7 7a01 	vstr	s15, [r7, #4]
	float w = (dif * (2*PI)/360) * 10000;			// rad/sec
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7fe fe11 	bl	8000598 <__aeabi_f2d>
 8001976:	a320      	add	r3, pc, #128	; (adr r3, 80019f8 <calcRPM+0xb0>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe64 	bl	8000648 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <calcRPM+0xc4>)
 800198e:	f7fe ff85 	bl	800089c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	a319      	add	r3, pc, #100	; (adr r3, 8001a00 <calcRPM+0xb8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe52 	bl	8000648 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f924 	bl	8000bf8 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
	float rpm = (w * 60 / (2*PI));							// rotation/min
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a10 <calcRPM+0xc8>
 80019bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c0:	ee17 0a90 	vmov	r0, s15
 80019c4:	f7fe fde8 	bl	8000598 <__aeabi_f2d>
 80019c8:	a30b      	add	r3, pc, #44	; (adr r3, 80019f8 <calcRPM+0xb0>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe ff65 	bl	800089c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f90d 	bl	8000bf8 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	60bb      	str	r3, [r7, #8]

	return rpm;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	ee07 3a90 	vmov	s15, r3
}
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	53c8d4f1 	.word	0x53c8d4f1
 80019fc:	401921fb 	.word	0x401921fb
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40c38800 	.word	0x40c38800
 8001a08:	43b40000 	.word	0x43b40000
 8001a0c:	40768000 	.word	0x40768000
 8001a10:	42700000 	.word	0x42700000

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f001 f953 	bl	8002cc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f852 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f000 fb10 	bl	8002044 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a24:	f000 fae4 	bl	8001ff0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a28:	f000 fa96 	bl	8001f58 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001a2c:	f000 fa40 	bl	8001eb0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001a30:	f000 f8ec 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a34:	f000 f99a 	bl	8001d6c <MX_TIM2_Init>
  MX_SPI3_Init();
 8001a38:	f000 f8aa 	bl	8001b90 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001a3c:	f000 f9e6 	bl	8001e0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  controllerInit(&htim1);
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <main+0x98>)
 8001a42:	f7ff faa5 	bl	8000f90 <controllerInit>

  if(as5147_Init(&hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin)){
 8001a46:	2202      	movs	r2, #2
 8001a48:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <main+0x9c>)
 8001a4e:	f7ff fdfd 	bl	800164c <as5147_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <main+0x4c>
	  loop_flag = 0;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <main+0xa0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <main+0x5c>
  }else if(as5147_setZeroPosition()){
 8001a60:	f7ff fe1c 	bl	800169c <as5147_setZeroPosition>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <main+0x5c>
	  loop_flag = 0;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <main+0xa0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  }
  start_time = HAL_GetTick();
 8001a70:	f001 f98c 	bl	8002d8c <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <main+0xa4>)
 8001a7a:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(loop_flag){
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <main+0xa0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0fb      	beq.n	8001a7c <main+0x68>
		main_loop();
 8001a84:	f000 fb80 	bl	8002188 <main_loop>
		loop_time = HAL_GetTick() - gtick;
 8001a88:	f001 f980 	bl	8002d8c <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <main+0xa8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <main+0xac>)
 8001a9c:	801a      	strh	r2, [r3, #0]
		gtick = HAL_GetTick();
 8001a9e:	f001 f975 	bl	8002d8c <HAL_GetTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <main+0xa8>)
 8001aa6:	6013      	str	r3, [r2, #0]
	  if(loop_flag){
 8001aa8:	e7e8      	b.n	8001a7c <main+0x68>
 8001aaa:	bf00      	nop
 8001aac:	20001098 	.word	0x20001098
 8001ab0:	20000f00 	.word	0x20000f00
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000e3c 	.word	0x20000e3c
 8001abc:	20000200 	.word	0x20000200
 8001ac0:	20000e22 	.word	0x20000e22

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0a4      	sub	sp, #144	; 0x90
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 f8fe 	bl	8007cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2244      	movs	r2, #68	; 0x44
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f006 f8f0 	bl	8007cd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f001 fe93 	bl	8003820 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001afa:	2302      	movs	r3, #2
 8001afc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b04:	2340      	movs	r3, #64	; 0x40
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b14:	2355      	movs	r3, #85	; 0x55
 8001b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 ff29 	bl	8003988 <HAL_RCC_OscConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001b3c:	f000 fb1e 	bl	800217c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	230f      	movs	r3, #15
 8001b42:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b44:	2303      	movs	r3, #3
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fa2c 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b66:	f000 fb09 	bl	800217c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fc39 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b84:	f000 fafa 	bl	800217c <Error_Handler>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3790      	adds	r7, #144	; 0x90
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_SPI3_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001baa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001bae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bde:	2207      	movs	r2, #7
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bf0:	f002 fdee 	bl	80047d0 <HAL_SPI_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f000 fabf 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000f00 	.word	0x20000f00
 8001c08:	40003c00 	.word	0x40003c00

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09c      	sub	sp, #112	; 0x70
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2234      	movs	r2, #52	; 0x34
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 f844 	bl	8007cd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c4e:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <MX_TIM1_Init+0x15c>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001c52:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c54:	22a9      	movs	r2, #169	; 0xa9
 8001c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c78:	483a      	ldr	r0, [pc, #232]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c7a:	f003 fcbd 	bl	80055f8 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 fa7a 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c92:	4619      	mov	r1, r3
 8001c94:	4833      	ldr	r0, [pc, #204]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001c96:	f004 f963 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ca0:	f000 fa6c 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca4:	482f      	ldr	r0, [pc, #188]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001ca6:	f003 fd69 	bl	800577c <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cb0:	f000 fa64 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4827      	ldr	r0, [pc, #156]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001cc8:	f004 feb0 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cd2:	f000 fa53 	bl	800217c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481a      	ldr	r0, [pc, #104]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001cfc:	f004 f820 	bl	8005d40 <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d06:	f000 fa39 	bl	800217c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001d48:	f004 fef2 	bl	8006b30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001d52:	f000 fa13 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <MX_TIM1_Init+0x158>)
 8001d58:	f000 fd02 	bl	8002760 <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3770      	adds	r7, #112	; 0x70
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20001098 	.word	0x20001098
 8001d68:	40012c00 	.word	0x40012c00

08001d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001d94:	22a9      	movs	r2, #169	; 0xa9
 8001d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001da0:	2263      	movs	r2, #99	; 0x63
 8001da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db0:	4815      	ldr	r0, [pc, #84]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001db2:	f003 fc21 	bl	80055f8 <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dbc:	f000 f9de 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001dce:	f004 f8c7 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001dd8:	f000 f9d0 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001dea:	f004 fe1f 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f000 f9c2 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <MX_TIM2_Init+0x9c>)
 8001dfa:	f003 fc55 	bl	80056a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200010e4 	.word	0x200010e4

08001e0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <MX_TIM3_Init+0xa0>)
 8001e2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e32:	22a9      	movs	r2, #169	; 0xa9
 8001e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e50:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e52:	f003 fbd1 	bl	80055f8 <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e5c:	f000 f98e 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e6e:	f004 f877 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e78:	f000 f980 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e8a:	f004 fdcf 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e94:	f000 f972 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM3_Init+0x9c>)
 8001e9a:	f003 fc05 	bl	80056a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000eb4 	.word	0x20000eb4
 8001eac:	40000400 	.word	0x40000400

08001eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001eb6:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <MX_USART1_UART_Init+0xa0>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef8:	4814      	ldr	r0, [pc, #80]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001efa:	f004 feff 	bl	8006cfc <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f04:	f000 f93a 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4810      	ldr	r0, [pc, #64]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001f0c:	f005 fdee 	bl	8007aec <HAL_UARTEx_SetTxFifoThreshold>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f16:	f000 f931 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001f1e:	f005 fe23 	bl	8007b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f28:	f000 f928 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001f2e:	f005 fda4 	bl	8007a7a <HAL_UARTEx_DisableFifoMode>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f38:	f000 f920 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_DMA(&huart1, byte_data, 16);
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4905      	ldr	r1, [pc, #20]	; (8001f54 <MX_USART1_UART_Init+0xa4>)
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <MX_USART1_UART_Init+0x9c>)
 8001f42:	f004 ffc1 	bl	8006ec8 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000fc8 	.word	0x20000fc8
 8001f50:	40013800 	.word	0x40013800
 8001f54:	20000e24 	.word	0x20000e24

08001f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <MX_USART2_UART_Init+0x94>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001fa2:	f004 feab 	bl	8006cfc <HAL_UART_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fac:	f000 f8e6 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001fb4:	f005 fd9a 	bl	8007aec <HAL_UARTEx_SetTxFifoThreshold>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fbe:	f000 f8dd 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001fc6:	f005 fdcf 	bl	8007b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f000 f8d4 	bl	800217c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_USART2_UART_Init+0x90>)
 8001fd6:	f005 fd50 	bl	8007a7a <HAL_UARTEx_DisableFifoMode>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fe0:	f000 f8cc 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20001130 	.word	0x20001130
 8001fec:	40004400 	.word	0x40004400

08001ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_DMA_Init+0x50>)
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <MX_DMA_Init+0x50>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6493      	str	r3, [r2, #72]	; 0x48
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_DMA_Init+0x50>)
 8002004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_DMA_Init+0x50>)
 8002010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <MX_DMA_Init+0x50>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6493      	str	r3, [r2, #72]	; 0x48
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_DMA_Init+0x50>)
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200b      	movs	r0, #11
 800202c:	f000 ffb7 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002030:	200b      	movs	r0, #11
 8002032:	f000 ffce 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <MX_GPIO_Init+0x78>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <MX_GPIO_Init+0x78>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_GPIO_Init+0x78>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_GPIO_Init+0x78>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <MX_GPIO_Init+0x78>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_GPIO_Init+0x78>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2102      	movs	r1, #2
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f001 fbad 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002096:	2302      	movs	r3, #2
 8002098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f001 fa1c 	bl	80034ec <HAL_GPIO_Init>

}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <TimerISR>:

/* USER CODE BEGIN 4 */
//! NOTE:: 0.1ms 주기. @mhlee
void TimerISR(void){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	motor.pre_ang = motor.ang;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <TimerISR+0x20>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <TimerISR+0x20>)
 80020ca:	6013      	str	r3, [r2, #0]
	motor.ang = as5147_readPosition();
 80020cc:	f7ff fb58 	bl	8001780 <as5147_readPosition>
 80020d0:	eef0 7a40 	vmov.f32	s15, s0
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <TimerISR+0x20>)
 80020d6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000e80 	.word	0x20000e80

080020e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huartx){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	if(huartx->Instance == huart1.Instance){
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_UART_RxCpltCallback+0x2c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x22>
		spectrum_read();
 80020f8:	f000 f900 	bl	80022fc <spectrum_read>
		HAL_UART_Receive_DMA(&huart1, byte_data, 16);
 80020fc:	2210      	movs	r2, #16
 80020fe:	4905      	ldr	r1, [pc, #20]	; (8002114 <HAL_UART_RxCpltCallback+0x30>)
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <HAL_UART_RxCpltCallback+0x2c>)
 8002102:	f004 fee1 	bl	8006ec8 <HAL_UART_Receive_DMA>
	}
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000fc8 	.word	0x20000fc8
 8002114:	20000e24 	.word	0x20000e24

08002118 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d102      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x18>
		TimerISR();
 800212a:	f7ff ffc9 	bl	80020c0 <TimerISR>
		else if(transpc_index ==1){
			get_packet_rc();
			transpc_index--;
		}
	}
}
 800212e:	e01d      	b.n	800216c <HAL_TIM_PeriodElapsedCallback+0x54>
	else if(htim->Instance == TIM3){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d118      	bne.n	800216c <HAL_TIM_PeriodElapsedCallback+0x54>
		if(transpc_index==0){
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <HAL_TIM_PeriodElapsedCallback+0x3c>
			get_packet_moter();
 8002142:	f000 fd25 	bl	8002b90 <get_packet_moter>
			transpc_index++;
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002150:	701a      	strb	r2, [r3, #0]
}
 8002152:	e00b      	b.n	800216c <HAL_TIM_PeriodElapsedCallback+0x54>
		else if(transpc_index ==1){
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_TIM_PeriodElapsedCallback+0x54>
			get_packet_rc();
 800215c:	f000 fd38 	bl	8002bd0 <get_packet_rc>
			transpc_index--;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800216a:	701a      	strb	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40000400 	.word	0x40000400
 8002178:	20000204 	.word	0x20000204

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	e7fe      	b.n	8002184 <Error_Handler+0x8>
	...

08002188 <main_loop>:
#include "main_loop.h"

void main_loop(){
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	ed2d 8b02 	vpush	{d8}
 800218e:	b084      	sub	sp, #16
 8002190:	af04      	add	r7, sp, #16
	motor.rpm = calcRPM(motor.pre_ang - motor.ang);
 8002192:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <main_loop+0x15c>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <main_loop+0x15c>)
 800219a:	edd3 7a01 	vldr	s15, [r3, #4]
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	eeb0 0a67 	vmov.f32	s0, s15
 80021a6:	f7ff fbcf 	bl	8001948 <calcRPM>
 80021aa:	eef0 7a40 	vmov.f32	s15, s0
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <main_loop+0x15c>)
 80021b0:	edc3 7a03 	vstr	s15, [r3, #12]
	setpoint_value = setpoint(rc);
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <main_loop+0x160>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2000      	movs	r0, #0
 80021ba:	4610      	mov	r0, r2
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2100      	movs	r1, #0
 80021c0:	4611      	mov	r1, r2
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	2400      	movs	r4, #0
 80021c6:	4614      	mov	r4, r2
 80021c8:	899a      	ldrh	r2, [r3, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	f362 030f 	bfi	r3, r2, #0, #16
 80021d0:	4622      	mov	r2, r4
 80021d2:	f7ff f88a 	bl	80012ea <setpoint>
 80021d6:	eef0 6a40 	vmov.f32	s13, s0
 80021da:	eeb0 7a60 	vmov.f32	s14, s1
 80021de:	eef0 7a41 	vmov.f32	s15, s2
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <main_loop+0x164>)
 80021e4:	edc3 6a00 	vstr	s13, [r3]
 80021e8:	ed83 7a01 	vstr	s14, [r3, #4]
 80021ec:	edc3 7a02 	vstr	s15, [r3, #8]
	mode = getMode(rc);
 80021f0:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <main_loop+0x160>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2000      	movs	r0, #0
 80021f6:	4610      	mov	r0, r2
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4611      	mov	r1, r2
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	2400      	movs	r4, #0
 8002202:	4614      	mov	r4, r2
 8002204:	899a      	ldrh	r2, [r3, #12]
 8002206:	2300      	movs	r3, #0
 8002208:	f362 030f 	bfi	r3, r2, #0, #16
 800220c:	4622      	mov	r2, r4
 800220e:	f7fe fee3 	bl	8000fd8 <getMode>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <main_loop+0x168>)
 8002218:	701a      	strb	r2, [r3, #0]

	if(mode == NON_MOMENT){
 800221a:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <main_loop+0x168>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d117      	bne.n	8002252 <main_loop+0xca>
#if 0
		speed_command = motor.rpm + speedController(setpoint_value, motor);
		moment_command = 0;
#else
		speed_command = map(rc.throttle, RC_MIN, RC_MAX, PWM_MIN, PWM_MAX);
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <main_loop+0x160>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222e:	f240 733a 	movw	r3, #1850	; 0x73a
 8002232:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8002236:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800223a:	f44f 70ab 	mov.w	r0, #342	; 0x156
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	f7fe ff6f 	bl	8001124 <map>
 8002246:	eef0 7a40 	vmov.f32	s15, s0
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <main_loop+0x16c>)
 800224c:	edc3 7a00 	vstr	s15, [r3]
 8002250:	e033      	b.n	80022ba <main_loop+0x132>
#endif
	}else if(mode == MOMENT){
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <main_loop+0x168>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d127      	bne.n	80022aa <main_loop+0x122>
		moment_command = motor.rpm + momentController(setpoint_value, motor);
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <main_loop+0x15c>)
 800225c:	ed93 8a03 	vldr	s16, [r3, #12]
 8002260:	4c20      	ldr	r4, [pc, #128]	; (80022e4 <main_loop+0x15c>)
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <main_loop+0x164>)
 8002264:	edd3 6a00 	vldr	s13, [r3]
 8002268:	ed93 7a01 	vldr	s14, [r3, #4]
 800226c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002270:	466d      	mov	r5, sp
 8002272:	f104 0310 	add.w	r3, r4, #16
 8002276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800227a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800227e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002282:	eeb0 0a66 	vmov.f32	s0, s13
 8002286:	eef0 0a47 	vmov.f32	s1, s14
 800228a:	eeb0 1a67 	vmov.f32	s2, s15
 800228e:	f7fe fec6 	bl	800101e <momentController>
 8002292:	eef0 7a40 	vmov.f32	s15, s0
 8002296:	ee78 7a27 	vadd.f32	s15, s16, s15
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <main_loop+0x170>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
		speed_command = 0;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <main_loop+0x16c>)
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e007      	b.n	80022ba <main_loop+0x132>
	}else{
		speed_command = 0;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <main_loop+0x16c>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
		moment_command = 0;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <main_loop+0x170>)
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
	}

	outputMotor(speed_command, moment_command, mode);
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <main_loop+0x16c>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <main_loop+0x170>)
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <main_loop+0x168>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	eef0 0a47 	vmov.f32	s1, s14
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f7fe fec4 	bl	8001060 <outputMotor>
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	ecbd 8b02 	vpop	{d8}
 80022e0:	bdb0      	pop	{r4, r5, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000e80 	.word	0x20000e80
 80022e8:	20000e14 	.word	0x20000e14
 80022ec:	2000108c 	.word	0x2000108c
 80022f0:	20000fc4 	.word	0x20000fc4
 80022f4:	20000eac 	.word	0x20000eac
 80022f8:	20000eb0 	.word	0x20000eb0

080022fc <spectrum_read>:
/** @J.Yeon
  * @brief  uart로 받은 값을 각 채널별 data 저장
  * @param  None
  * @retval None
  */
void spectrum_read(){
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
    fade = byte_data[0];
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <spectrum_read+0xdc>)
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	4b35      	ldr	r3, [pc, #212]	; (80023dc <spectrum_read+0xe0>)
 8002308:	701a      	strb	r2, [r3, #0]
    sys = byte_data[1];
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <spectrum_read+0xdc>)
 800230c:	785a      	ldrb	r2, [r3, #1]
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <spectrum_read+0xe4>)
 8002310:	701a      	strb	r2, [r3, #0]

    // 비트연산을 통한 각채널별 data 추출
    for (int index = 1; index <= 7; index++) {
 8002312:	2301      	movs	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	e039      	b.n	800238c <spectrum_read+0x90>
        bit_data = (byte_data[index * 2] << 8) | byte_data[(index * 2) + 1];
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <spectrum_read+0xdc>)
 800231e:	5cd3      	ldrb	r3, [r2, r3]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	b21a      	sxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	3301      	adds	r3, #1
 800232a:	492b      	ldr	r1, [pc, #172]	; (80023d8 <spectrum_read+0xdc>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	b21b      	sxth	r3, r3
 8002330:	4313      	orrs	r3, r2
 8002332:	b21b      	sxth	r3, r3
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <spectrum_read+0xe8>)
 8002338:	801a      	strh	r2, [r3, #0]
        uint8_t phase = bit_data >> 15;
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <spectrum_read+0xe8>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	0bdb      	lsrs	r3, r3, #15
 8002340:	b29b      	uxth	r3, r3
 8002342:	70fb      	strb	r3, [r7, #3]
        uint8_t id = (bit_data & 0x7800) >> 11;
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <spectrum_read+0xe8>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	12db      	asrs	r3, r3, #11
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	70bb      	strb	r3, [r7, #2]
        uint16_t pos = bit_data & 0x07FF;
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <spectrum_read+0xe8>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235a:	803b      	strh	r3, [r7, #0]
        
        if(pos >= RC_MIN && pos <= RC_MAX){
 800235c:	883b      	ldrh	r3, [r7, #0]
 800235e:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002362:	d310      	bcc.n	8002386 <spectrum_read+0x8a>
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	f240 62aa 	movw	r2, #1706	; 0x6aa
 800236a:	4293      	cmp	r3, r2
 800236c:	d80b      	bhi.n	8002386 <spectrum_read+0x8a>
            channel[id].id = id;
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <spectrum_read+0xec>)
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	78ba      	ldrb	r2, [r7, #2]
 8002378:	705a      	strb	r2, [r3, #1]
            channel[id].pos = pos;
 800237a:	78bb      	ldrb	r3, [r7, #2]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <spectrum_read+0xec>)
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	883a      	ldrh	r2, [r7, #0]
 8002384:	805a      	strh	r2, [r3, #2]
    for (int index = 1; index <= 7; index++) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3301      	adds	r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b07      	cmp	r3, #7
 8002390:	ddc2      	ble.n	8002318 <spectrum_read+0x1c>
        }
    }

    // 각 채널별 입력값 입력
    rc.throttle = channel[0].pos;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <spectrum_read+0xec>)
 8002394:	885a      	ldrh	r2, [r3, #2]
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <spectrum_read+0xf0>)
 8002398:	801a      	strh	r2, [r3, #0]
	rc. roll = channel[1].pos;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <spectrum_read+0xec>)
 800239c:	88da      	ldrh	r2, [r3, #6]
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <spectrum_read+0xf0>)
 80023a0:	805a      	strh	r2, [r3, #2]
	rc. pitch = channel[2].pos;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <spectrum_read+0xec>)
 80023a4:	895a      	ldrh	r2, [r3, #10]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <spectrum_read+0xf0>)
 80023a8:	809a      	strh	r2, [r3, #4]
	rc. yaw = channel[3].pos;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <spectrum_read+0xec>)
 80023ac:	89da      	ldrh	r2, [r3, #14]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <spectrum_read+0xf0>)
 80023b0:	80da      	strh	r2, [r3, #6]
	rc. aux1 = channel[4].pos;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <spectrum_read+0xec>)
 80023b4:	8a5a      	ldrh	r2, [r3, #18]
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <spectrum_read+0xf0>)
 80023b8:	811a      	strh	r2, [r3, #8]
	rc. aux2 = channel[5].pos;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <spectrum_read+0xec>)
 80023bc:	8ada      	ldrh	r2, [r3, #22]
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <spectrum_read+0xf0>)
 80023c0:	815a      	strh	r2, [r3, #10]
	rc. aux3 = channel[6].pos;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <spectrum_read+0xec>)
 80023c4:	8b5a      	ldrh	r2, [r3, #26]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <spectrum_read+0xf0>)
 80023c8:	819a      	strh	r2, [r3, #12]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000e24 	.word	0x20000e24
 80023dc:	20000ea8 	.word	0x20000ea8
 80023e0:	20000e34 	.word	0x20000e34
 80023e4:	20000e36 	.word	0x20000e36
 80023e8:	20000e40 	.word	0x20000e40
 80023ec:	20000e14 	.word	0x20000e14

080023f0 <addChip>:
  * @param	GPIO_port GPIO init structure definition
  * @param	GPIO_num GPIO pin number
  * @retval boolean
  * success 1, if fail return false
  */
uint8_t addChip(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
	uint8_t chip_num = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	75bb      	strb	r3, [r7, #22]
	uint8_t index = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]

	for(; index < 256; index++){
		if(chip_list[index].CS_pin == 0){
 8002406:	7dfa      	ldrb	r2, [r7, #23]
 8002408:	4927      	ldr	r1, [pc, #156]	; (80024a8 <addChip+0xb8>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	3308      	adds	r3, #8
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <addChip+0x3a>
			chip_num = index;
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	75bb      	strb	r3, [r7, #22]
			break;
 8002420:	bf00      	nop
		}
	}

	if(index != 255){
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d039      	beq.n	800249c <addChip+0xac>
 8002428:	e003      	b.n	8002432 <addChip+0x42>
	for(; index < 256; index++){
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
		if(chip_list[index].CS_pin == 0){
 8002430:	e7e9      	b.n	8002406 <addChip+0x16>
		chip_list[index].hspi = hspix;
 8002432:	7dfa      	ldrb	r2, [r7, #23]
 8002434:	491c      	ldr	r1, [pc, #112]	; (80024a8 <addChip+0xb8>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_port = GPIO_port;
 8002444:	7dfa      	ldrb	r2, [r7, #23]
 8002446:	4918      	ldr	r1, [pc, #96]	; (80024a8 <addChip+0xb8>)
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_pin = GPIO_num;
 8002458:	7dfa      	ldrb	r2, [r7, #23]
 800245a:	4913      	ldr	r1, [pc, #76]	; (80024a8 <addChip+0xb8>)
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3308      	adds	r3, #8
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 800246c:	7dba      	ldrb	r2, [r7, #22]
 800246e:	490e      	ldr	r1, [pc, #56]	; (80024a8 <addChip+0xb8>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3304      	adds	r3, #4
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	7dba      	ldrb	r2, [r7, #22]
 8002480:	4909      	ldr	r1, [pc, #36]	; (80024a8 <addChip+0xb8>)
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3308      	adds	r3, #8
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4619      	mov	r1, r3
 8002494:	f001 f9ac 	bl	80037f0 <HAL_GPIO_WritePin>

		return 0;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <addChip+0xae>
	}else{
		return -1;
 800249c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000208 	.word	0x20000208

080024ac <read2ByteRegister>:
/**
  * @brief  read register value
  * @param  chip_num spi chip number
  * @retval data in register
  */
uint16_t read2ByteRegister(uint8_t chip_num){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
	uint16_t read_data = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	813b      	strh	r3, [r7, #8]
	uint16_t* pbuffer = &read_data;
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	4923      	ldr	r1, [pc, #140]	; (8002550 <read2ByteRegister+0xa4>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	491e      	ldr	r1, [pc, #120]	; (8002550 <read2ByteRegister+0xa4>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3308      	adds	r3, #8
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	f001 f982 	bl	80037f0 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Receive(chip_list[chip_num].hspi, (uint8_t*)pbuffer, 1, HAL_MAX_DELAY);
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4918      	ldr	r1, [pc, #96]	; (8002550 <read2ByteRegister+0xa4>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	2201      	movs	r2, #1
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	f002 fb7d 	bl	8004c02 <HAL_SPI_Receive>
 8002508:	4603      	mov	r3, r0
 800250a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	4910      	ldr	r1, [pc, #64]	; (8002550 <read2ByteRegister+0xa4>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3304      	adds	r3, #4
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <read2ByteRegister+0xa4>)
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3308      	adds	r3, #8
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4619      	mov	r1, r3
 8002534:	f001 f95c 	bl	80037f0 <HAL_GPIO_WritePin>

	if(state != HAL_OK){
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <read2ByteRegister+0x98>
		return state;
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	b29b      	uxth	r3, r3
 8002542:	e000      	b.n	8002546 <read2ByteRegister+0x9a>
	}

	return read_data;
 8002544:	893b      	ldrh	r3, [r7, #8]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000208 	.word	0x20000208

08002554 <write2ByteRegister>:
  * @brief  write register value
  * @param	command data what will write in register
  * @param  chip_num spi chip number
  * @retval HAL status
  */
HAL_StatusTypeDef write2ByteRegister(uint16_t* command, uint8_t chip_num){
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	4920      	ldr	r1, [pc, #128]	; (80025e4 <write2ByteRegister+0x90>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3304      	adds	r3, #4
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	491b      	ldr	r1, [pc, #108]	; (80025e4 <write2ByteRegister+0x90>)
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3308      	adds	r3, #8
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	f001 f932 	bl	80037f0 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Transmit(chip_list[chip_num].hspi, (uint8_t*)command, 1, HAL_MAX_DELAY);
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4915      	ldr	r1, [pc, #84]	; (80025e4 <write2ByteRegister+0x90>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	2201      	movs	r2, #1
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f002 f9bf 	bl	8004926 <HAL_SPI_Transmit>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <write2ByteRegister+0x90>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3304      	adds	r3, #4
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4908      	ldr	r1, [pc, #32]	; (80025e4 <write2ByteRegister+0x90>)
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3308      	adds	r3, #8
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	f001 f90c 	bl	80037f0 <HAL_GPIO_WritePin>

	return state;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000208 	.word	0x20000208

080025e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_MspInit+0x44>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_MspInit+0x44>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_MspInit+0x44>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_MspInit+0x44>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_MspInit+0x44>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_MspInit+0x44>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800261e:	f001 f9a3 	bl	8003968 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_SPI_MspInit+0x7c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d127      	bne.n	80026a2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_SPI_MspInit+0x80>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002682:	2338      	movs	r3, #56	; 0x38
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002692:	2306      	movs	r3, #6
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <HAL_SPI_MspInit+0x84>)
 800269e:	f000 ff25 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40003c00 	.word	0x40003c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	48000400 	.word	0x48000400

080026b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_TIM_Base_MspInit+0x9c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10c      	bne.n	80026e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d4:	6613      	str	r3, [r2, #96]	; 0x60
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026e2:	e032      	b.n	800274a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d114      	bne.n	8002718 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	201c      	movs	r0, #28
 800270c:	f000 fc47 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002710:	201c      	movs	r0, #28
 8002712:	f000 fc5e 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 8002716:	e018      	b.n	800274a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_TIM_Base_MspInit+0xa4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d113      	bne.n	800274a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0xa0>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201d      	movs	r0, #29
 8002740:	f000 fc2d 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002744:	201d      	movs	r0, #29
 8002746:	f000 fc44 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40000400 	.word	0x40000400

08002760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_TIM_MspPostInit+0x68>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11d      	bne.n	80027be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a11      	ldr	r2, [pc, #68]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_OUTPUT_Pin;
 800279a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027ac:	2306      	movs	r3, #6
 80027ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f000 fe97 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_UART_MspInit+0x168>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d16f      	bne.n	80028d2 <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f2:	4b52      	ldr	r3, [pc, #328]	; (800293c <HAL_UART_MspInit+0x16c>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	4a51      	ldr	r2, [pc, #324]	; (800293c <HAL_UART_MspInit+0x16c>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6613      	str	r3, [r2, #96]	; 0x60
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_UART_MspInit+0x16c>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	4a4b      	ldr	r2, [pc, #300]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800284c:	2307      	movs	r3, #7
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285a:	f000 fe47 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Spektrum_Pin;
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800286e:	2307      	movs	r3, #7
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Spektrum_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4831      	ldr	r0, [pc, #196]	; (8002940 <HAL_UART_MspInit+0x170>)
 800287a:	f000 fe37 	bl	80034ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_UART_MspInit+0x174>)
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_UART_MspInit+0x178>)
 8002882:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_UART_MspInit+0x174>)
 8002886:	2218      	movs	r2, #24
 8002888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_UART_MspInit+0x174>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_UART_MspInit+0x174>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_UART_MspInit+0x174>)
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_UART_MspInit+0x174>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028aa:	2220      	movs	r2, #32
 80028ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028b4:	4823      	ldr	r0, [pc, #140]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028b6:	f000 fba7 	bl	8003008 <HAL_DMA_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80028c0:	f7ff fc5c 	bl	800217c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_UART_MspInit+0x174>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028d0:	e02d      	b.n	800292e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_UART_MspInit+0x17c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d128      	bne.n	800292e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_UART_MspInit+0x16c>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_UART_MspInit+0x16c>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_UART_MspInit+0x16c>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_UART_MspInit+0x16c>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_UART_MspInit+0x16c>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_UART_MspInit+0x16c>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TMTC_Pin|GPIO_PIN_3;
 800290c:	230c      	movs	r3, #12
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800291c:	2307      	movs	r3, #7
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292a:	f000 fddf 	bl	80034ec <HAL_GPIO_Init>
}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	; 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40013800 	.word	0x40013800
 800293c:	40021000 	.word	0x40021000
 8002940:	48000400 	.word	0x48000400
 8002944:	20000f64 	.word	0x20000f64
 8002948:	40020008 	.word	0x40020008
 800294c:	40004400 	.word	0x40004400

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 f9e4 	bl	8002d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Channel1_IRQHandler+0x10>)
 80029aa:	f000 fc50 	bl	800324e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000f64 	.word	0x20000f64

080029b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM2_IRQHandler+0x10>)
 80029be:	f003 f83f 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200010e4 	.word	0x200010e4

080029cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM3_IRQHandler+0x10>)
 80029d2:	f003 f835 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000eb4 	.word	0x20000eb4

080029e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_kill>:

int _kill(int pid, int sig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029fa:	f005 f941 	bl	8007c80 <__errno>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2216      	movs	r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
	return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_exit>:

void _exit (int status)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe7 	bl	80029f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a22:	e7fe      	b.n	8002a22 <_exit+0x12>

08002a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
	}

return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e009      	b.n	8002a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf1      	blt.n	8002a70 <_write+0x12>
	}
	return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_close>:

int _close(int file)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	605a      	str	r2, [r3, #4]
	return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_isatty>:

int _isatty(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f005 f8a6 	bl	8007c80 <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20008000 	.word	0x20008000
 8002b60:	00000400 	.word	0x00000400
 8002b64:	20000e08 	.word	0x20000e08
 8002b68:	200011f8 	.word	0x200011f8

08002b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SystemInit+0x20>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <SystemInit+0x20>)
 8002b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <get_packet_moter>:
    payload.F = 0x00;
    payload.G = 0x00;
    trans_pc(5,0);
}
*/
void get_packet_moter(){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	payload.A = 111;
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <get_packet_moter+0x3c>)
 8002b96:	226f      	movs	r2, #111	; 0x6f
 8002b98:	801a      	strh	r2, [r3, #0]
	payload.B = 111;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <get_packet_moter+0x3c>)
 8002b9c:	226f      	movs	r2, #111	; 0x6f
 8002b9e:	805a      	strh	r2, [r3, #2]
	payload.C = 111;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <get_packet_moter+0x3c>)
 8002ba2:	226f      	movs	r2, #111	; 0x6f
 8002ba4:	809a      	strh	r2, [r3, #4]
	payload.D = 111;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <get_packet_moter+0x3c>)
 8002ba8:	226f      	movs	r2, #111	; 0x6f
 8002baa:	80da      	strh	r2, [r3, #6]
	payload.E = 111;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <get_packet_moter+0x3c>)
 8002bae:	226f      	movs	r2, #111	; 0x6f
 8002bb0:	811a      	strh	r2, [r3, #8]
    payload.F = 0x00;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <get_packet_moter+0x3c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	815a      	strh	r2, [r3, #10]
    payload.G = 0x00;
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <get_packet_moter+0x3c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	819a      	strh	r2, [r3, #12]
    trans_pc(5,0);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2005      	movs	r0, #5
 8002bc2:	f000 f825 	bl	8002c10 <trans_pc>
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200011c0 	.word	0x200011c0

08002bd0 <get_packet_rc>:
	payload.G = rc.aux3;

    trans_pc(7,1);
}
*/
void get_packet_rc(){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	payload.A = 222;
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <get_packet_rc+0x3c>)
 8002bd6:	22de      	movs	r2, #222	; 0xde
 8002bd8:	801a      	strh	r2, [r3, #0]
	payload.B = 222;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <get_packet_rc+0x3c>)
 8002bdc:	22de      	movs	r2, #222	; 0xde
 8002bde:	805a      	strh	r2, [r3, #2]
	payload.C = 222;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <get_packet_rc+0x3c>)
 8002be2:	22de      	movs	r2, #222	; 0xde
 8002be4:	809a      	strh	r2, [r3, #4]
	payload.D = 222;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <get_packet_rc+0x3c>)
 8002be8:	22de      	movs	r2, #222	; 0xde
 8002bea:	80da      	strh	r2, [r3, #6]
	payload.E = 222;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <get_packet_rc+0x3c>)
 8002bee:	22de      	movs	r2, #222	; 0xde
 8002bf0:	811a      	strh	r2, [r3, #8]
	payload.F = 222;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <get_packet_rc+0x3c>)
 8002bf4:	22de      	movs	r2, #222	; 0xde
 8002bf6:	815a      	strh	r2, [r3, #10]
	payload.G = 222;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <get_packet_rc+0x3c>)
 8002bfa:	22de      	movs	r2, #222	; 0xde
 8002bfc:	819a      	strh	r2, [r3, #12]

    trans_pc(7,1);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2007      	movs	r0, #7
 8002c02:	f000 f805 	bl	8002c10 <trans_pc>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200011c0 	.word	0x200011c0

08002c10 <trans_pc>:
  * @brief  패킷 정의 후 UART 송신
  * @param  uint8_t 보내는 패킷구조체 중 실제 구조체 크기
  * @param  uint8_t 메시지ID
  * @retval None
  */
void trans_pc(uint8_t len, uint8_t msgid){
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71bb      	strb	r3, [r7, #6]
	tp.header = STX;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <trans_pc+0x54>)
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
	tp.len = len;
 8002c26:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <trans_pc+0x54>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	7053      	strb	r3, [r2, #1]
	tp.msgid = msgid;
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <trans_pc+0x54>)
 8002c2e:	79bb      	ldrb	r3, [r7, #6]
 8002c30:	7093      	strb	r3, [r2, #2]
	tp.payload = payload;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <trans_pc+0x54>)
 8002c34:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <trans_pc+0x58>)
 8002c36:	3304      	adds	r3, #4
 8002c38:	6814      	ldr	r4, [r2, #0]
 8002c3a:	6850      	ldr	r0, [r2, #4]
 8002c3c:	6891      	ldr	r1, [r2, #8]
 8002c3e:	601c      	str	r4, [r3, #0]
 8002c40:	6058      	str	r0, [r3, #4]
 8002c42:	6099      	str	r1, [r3, #8]
 8002c44:	8992      	ldrh	r2, [r2, #12]
 8002c46:	819a      	strh	r2, [r3, #12]
	tp.end = ETX;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <trans_pc+0x54>)
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(&huart2, &tp, sizeof(tp), 1000); //읽어드린 값 터미널로 출력
 8002c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c52:	2214      	movs	r2, #20
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <trans_pc+0x54>)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <trans_pc+0x5c>)
 8002c58:	f004 f8a0 	bl	8006d9c <HAL_UART_Transmit>
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	200011d0 	.word	0x200011d0
 8002c68:	200011c0 	.word	0x200011c0
 8002c6c:	20001130 	.word	0x20001130

08002c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopForever+0x6>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopForever+0xe>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopForever+0x16>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c9a:	f7ff ff67 	bl	8002b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f004 fff5 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ca2:	f7fe feb7 	bl	8001a14 <main>

08002ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ca6:	e7fe      	b.n	8002ca6 <LoopForever>
  ldr   r0, =_estack
 8002ca8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cb4:	0800aad4 	.word	0x0800aad4
  ldr r2, =_sbss
 8002cb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cbc:	200011f8 	.word	0x200011f8

08002cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC1_2_IRQHandler>

08002cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f95b 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f80e 	bl	8002cf4 <HAL_InitTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	71fb      	strb	r3, [r7, #7]
 8002ce2:	e001      	b.n	8002ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ce4:	f7ff fc80 	bl	80025e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ce8:	79fb      	ldrb	r3, [r7, #7]

}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_InitTick+0x68>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d022      	beq.n	8002d4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_InitTick+0x6c>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_InitTick+0x68>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f966 	bl	8002fee <HAL_SYSTICK_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10f      	bne.n	8002d48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d809      	bhi.n	8002d42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	f04f 30ff 	mov.w	r0, #4294967295
 8002d36:	f000 f932 	bl	8002f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_InitTick+0x70>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e007      	b.n	8002d52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e004      	b.n	8002d52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	2000000c 	.word	0x2000000c
 8002d60:	20000004 	.word	0x20000004
 8002d64:	20000008 	.word	0x20000008

08002d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_IncTick+0x1c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_IncTick+0x20>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <HAL_IncTick+0x1c>)
 8002d78:	6013      	str	r3, [r2, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	200011e4 	.word	0x200011e4
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_GetTick+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200011e4 	.word	0x200011e4

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff ffee 	bl	8002d8c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d004      	beq.n	8002dc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_Delay+0x40>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dc8:	bf00      	nop
 8002dca:	f7ff ffdf 	bl	8002d8c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d8f7      	bhi.n	8002dca <HAL_Delay+0x26>
  {
  }
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff40 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff90 	bl	8002edc <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5f 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff33 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa4 	bl	8002f44 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e08d      	b.n	8003136 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_DMA_Init+0x138>)
 8003022:	429a      	cmp	r2, r3
 8003024:	d80f      	bhi.n	8003046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4b45      	ldr	r3, [pc, #276]	; (8003144 <HAL_DMA_Init+0x13c>)
 800302e:	4413      	add	r3, r2
 8003030:	4a45      	ldr	r2, [pc, #276]	; (8003148 <HAL_DMA_Init+0x140>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	009a      	lsls	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a42      	ldr	r2, [pc, #264]	; (800314c <HAL_DMA_Init+0x144>)
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
 8003044:	e00e      	b.n	8003064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <HAL_DMA_Init+0x148>)
 800304e:	4413      	add	r3, r2
 8003050:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_DMA_Init+0x140>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a3c      	ldr	r2, [pc, #240]	; (8003154 <HAL_DMA_Init+0x14c>)
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9b6 	bl	8003428 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c4:	d102      	bne.n	80030cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_DMA_Init+0x104>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d80c      	bhi.n	800310c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9d6 	bl	80034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	e008      	b.n	800311e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40020407 	.word	0x40020407
 8003144:	bffdfff8 	.word	0xbffdfff8
 8003148:	cccccccd 	.word	0xcccccccd
 800314c:	40020000 	.word	0x40020000
 8003150:	bffdfbf8 	.word	0xbffdfbf8
 8003154:	40020400 	.word	0x40020400

08003158 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_DMA_Start_IT+0x20>
 8003174:	2302      	movs	r3, #2
 8003176:	e066      	b.n	8003246 <HAL_DMA_Start_IT+0xee>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d155      	bne.n	8003238 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f8fb 	bl	80033ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 020e 	orr.w	r2, r2, #14
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e00f      	b.n	80031f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 020a 	orr.w	r2, r2, #10
 80031ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e005      	b.n	8003244 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003240:	2302      	movs	r3, #2
 8003242:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2204      	movs	r2, #4
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d026      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x7a>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0204 	bic.w	r2, r2, #4
 80032a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2104      	movs	r1, #4
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d071      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032c6:	e06c      	b.n	80033a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2202      	movs	r2, #2
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02e      	beq.n	800333a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d029      	beq.n	800333a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 020a 	bic.w	r2, r2, #10
 8003302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2102      	movs	r1, #2
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d038      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003338:	e033      	b.n	80033a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2208      	movs	r2, #8
 8003344:	409a      	lsls	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d025      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020e 	bic.w	r2, r2, #14
 8003366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f202 	lsl.w	r2, r1, r2
 800337a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
}
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d108      	bne.n	800340c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800340a:	e007      	b.n	800341c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003438:	429a      	cmp	r2, r3
 800343a:	d802      	bhi.n	8003442 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e001      	b.n	8003446 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003444:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3b08      	subs	r3, #8
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	009a      	lsls	r2, r3, #2
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003472:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2201      	movs	r2, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40020407 	.word	0x40020407
 8003494:	40020800 	.word	0x40020800
 8003498:	40020820 	.word	0x40020820
 800349c:	cccccccd 	.word	0xcccccccd
 80034a0:	40020880 	.word	0x40020880

080034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	1000823f 	.word	0x1000823f
 80034e8:	40020940 	.word	0x40020940

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034fa:	e15a      	b.n	80037b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 814c 	beq.w	80037ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d00b      	beq.n	8003534 <HAL_GPIO_Init+0x48>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d007      	beq.n	8003534 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003528:	2b11      	cmp	r3, #17
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b12      	cmp	r3, #18
 8003532:	d130      	bne.n	8003596 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356a:	2201      	movs	r2, #1
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0201 	and.w	r2, r3, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0xea>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b12      	cmp	r3, #18
 80035d4:	d123      	bne.n	800361e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a6 	beq.w	80037ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003660:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <HAL_GPIO_Init+0x2e4>)
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	4a5a      	ldr	r2, [pc, #360]	; (80037d0 <HAL_GPIO_Init+0x2e4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6613      	str	r3, [r2, #96]	; 0x60
 800366c:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <HAL_GPIO_Init+0x2e4>)
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003678:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_GPIO_Init+0x2e8>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036a2:	d01f      	beq.n	80036e4 <HAL_GPIO_Init+0x1f8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a4c      	ldr	r2, [pc, #304]	; (80037d8 <HAL_GPIO_Init+0x2ec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d019      	beq.n	80036e0 <HAL_GPIO_Init+0x1f4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a4b      	ldr	r2, [pc, #300]	; (80037dc <HAL_GPIO_Init+0x2f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x1f0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a4a      	ldr	r2, [pc, #296]	; (80037e0 <HAL_GPIO_Init+0x2f4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x1ec>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a49      	ldr	r2, [pc, #292]	; (80037e4 <HAL_GPIO_Init+0x2f8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x1e8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a48      	ldr	r2, [pc, #288]	; (80037e8 <HAL_GPIO_Init+0x2fc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x1e4>
 80036cc:	2305      	movs	r3, #5
 80036ce:	e00a      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d0:	2306      	movs	r3, #6
 80036d2:	e008      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d8:	2303      	movs	r3, #3
 80036da:	e004      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036dc:	2302      	movs	r3, #2
 80036de:	e002      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036e4:	2300      	movs	r3, #0
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	f002 0203 	and.w	r2, r2, #3
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	4093      	lsls	r3, r2
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f6:	4937      	ldr	r1, [pc, #220]	; (80037d4 <HAL_GPIO_Init+0x2e8>)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <HAL_GPIO_Init+0x300>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003728:	4a30      	ldr	r2, [pc, #192]	; (80037ec <HAL_GPIO_Init+0x300>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_GPIO_Init+0x300>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003752:	4a26      	ldr	r2, [pc, #152]	; (80037ec <HAL_GPIO_Init+0x300>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_GPIO_Init+0x300>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_GPIO_Init+0x300>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_GPIO_Init+0x300>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a6:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_GPIO_Init+0x300>)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f ae9d 	bne.w	80034fc <HAL_GPIO_Init+0x10>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	48001000 	.word	0x48001000
 80037e8:	48001400 	.word	0x48001400
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
 80037fc:	4613      	mov	r3, r2
 80037fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800380c:	e002      	b.n	8003814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d141      	bne.n	80038b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800382e:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d131      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800383c:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	4a46      	ldr	r2, [pc, #280]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003854:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385c:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2232      	movs	r2, #50	; 0x32
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a3f      	ldr	r2, [pc, #252]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0c9b      	lsrs	r3, r3, #18
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	e002      	b.n	800387a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387a:	4b38      	ldr	r3, [pc, #224]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d102      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f2      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d158      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e057      	b.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038b0:	e04d      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b8:	d141      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b28      	ldr	r3, [pc, #160]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d131      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2232      	movs	r2, #50	; 0x32
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fe:	e002      	b.n	8003906 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3b01      	subs	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d102      	bne.n	800391a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f2      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d112      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e011      	b.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800393c:	e007      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40007000 	.word	0x40007000
 8003960:	20000004 	.word	0x20000004
 8003964:	431bde83 	.word	0x431bde83

08003968 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003976:	6093      	str	r3, [r2, #8]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40007000 	.word	0x40007000

08003988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e308      	b.n	8003fac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d075      	beq.n	8003a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a6:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b0:	4ba0      	ldr	r3, [pc, #640]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3e>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d002      	beq.n	80039cc <HAL_RCC_OscConfig+0x44>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	4b99      	ldr	r3, [pc, #612]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05b      	beq.n	8003a90 <HAL_RCC_OscConfig+0x108>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d157      	bne.n	8003a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e2e3      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_OscConfig+0x74>
 80039ee:	4b91      	ldr	r3, [pc, #580]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x98>
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a83      	ldr	r2, [pc, #524]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7ff f9a4 	bl	8002d8c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7ff f9a0 	bl	8002d8c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e2a8      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5a:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xc0>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7ff f990 	bl	8002d8c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7ff f98c 	bl	8002d8c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e294      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0xe8>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_OscConfig+0x136>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x13c>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11f      	bne.n	8003b04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_OscConfig+0x154>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e267      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	4952      	ldr	r1, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003af0:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <HAL_RCC_OscConfig+0x2b0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f8fd 	bl	8002cf4 <HAL_InitTick>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d043      	beq.n	8003b88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e253      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d023      	beq.n	8003b54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a48      	ldr	r2, [pc, #288]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7ff f938 	bl	8002d8c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7ff f934 	bl	8002d8c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e23c      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b32:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	4939      	ldr	r1, [pc, #228]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
 8003b52:	e01a      	b.n	8003b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a36      	ldr	r2, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7ff f914 	bl	8002d8c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b68:	f7ff f910 	bl	8002d8c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e218      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7a:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1e0>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9e:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7ff f8ed 	bl	8002d8c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7ff f8e9 	bl	8002d8c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e1f1      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ef      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x22e>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7ff f8d0 	bl	8002d8c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7ff f8cc 	bl	8002d8c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1d4      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ef      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80ab 	beq.w	8003d74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2b4>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e005      	b.n	8003c3e <HAL_RCC_OscConfig+0x2b6>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	20000008 	.word	0x20000008
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	4baf      	ldr	r3, [pc, #700]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4aae      	ldr	r2, [pc, #696]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4e:	4bac      	ldr	r3, [pc, #688]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5e:	4ba9      	ldr	r3, [pc, #676]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c6a:	4ba6      	ldr	r3, [pc, #664]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4aa5      	ldr	r2, [pc, #660]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c76:	f7ff f889 	bl	8002d8c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7ff f885 	bl	8002d8c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e18d      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c90:	4b9c      	ldr	r3, [pc, #624]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d108      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x32e>
 8003ca4:	4b96      	ldr	r3, [pc, #600]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a95      	ldr	r2, [pc, #596]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb4:	e024      	b.n	8003d00 <HAL_RCC_OscConfig+0x378>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d110      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x358>
 8003cbe:	4b90      	ldr	r3, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	4a8e      	ldr	r2, [pc, #568]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cce:	4b8c      	ldr	r3, [pc, #560]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	4a8a      	ldr	r2, [pc, #552]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cde:	e00f      	b.n	8003d00 <HAL_RCC_OscConfig+0x378>
 8003ce0:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a86      	ldr	r2, [pc, #536]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf0:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a82      	ldr	r2, [pc, #520]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d016      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7ff f840 	bl	8002d8c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7ff f83c 	bl	8002d8c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e142      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ed      	beq.n	8003d10 <HAL_RCC_OscConfig+0x388>
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7ff f829 	bl	8002d8c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7ff f825 	bl	8002d8c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e12b      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ed      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d62:	7ffb      	ldrb	r3, [r7, #31]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d03c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d88:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8e:	4a5c      	ldr	r2, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fff8 	bl	8002d8c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da0:	f7fe fff4 	bl	8002d8c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0fc      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <HAL_RCC_OscConfig+0x418>
 8003dc0:	e01b      	b.n	8003dfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dc2:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fe ffdb 	bl	8002d8c <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dda:	f7fe ffd7 	bl	8002d8c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0df      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dec:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ef      	bne.n	8003dda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80d3 	beq.w	8003faa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e04:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	f000 808d 	beq.w	8003f2c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d15a      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fe ffb1 	bl	8002d8c <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fe ffad 	bl	8002d8c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0b5      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_RCC_OscConfig+0x580>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a11      	ldr	r1, [r2, #32]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e66:	0212      	lsls	r2, r2, #8
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0552      	lsls	r2, r2, #21
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0652      	lsls	r2, r2, #25
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e86:	06d2      	lsls	r2, r2, #27
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	491d      	ldr	r1, [pc, #116]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe ff70 	bl	8002d8c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe ff6c 	bl	8002d8c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e074      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x528>
 8003ece:	e06c      	b.n	8003faa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003eee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe ff48 	bl	8002d8c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efe:	e00e      	b.n	8003f1e <HAL_RCC_OscConfig+0x596>
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40007000 	.word	0x40007000
 8003f08:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fe ff3e 	bl	8002d8c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e046      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_RCC_OscConfig+0x62c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x584>
 8003f2a:	e03e      	b.n	8003faa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e039      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_OscConfig+0x62c>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0203 	and.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d12c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	3b01      	subs	r3, #1
 8003f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d123      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d113      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e11e      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b91      	ldr	r3, [pc, #580]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b8e      	ldr	r3, [pc, #568]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	498c      	ldr	r1, [pc, #560]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b8a      	ldr	r3, [pc, #552]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e106      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d073      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d129      	bne.n	8004068 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0f4      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004024:	f000 f99e 	bl	8004364 <RCC_GetSysClockFreqFromPLLSource>
 8004028:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4a7c      	ldr	r2, [pc, #496]	; (8004220 <HAL_RCC_ClockConfig+0x268>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d93f      	bls.n	80040b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004032:	4b7a      	ldr	r3, [pc, #488]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	d033      	beq.n	80040b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d12f      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405a:	4a70      	ldr	r2, [pc, #448]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 800405c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004060:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e024      	b.n	80040b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d107      	bne.n	8004080 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0c6      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004080:	4b66      	ldr	r3, [pc, #408]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0be      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004090:	f000 f8ce 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8004094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4a61      	ldr	r2, [pc, #388]	; (8004220 <HAL_RCC_ClockConfig+0x268>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d909      	bls.n	80040b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800409e:	4b5f      	ldr	r3, [pc, #380]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a6:	4a5d      	ldr	r2, [pc, #372]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b5a      	ldr	r3, [pc, #360]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4957      	ldr	r1, [pc, #348]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c4:	f7fe fe62 	bl	8002d8c <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fe fe5e 	bl	8002d8c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e095      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b4e      	ldr	r3, [pc, #312]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d023      	beq.n	8004148 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004116:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004124:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800412c:	4a3b      	ldr	r2, [pc, #236]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 800412e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004134:	4b39      	ldr	r3, [pc, #228]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4936      	ldr	r1, [pc, #216]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
 8004146:	e008      	b.n	800415a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d105      	bne.n	800415a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a32      	ldr	r2, [pc, #200]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 8004154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004158:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d21d      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 020f 	bic.w	r2, r3, #15
 8004170:	4929      	ldr	r1, [pc, #164]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004178:	f7fe fe08 	bl	8002d8c <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe fe04 	bl	8002d8c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03b      	b.n	800420e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1ed      	bne.n	8004180 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4917      	ldr	r1, [pc, #92]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490f      	ldr	r1, [pc, #60]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e2:	f000 f825 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <HAL_RCC_ClockConfig+0x264>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490c      	ldr	r1, [pc, #48]	; (8004224 <HAL_RCC_ClockConfig+0x26c>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x270>)
 8004200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fd74 	bl	8002cf4 <HAL_InitTick>
 800420c:	4603      	mov	r3, r0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40022000 	.word	0x40022000
 800421c:	40021000 	.word	0x40021000
 8004220:	04c4b400 	.word	0x04c4b400
 8004224:	0800a6a0 	.word	0x0800a6a0
 8004228:	20000004 	.word	0x20000004
 800422c:	20000008 	.word	0x20000008

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d102      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004242:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e047      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d102      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004254:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	e03e      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d136      	bne.n	80042d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3301      	adds	r3, #1
 800427c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d10c      	bne.n	800429e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004284:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800428e:	68d2      	ldr	r2, [r2, #12]
 8004290:	0a12      	lsrs	r2, r2, #8
 8004292:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	617b      	str	r3, [r7, #20]
      break;
 800429c:	e00c      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	0a12      	lsrs	r2, r2, #8
 80042ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
      break;
 80042b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0e5b      	lsrs	r3, r3, #25
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e001      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042d8:	693b      	ldr	r3, [r7, #16]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	0800a6b0 	.word	0x0800a6b0

08004338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800433c:	f7ff ffda 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0adb      	lsrs	r3, r3, #11
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4904      	ldr	r1, [pc, #16]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	0800a6b0 	.word	0x0800a6b0

08004364 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d10c      	bne.n	80043a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	0a12      	lsrs	r2, r2, #8
 8004396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
    break;
 80043a0:	e00c      	b.n	80043bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ac:	68d2      	ldr	r2, [r2, #12]
 80043ae:	0a12      	lsrs	r2, r2, #8
 80043b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
    break;
 80043ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0e5b      	lsrs	r3, r3, #25
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043d6:	687b      	ldr	r3, [r7, #4]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40021000 	.word	0x40021000
 80043e8:	007a1200 	.word	0x007a1200
 80043ec:	00f42400 	.word	0x00f42400

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8098 	beq.w	800453e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a3f      	ldr	r2, [pc, #252]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800443a:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004446:	f7fe fca1 	bl	8002d8c <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800444c:	e009      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444e:	f7fe fc9d 	bl	8002d8c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	74fb      	strb	r3, [r7, #19]
        break;
 8004460:	e005      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004462:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ef      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d159      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01e      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	d019      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004490:	4b23      	ldr	r3, [pc, #140]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044bc:	4a18      	ldr	r2, [pc, #96]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fc5d 	bl	8002d8c <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d4:	e00b      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fe fc59 	bl	8002d8c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d902      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	74fb      	strb	r3, [r7, #19]
            break;
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ec      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4903      	ldr	r1, [pc, #12]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	74bb      	strb	r3, [r7, #18]
 800451e:	e005      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452c:	7c7b      	ldrb	r3, [r7, #17]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4ba6      	ldr	r3, [pc, #664]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	4aa5      	ldr	r2, [pc, #660]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454a:	4ba0      	ldr	r3, [pc, #640]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f023 0203 	bic.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	499c      	ldr	r1, [pc, #624]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800456c:	4b97      	ldr	r3, [pc, #604]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 020c 	bic.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4994      	ldr	r1, [pc, #592]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800458e:	4b8f      	ldr	r3, [pc, #572]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	498b      	ldr	r1, [pc, #556]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b0:	4b86      	ldr	r3, [pc, #536]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	4983      	ldr	r1, [pc, #524]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d2:	4b7e      	ldr	r3, [pc, #504]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	497a      	ldr	r1, [pc, #488]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f4:	4b75      	ldr	r3, [pc, #468]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	4972      	ldr	r1, [pc, #456]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004616:	4b6d      	ldr	r3, [pc, #436]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4969      	ldr	r1, [pc, #420]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4961      	ldr	r1, [pc, #388]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465a:	4b5c      	ldr	r3, [pc, #368]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	4958      	ldr	r1, [pc, #352]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	4950      	ldr	r1, [pc, #320]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4942      	ldr	r1, [pc, #264]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d105      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a3c      	ldr	r2, [pc, #240]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046ec:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4934      	ldr	r1, [pc, #208]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470a:	d105      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	4926      	ldr	r1, [pc, #152]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	4918      	ldr	r1, [pc, #96]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477a:	d105      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	490a      	ldr	r1, [pc, #40]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b2:	d105      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000

080047d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e09d      	b.n	800491e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f2:	d009      	beq.n	8004808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
 80047fa:	e005      	b.n	8004808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd ff04 	bl	8002630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004848:	d902      	bls.n	8004850 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e002      	b.n	8004856 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004854:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800485e:	d007      	beq.n	8004870 <HAL_SPI_Init+0xa0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	ea42 0103 	orr.w	r1, r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	0c1b      	lsrs	r3, r3, #16
 80048cc:	f003 0204 	and.w	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048ec:	ea42 0103 	orr.w	r1, r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_Transmit+0x22>
 8004944:	2302      	movs	r3, #2
 8004946:	e158      	b.n	8004bfa <HAL_SPI_Transmit+0x2d4>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004950:	f7fe fa1c 	bl	8002d8c <HAL_GetTick>
 8004954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d002      	beq.n	800496c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800496a:	e13d      	b.n	8004be8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x52>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800497c:	e134      	b.n	8004be8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c8:	d10f      	bne.n	80049ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d007      	beq.n	8004a08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a10:	d94b      	bls.n	8004aaa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_SPI_Transmit+0xfa>
 8004a1a:	8afb      	ldrh	r3, [r7, #22]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d13e      	bne.n	8004a9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a44:	e02b      	b.n	8004a9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d112      	bne.n	8004a7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a78:	e011      	b.n	8004a9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7a:	f7fe f987 	bl	8002d8c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_Transmit+0x16c>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_Transmit+0x172>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a9c:	e0a4      	b.n	8004be8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ce      	bne.n	8004a46 <HAL_SPI_Transmit+0x120>
 8004aa8:	e07c      	b.n	8004ba4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SPI_Transmit+0x192>
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d170      	bne.n	8004b9a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d912      	bls.n	8004ae8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae6:	e058      	b.n	8004b9a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	7812      	ldrb	r2, [r2, #0]
 8004af4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b0e:	e044      	b.n	8004b9a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d12b      	bne.n	8004b76 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d912      	bls.n	8004b4e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b02      	subs	r3, #2
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b4c:	e025      	b.n	8004b9a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b74:	e011      	b.n	8004b9a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fe f909 	bl	8002d8c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_Transmit+0x268>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit+0x26e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b98:	e026      	b.n	8004be8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1b5      	bne.n	8004b10 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fcdf 	bl	800556c <SPI_EndRxTxTransaction>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e000      	b.n	8004be8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af02      	add	r7, sp, #8
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d112      	bne.n	8004c46 <HAL_SPI_Receive+0x44>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f910 	bl	8004e62 <HAL_SPI_TransmitReceive>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e109      	b.n	8004e5a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_SPI_Receive+0x52>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e102      	b.n	8004e5a <HAL_SPI_Receive+0x258>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5c:	f7fe f896 	bl	8002d8c <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c72:	e0e9      	b.n	8004e48 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_Receive+0x7e>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c84:	e0e0      	b.n	8004e48 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd0:	d908      	bls.n	8004ce4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e007      	b.n	8004cf4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d10f      	bne.n	8004d1e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d007      	beq.n	8004d3c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d44:	d867      	bhi.n	8004e16 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d46:	e030      	b.n	8004daa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d117      	bne.n	8004d86 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f103 020c 	add.w	r2, r3, #12
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d84:	e011      	b.n	8004daa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d86:	f7fe f801 	bl	8002d8c <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d803      	bhi.n	8004d9e <HAL_SPI_Receive+0x19c>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d102      	bne.n	8004da4 <HAL_SPI_Receive+0x1a2>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004da8:	e04e      	b.n	8004e48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1c8      	bne.n	8004d48 <HAL_SPI_Receive+0x146>
 8004db6:	e034      	b.n	8004e22 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d115      	bne.n	8004df2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	1c9a      	adds	r2, r3, #2
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004df0:	e011      	b.n	8004e16 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fd ffcb 	bl	8002d8c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Receive+0x208>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Receive+0x20e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e14:	e018      	b.n	8004e48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ca      	bne.n	8004db8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fb48 	bl	80054bc <SPI_EndRxTransaction>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
 8004e44:	e000      	b.n	8004e48 <HAL_SPI_Receive+0x246>
  }

error :
 8004e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e70:	2301      	movs	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x26>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e1fb      	b.n	8005280 <HAL_SPI_TransmitReceive+0x41e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e90:	f7fd ff7c 	bl	8002d8c <HAL_GetTick>
 8004e94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eac:	7efb      	ldrb	r3, [r7, #27]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x6e>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb8:	d106      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x66>
 8004ec2:	7efb      	ldrb	r3, [r7, #27]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d003      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ece:	e1cd      	b.n	800526c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x80>
 8004edc:	887b      	ldrh	r3, [r7, #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ee8:	e1c0      	b.n	800526c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2205      	movs	r2, #5
 8004efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	887a      	ldrh	r2, [r7, #2]
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	887a      	ldrh	r2, [r7, #2]
 8004f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d802      	bhi.n	8004f48 <HAL_SPI_TransmitReceive+0xe6>
 8004f42:	8a3b      	ldrh	r3, [r7, #16]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d908      	bls.n	8004f5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	e007      	b.n	8004f6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f90:	d97c      	bls.n	800508c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x13e>
 8004f9a:	8a7b      	ldrh	r3, [r7, #18]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d169      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc4:	e056      	b.n	8005074 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d11b      	bne.n	800500c <HAL_SPI_TransmitReceive+0x1aa>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_SPI_TransmitReceive+0x1aa>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d113      	bne.n	800500c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	1c9a      	adds	r2, r3, #2
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d11c      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x1f2>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	b292      	uxth	r2, r2
 8005032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	1c9a      	adds	r2, r3, #2
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005050:	2301      	movs	r3, #1
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005054:	f7fd fe9a 	bl	8002d8c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005060:	429a      	cmp	r2, r3
 8005062:	d807      	bhi.n	8005074 <HAL_SPI_TransmitReceive+0x212>
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d003      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005072:	e0fb      	b.n	800526c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1a3      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x164>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d19d      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x164>
 800508a:	e0df      	b.n	800524c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_SPI_TransmitReceive+0x23a>
 8005094:	8a7b      	ldrh	r3, [r7, #18]
 8005096:	2b01      	cmp	r3, #1
 8005098:	f040 80cb 	bne.w	8005232 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d912      	bls.n	80050cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b02      	subs	r3, #2
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050ca:	e0b2      	b.n	8005232 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	7812      	ldrb	r2, [r2, #0]
 80050d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f2:	e09e      	b.n	8005232 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d134      	bne.n	800516c <HAL_SPI_TransmitReceive+0x30a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02f      	beq.n	800516c <HAL_SPI_TransmitReceive+0x30a>
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	2b01      	cmp	r3, #1
 8005110:	d12c      	bne.n	800516c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d912      	bls.n	8005142 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b02      	subs	r3, #2
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005140:	e012      	b.n	8005168 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d148      	bne.n	800520c <HAL_SPI_TransmitReceive+0x3aa>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d042      	beq.n	800520c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d923      	bls.n	80051da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	b292      	uxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b02      	subs	r3, #2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d81f      	bhi.n	8005208 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	e016      	b.n	8005208 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f103 020c 	add.w	r2, r3, #12
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800520c:	f7fd fdbe 	bl	8002d8c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005218:	429a      	cmp	r2, r3
 800521a:	d803      	bhi.n	8005224 <HAL_SPI_TransmitReceive+0x3c2>
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d102      	bne.n	800522a <HAL_SPI_TransmitReceive+0x3c8>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005230:	e01c      	b.n	800526c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af5b 	bne.w	80050f4 <HAL_SPI_TransmitReceive+0x292>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	f47f af54 	bne.w	80050f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f98b 	bl	800556c <SPI_EndRxTxTransaction>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	661a      	str	r2, [r3, #96]	; 0x60
 8005268:	e000      	b.n	800526c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800526a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800527c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005280:	4618      	mov	r0, r3
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005298:	f7fd fd78 	bl	8002d8c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	4413      	add	r3, r2
 80052a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052a8:	f7fd fd70 	bl	8002d8c <HAL_GetTick>
 80052ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ae:	4b39      	ldr	r3, [pc, #228]	; (8005394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	015b      	lsls	r3, r3, #5
 80052b4:	0d1b      	lsrs	r3, r3, #20
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052be:	e054      	b.n	800536a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d050      	beq.n	800536a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052c8:	f7fd fd60 	bl	8002d8c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d902      	bls.n	80052de <SPI_WaitFlagStateUntilTimeout+0x56>
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d13d      	bne.n	800535a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f6:	d111      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout+0x94>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d004      	beq.n	800530c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d107      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005324:	d10f      	bne.n	8005346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e017      	b.n	800538a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3b01      	subs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d19b      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000004 	.word	0x20000004

08005398 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053a6:	f7fd fcf1 	bl	8002d8c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b6:	f7fd fce9 	bl	8002d8c <HAL_GetTick>
 80053ba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053bc:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	00da      	lsls	r2, r3, #3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	0d1b      	lsrs	r3, r3, #20
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80053d4:	e062      	b.n	800549c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053dc:	d109      	bne.n	80053f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80053f0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d050      	beq.n	800549c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053fa:	f7fd fcc7 	bl	8002d8c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	429a      	cmp	r2, r3
 8005408:	d902      	bls.n	8005410 <SPI_WaitFifoStateUntilTimeout+0x78>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d13d      	bne.n	800548c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800541e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005428:	d111      	bne.n	800544e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	d004      	beq.n	800543e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d107      	bne.n	800544e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005456:	d10f      	bne.n	8005478 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e010      	b.n	80054ae <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3b01      	subs	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d194      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000004 	.word	0x20000004

080054bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d0:	d111      	bne.n	80054f6 <SPI_EndRxTransaction+0x3a>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054da:	d004      	beq.n	80054e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d107      	bne.n	80054f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff fec1 	bl	8005288 <SPI_WaitFlagStateUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e023      	b.n	8005564 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005524:	d11d      	bne.n	8005562 <SPI_EndRxTransaction+0xa6>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552e:	d004      	beq.n	800553a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d113      	bne.n	8005562 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff26 	bl	8005398 <SPI_WaitFifoStateUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e000      	b.n	8005564 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ff07 	bl	8005398 <SPI_WaitFifoStateUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e027      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fe6c 	bl	8005288 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e014      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff fee0 	bl	8005398 <SPI_WaitFifoStateUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e000      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e049      	b.n	800569e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd f84a 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 fdb0 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e04a      	b.n	8005756 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_TIM_Base_Start_IT+0xbc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <HAL_TIM_Base_Start_IT+0xc0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1c      	ldr	r2, [pc, #112]	; (800576c <HAL_TIM_Base_Start_IT+0xc4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <HAL_TIM_Base_Start_IT+0xc8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_TIM_Base_Start_IT+0xcc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d115      	bne.n	8005740 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	4b17      	ldr	r3, [pc, #92]	; (8005778 <HAL_TIM_Base_Start_IT+0xd0>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d015      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0xaa>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d011      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	e008      	b.n	8005752 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e000      	b.n	8005754 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40013400 	.word	0x40013400
 8005774:	40014000 	.word	0x40014000
 8005778:	00010007 	.word	0x00010007

0800577c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f841 	bl	800582a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 fcee 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_TIM_PWM_Start+0x24>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e03c      	b.n	80058de <HAL_TIM_PWM_Start+0x9e>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d109      	bne.n	800587e <HAL_TIM_PWM_Start+0x3e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	bf14      	ite	ne
 8005876:	2301      	movne	r3, #1
 8005878:	2300      	moveq	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e02f      	b.n	80058de <HAL_TIM_PWM_Start+0x9e>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d109      	bne.n	8005898 <HAL_TIM_PWM_Start+0x58>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e022      	b.n	80058de <HAL_TIM_PWM_Start+0x9e>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d109      	bne.n	80058b2 <HAL_TIM_PWM_Start+0x72>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	bf14      	ite	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	2300      	moveq	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	e015      	b.n	80058de <HAL_TIM_PWM_Start+0x9e>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d109      	bne.n	80058cc <HAL_TIM_PWM_Start+0x8c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e008      	b.n	80058de <HAL_TIM_PWM_Start+0x9e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e097      	b.n	8005a16 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_PWM_Start+0xb6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f4:	e023      	b.n	800593e <HAL_TIM_PWM_Start+0xfe>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_PWM_Start+0xc6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005904:	e01b      	b.n	800593e <HAL_TIM_PWM_Start+0xfe>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	e013      	b.n	800593e <HAL_TIM_PWM_Start+0xfe>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0xe6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005924:	e00b      	b.n	800593e <HAL_TIM_PWM_Start+0xfe>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xf6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005934:	e003      	b.n	800593e <HAL_TIM_PWM_Start+0xfe>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2201      	movs	r2, #1
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f84a 	bl	80069e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <HAL_TIM_PWM_Start+0x1e0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_TIM_PWM_Start+0x13e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <HAL_TIM_PWM_Start+0x1e4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIM_PWM_Start+0x13e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_TIM_PWM_Start+0x1e8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIM_PWM_Start+0x13e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <HAL_TIM_PWM_Start+0x1ec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIM_PWM_Start+0x13e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <HAL_TIM_PWM_Start+0x1f0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_TIM_PWM_Start+0x142>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <HAL_TIM_PWM_Start+0x144>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005996:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <HAL_TIM_PWM_Start+0x1e0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d018      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x194>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d013      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x194>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_TIM_PWM_Start+0x1f4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00e      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x194>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_TIM_PWM_Start+0x1f8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x194>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <HAL_TIM_PWM_Start+0x1e4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x194>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <HAL_TIM_PWM_Start+0x1e8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d115      	bne.n	8005a00 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <HAL_TIM_PWM_Start+0x1fc>)
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d015      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x1d2>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d011      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	e008      	b.n	8005a12 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e000      	b.n	8005a14 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	00010007 	.word	0x00010007

08005a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb6c 	bl	8006160 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fb5e 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fb6f 	bl	8006174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0204 	mvn.w	r2, #4
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb42 	bl	8006160 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fb34 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fb45 	bl	8006174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fb18 	bl	8006160 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb0a 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb1b 	bl	8006174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 faee 	bl	8006160 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fae0 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 faf1 	bl	8006174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc faaa 	bl	8002118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 f84a 	bl	8006c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d10e      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f83d 	bl	8006c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d10e      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa9f 	bl	8006188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d10e      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0220 	mvn.w	r2, #32
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fffd 	bl	8006c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c84:	d10f      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c94:	d107      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 f803 	bl	8006cac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb4:	d10f      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cc4:	d107      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fff5 	bl	8006cc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce4:	d10f      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 ffe7 	bl	8006cd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d14:	d10f      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d24:	d107      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 ffd9 	bl	8006ce8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0fd      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	f200 80f0 	bhi.w	8005f4a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005f4b 	.word	0x08005f4b
 8005d78:	08005f4b 	.word	0x08005f4b
 8005d7c:	08005f4b 	.word	0x08005f4b
 8005d80:	08005e05 	.word	0x08005e05
 8005d84:	08005f4b 	.word	0x08005f4b
 8005d88:	08005f4b 	.word	0x08005f4b
 8005d8c:	08005f4b 	.word	0x08005f4b
 8005d90:	08005e47 	.word	0x08005e47
 8005d94:	08005f4b 	.word	0x08005f4b
 8005d98:	08005f4b 	.word	0x08005f4b
 8005d9c:	08005f4b 	.word	0x08005f4b
 8005da0:	08005e87 	.word	0x08005e87
 8005da4:	08005f4b 	.word	0x08005f4b
 8005da8:	08005f4b 	.word	0x08005f4b
 8005dac:	08005f4b 	.word	0x08005f4b
 8005db0:	08005ec9 	.word	0x08005ec9
 8005db4:	08005f4b 	.word	0x08005f4b
 8005db8:	08005f4b 	.word	0x08005f4b
 8005dbc:	08005f4b 	.word	0x08005f4b
 8005dc0:	08005f09 	.word	0x08005f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fa76 	bl	80062bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	619a      	str	r2, [r3, #24]
      break;
 8005e02:	e0a3      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fae6 	bl	80063dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	619a      	str	r2, [r3, #24]
      break;
 8005e44:	e082      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fb4f 	bl	80064f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0208 	orr.w	r2, r2, #8
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0204 	bic.w	r2, r2, #4
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
      break;
 8005e84:	e062      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fbb7 	bl	8006600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	021a      	lsls	r2, r3, #8
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
      break;
 8005ec6:	e041      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fc20 	bl	8006714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0208 	orr.w	r2, r2, #8
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0204 	bic.w	r2, r2, #4
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f06:	e021      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fc64 	bl	80067dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f48:	e000      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005f4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop

08005f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIM_ConfigClockSource+0x18>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e0dd      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1d4>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a62      	ldr	r2, [pc, #392]	; (800613c <HAL_TIM_ConfigClockSource+0x1dc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 80a9 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fb8:	4a60      	ldr	r2, [pc, #384]	; (800613c <HAL_TIM_ConfigClockSource+0x1dc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f200 80ae 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fc0:	4a5f      	ldr	r2, [pc, #380]	; (8006140 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f000 80a1 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fc8:	4a5d      	ldr	r2, [pc, #372]	; (8006140 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	f200 80a6 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fd0:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f000 8099 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd8:	4a5a      	ldr	r2, [pc, #360]	; (8006144 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 809e 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fe0:	4a59      	ldr	r2, [pc, #356]	; (8006148 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	f000 8091 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fe8:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f200 8096 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ff4:	f000 8089 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ffc:	f200 808e 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d03e      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x124>
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600a:	f200 8087 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	f000 8085 	beq.w	8006120 <HAL_TIM_ConfigClockSource+0x1c0>
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601a:	d87f      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 800601c:	2b70      	cmp	r3, #112	; 0x70
 800601e:	d01a      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0xf6>
 8006020:	2b70      	cmp	r3, #112	; 0x70
 8006022:	d87b      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d050      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x16a>
 8006028:	2b60      	cmp	r3, #96	; 0x60
 800602a:	d877      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 800602c:	2b50      	cmp	r3, #80	; 0x50
 800602e:	d03c      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x14a>
 8006030:	2b50      	cmp	r3, #80	; 0x50
 8006032:	d873      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d058      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x18a>
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d86f      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d064      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8006040:	2b30      	cmp	r3, #48	; 0x30
 8006042:	d86b      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d060      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8006048:	2b20      	cmp	r3, #32
 800604a:	d867      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05c      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1aa>
 8006050:	2b10      	cmp	r3, #16
 8006052:	d05a      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006054:	e062      	b.n	800611c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6899      	ldr	r1, [r3, #8]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f000 fc9b 	bl	80069a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006078:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	609a      	str	r2, [r3, #8]
      break;
 8006082:	e04e      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6899      	ldr	r1, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f000 fc84 	bl	80069a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a6:	609a      	str	r2, [r3, #8]
      break;
 80060a8:	e03b      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6859      	ldr	r1, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f000 fbf6 	bl	80068a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2150      	movs	r1, #80	; 0x50
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc4f 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 80060c8:	e02b      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fc15 	bl	8006906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2160      	movs	r1, #96	; 0x60
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fc3f 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e01b      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fbd6 	bl	80068a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2140      	movs	r1, #64	; 0x40
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc2f 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 8006108:	e00b      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f000 fc26 	bl	8006966 <TIM_ITRx_SetConfig>
        break;
 800611a:	e002      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800611c:	bf00      	nop
 800611e:	e000      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8006120:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	00100070 	.word	0x00100070
 8006140:	00100040 	.word	0x00100040
 8006144:	00100030 	.word	0x00100030
 8006148:	00100020 	.word	0x00100020

0800614c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3c      	ldr	r2, [pc, #240]	; (80062a0 <TIM_Base_SetConfig+0x104>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_Base_SetConfig+0x38>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d00b      	beq.n	80061d4 <TIM_Base_SetConfig+0x38>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <TIM_Base_SetConfig+0x108>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_Base_SetConfig+0x38>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a38      	ldr	r2, [pc, #224]	; (80062a8 <TIM_Base_SetConfig+0x10c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_Base_SetConfig+0x38>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a37      	ldr	r2, [pc, #220]	; (80062ac <TIM_Base_SetConfig+0x110>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2d      	ldr	r2, [pc, #180]	; (80062a0 <TIM_Base_SetConfig+0x104>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01b      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d017      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <TIM_Base_SetConfig+0x108>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <TIM_Base_SetConfig+0x10c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00f      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a28      	ldr	r2, [pc, #160]	; (80062ac <TIM_Base_SetConfig+0x110>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00b      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <TIM_Base_SetConfig+0x114>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <TIM_Base_SetConfig+0x118>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_Base_SetConfig+0x8a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a25      	ldr	r2, [pc, #148]	; (80062b8 <TIM_Base_SetConfig+0x11c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d108      	bne.n	8006238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a10      	ldr	r2, [pc, #64]	; (80062a0 <TIM_Base_SetConfig+0x104>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0xe8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a11      	ldr	r2, [pc, #68]	; (80062ac <TIM_Base_SetConfig+0x110>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0xe8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <TIM_Base_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0xe8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <TIM_Base_SetConfig+0x118>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0xe8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <TIM_Base_SetConfig+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f023 0302 	bic.w	r3, r3, #2
 8006308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <TIM_OC1_SetConfig+0x10c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00f      	beq.n	800633c <TIM_OC1_SetConfig+0x80>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <TIM_OC1_SetConfig+0x110>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_OC1_SetConfig+0x80>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <TIM_OC1_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d007      	beq.n	800633c <TIM_OC1_SetConfig+0x80>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a29      	ldr	r2, [pc, #164]	; (80063d4 <TIM_OC1_SetConfig+0x118>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC1_SetConfig+0x80>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a28      	ldr	r2, [pc, #160]	; (80063d8 <TIM_OC1_SetConfig+0x11c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10c      	bne.n	8006356 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0308 	bic.w	r3, r3, #8
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 0304 	bic.w	r3, r3, #4
 8006354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <TIM_OC1_SetConfig+0x10c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <TIM_OC1_SetConfig+0xc2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <TIM_OC1_SetConfig+0x110>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_OC1_SetConfig+0xc2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <TIM_OC1_SetConfig+0x114>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_OC1_SetConfig+0xc2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC1_SetConfig+0x118>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC1_SetConfig+0xc2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <TIM_OC1_SetConfig+0x11c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d111      	bne.n	80063a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40013400 	.word	0x40013400
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800

080063dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0210 	bic.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f023 0320 	bic.w	r3, r3, #32
 800642a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a28      	ldr	r2, [pc, #160]	; (80064dc <TIM_OC2_SetConfig+0x100>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC2_SetConfig+0x6c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <TIM_OC2_SetConfig+0x104>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10d      	bne.n	8006464 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <TIM_OC2_SetConfig+0x100>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_OC2_SetConfig+0xb0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <TIM_OC2_SetConfig+0x104>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_OC2_SetConfig+0xb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <TIM_OC2_SetConfig+0x108>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_OC2_SetConfig+0xb0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <TIM_OC2_SetConfig+0x10c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC2_SetConfig+0xb0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a19      	ldr	r2, [pc, #100]	; (80064ec <TIM_OC2_SetConfig+0x110>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d113      	bne.n	80064b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40013400 	.word	0x40013400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800653c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_OC3_SetConfig+0xfc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC3_SetConfig+0x6a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_OC3_SetConfig+0x100>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d10d      	bne.n	8006576 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <TIM_OC3_SetConfig+0xfc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_OC3_SetConfig+0xae>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <TIM_OC3_SetConfig+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00b      	beq.n	800659e <TIM_OC3_SetConfig+0xae>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <TIM_OC3_SetConfig+0x104>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_OC3_SetConfig+0xae>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <TIM_OC3_SetConfig+0x108>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC3_SetConfig+0xae>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a18      	ldr	r2, [pc, #96]	; (80065fc <TIM_OC3_SetConfig+0x10c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d113      	bne.n	80065c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a28      	ldr	r2, [pc, #160]	; (8006700 <TIM_OC4_SetConfig+0x100>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC4_SetConfig+0x6c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a27      	ldr	r2, [pc, #156]	; (8006704 <TIM_OC4_SetConfig+0x104>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <TIM_OC4_SetConfig+0x100>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_OC4_SetConfig+0xb0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <TIM_OC4_SetConfig+0x104>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_OC4_SetConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <TIM_OC4_SetConfig+0x108>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC4_SetConfig+0xb0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1a      	ldr	r2, [pc, #104]	; (800670c <TIM_OC4_SetConfig+0x10c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC4_SetConfig+0xb0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a19      	ldr	r2, [pc, #100]	; (8006710 <TIM_OC4_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	019b      	lsls	r3, r3, #6
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <TIM_OC5_SetConfig+0xb4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00f      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a16      	ldr	r2, [pc, #88]	; (80067cc <TIM_OC5_SetConfig+0xb8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00b      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <TIM_OC5_SetConfig+0xbc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <TIM_OC5_SetConfig+0xc0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <TIM_OC5_SetConfig+0xc4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d109      	bne.n	80067a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	051b      	lsls	r3, r3, #20
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a18      	ldr	r2, [pc, #96]	; (8006894 <TIM_OC6_SetConfig+0xb8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00f      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <TIM_OC6_SetConfig+0xbc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00b      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a16      	ldr	r2, [pc, #88]	; (800689c <TIM_OC6_SetConfig+0xc0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <TIM_OC6_SetConfig+0xc4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <TIM_OC6_SetConfig+0xc8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d109      	bne.n	800686c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	029b      	lsls	r3, r3, #10
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0201 	bic.w	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 030a 	bic.w	r3, r3, #10
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	031b      	lsls	r3, r3, #12
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	f043 0307 	orr.w	r3, r3, #7
 800698c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	609a      	str	r2, [r3, #8]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2201      	movs	r2, #1
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	43db      	mvns	r3, r3
 8006a02:	401a      	ands	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1a      	ldr	r2, [r3, #32]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e065      	b.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2b      	ldr	r2, [pc, #172]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a17      	ldr	r2, [pc, #92]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a12      	ldr	r2, [pc, #72]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10c      	bne.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40013400 	.word	0x40013400
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40014000 	.word	0x40014000

08006b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e087      	b.n	8006c5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d004      	beq.n	8006bda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a25      	ldr	r2, [pc, #148]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d106      	bne.n	8006be8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d126      	bne.n	8006c4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	051b      	lsls	r3, r3, #20
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d106      	bne.n	8006c4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400

08006c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e042      	b.n	8006d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fb fd55 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f928 	bl	8006f94 <UART_SetConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e022      	b.n	8006d94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fbba 	bl	80074d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc41 	bl	8007614 <UART_CheckIdleState>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	f040 8083 	bne.w	8006ebe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_UART_Transmit+0x28>
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e07b      	b.n	8006ec0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Transmit+0x3a>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e074      	b.n	8006ec0 <HAL_UART_Transmit+0x124>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dee:	f7fb ffcd 	bl	8002d8c <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0c:	d108      	bne.n	8006e20 <HAL_UART_Transmit+0x84>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e003      	b.n	8006e28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006e30:	e02c      	b.n	8006e8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fc34 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e039      	b.n	8006ec0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	3302      	adds	r3, #2
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e007      	b.n	8006e7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	3301      	adds	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1cc      	bne.n	8006e32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2140      	movs	r1, #64	; 0x40
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fc01 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e006      	b.n	8006ec0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e000      	b.n	8006ec0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d131      	bne.n	8006f44 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_Receive_DMA+0x24>
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e02a      	b.n	8006f46 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Receive_DMA+0x36>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e023      	b.n	8006f46 <HAL_UART_Receive_DMA+0x7e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <HAL_UART_Receive_DMA+0x88>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f32:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	461a      	mov	r2, r3
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fc36 	bl	80077ac <UART_Start_Receive_DMA>
 8006f40:	4603      	mov	r3, r0
 8006f42:	e000      	b.n	8006f46 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40008000 	.word	0x40008000

08006f54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f94:	b5b0      	push	{r4, r5, r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4baf      	ldr	r3, [pc, #700]	; (800727c <UART_SetConfig+0x2e8>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	69f9      	ldr	r1, [r7, #28]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4aa4      	ldr	r2, [pc, #656]	; (8007280 <UART_SetConfig+0x2ec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	69f9      	ldr	r1, [r7, #28]
 8007010:	430b      	orrs	r3, r1
 8007012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f023 010f 	bic.w	r1, r3, #15
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a95      	ldr	r2, [pc, #596]	; (8007284 <UART_SetConfig+0x2f0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d120      	bne.n	8007076 <UART_SetConfig+0xe2>
 8007034:	4b94      	ldr	r3, [pc, #592]	; (8007288 <UART_SetConfig+0x2f4>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d816      	bhi.n	8007070 <UART_SetConfig+0xdc>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <UART_SetConfig+0xb4>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007059 	.word	0x08007059
 800704c:	08007065 	.word	0x08007065
 8007050:	0800705f 	.word	0x0800705f
 8007054:	0800706b 	.word	0x0800706b
 8007058:	2301      	movs	r3, #1
 800705a:	76fb      	strb	r3, [r7, #27]
 800705c:	e0bc      	b.n	80071d8 <UART_SetConfig+0x244>
 800705e:	2302      	movs	r3, #2
 8007060:	76fb      	strb	r3, [r7, #27]
 8007062:	e0b9      	b.n	80071d8 <UART_SetConfig+0x244>
 8007064:	2304      	movs	r3, #4
 8007066:	76fb      	strb	r3, [r7, #27]
 8007068:	e0b6      	b.n	80071d8 <UART_SetConfig+0x244>
 800706a:	2308      	movs	r3, #8
 800706c:	76fb      	strb	r3, [r7, #27]
 800706e:	e0b3      	b.n	80071d8 <UART_SetConfig+0x244>
 8007070:	2310      	movs	r3, #16
 8007072:	76fb      	strb	r3, [r7, #27]
 8007074:	e0b0      	b.n	80071d8 <UART_SetConfig+0x244>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a84      	ldr	r2, [pc, #528]	; (800728c <UART_SetConfig+0x2f8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d132      	bne.n	80070e6 <UART_SetConfig+0x152>
 8007080:	4b81      	ldr	r3, [pc, #516]	; (8007288 <UART_SetConfig+0x2f4>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b0c      	cmp	r3, #12
 800708c:	d828      	bhi.n	80070e0 <UART_SetConfig+0x14c>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x100>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070e1 	.word	0x080070e1
 800709c:	080070e1 	.word	0x080070e1
 80070a0:	080070e1 	.word	0x080070e1
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	080070e1 	.word	0x080070e1
 80070ac:	080070e1 	.word	0x080070e1
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070cf 	.word	0x080070cf
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	080070db 	.word	0x080070db
 80070c8:	2300      	movs	r3, #0
 80070ca:	76fb      	strb	r3, [r7, #27]
 80070cc:	e084      	b.n	80071d8 <UART_SetConfig+0x244>
 80070ce:	2302      	movs	r3, #2
 80070d0:	76fb      	strb	r3, [r7, #27]
 80070d2:	e081      	b.n	80071d8 <UART_SetConfig+0x244>
 80070d4:	2304      	movs	r3, #4
 80070d6:	76fb      	strb	r3, [r7, #27]
 80070d8:	e07e      	b.n	80071d8 <UART_SetConfig+0x244>
 80070da:	2308      	movs	r3, #8
 80070dc:	76fb      	strb	r3, [r7, #27]
 80070de:	e07b      	b.n	80071d8 <UART_SetConfig+0x244>
 80070e0:	2310      	movs	r3, #16
 80070e2:	76fb      	strb	r3, [r7, #27]
 80070e4:	e078      	b.n	80071d8 <UART_SetConfig+0x244>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a69      	ldr	r2, [pc, #420]	; (8007290 <UART_SetConfig+0x2fc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d120      	bne.n	8007132 <UART_SetConfig+0x19e>
 80070f0:	4b65      	ldr	r3, [pc, #404]	; (8007288 <UART_SetConfig+0x2f4>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070fa:	2b30      	cmp	r3, #48	; 0x30
 80070fc:	d013      	beq.n	8007126 <UART_SetConfig+0x192>
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d814      	bhi.n	800712c <UART_SetConfig+0x198>
 8007102:	2b20      	cmp	r3, #32
 8007104:	d009      	beq.n	800711a <UART_SetConfig+0x186>
 8007106:	2b20      	cmp	r3, #32
 8007108:	d810      	bhi.n	800712c <UART_SetConfig+0x198>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <UART_SetConfig+0x180>
 800710e:	2b10      	cmp	r3, #16
 8007110:	d006      	beq.n	8007120 <UART_SetConfig+0x18c>
 8007112:	e00b      	b.n	800712c <UART_SetConfig+0x198>
 8007114:	2300      	movs	r3, #0
 8007116:	76fb      	strb	r3, [r7, #27]
 8007118:	e05e      	b.n	80071d8 <UART_SetConfig+0x244>
 800711a:	2302      	movs	r3, #2
 800711c:	76fb      	strb	r3, [r7, #27]
 800711e:	e05b      	b.n	80071d8 <UART_SetConfig+0x244>
 8007120:	2304      	movs	r3, #4
 8007122:	76fb      	strb	r3, [r7, #27]
 8007124:	e058      	b.n	80071d8 <UART_SetConfig+0x244>
 8007126:	2308      	movs	r3, #8
 8007128:	76fb      	strb	r3, [r7, #27]
 800712a:	e055      	b.n	80071d8 <UART_SetConfig+0x244>
 800712c:	2310      	movs	r3, #16
 800712e:	76fb      	strb	r3, [r7, #27]
 8007130:	e052      	b.n	80071d8 <UART_SetConfig+0x244>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a57      	ldr	r2, [pc, #348]	; (8007294 <UART_SetConfig+0x300>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d120      	bne.n	800717e <UART_SetConfig+0x1ea>
 800713c:	4b52      	ldr	r3, [pc, #328]	; (8007288 <UART_SetConfig+0x2f4>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007146:	2bc0      	cmp	r3, #192	; 0xc0
 8007148:	d013      	beq.n	8007172 <UART_SetConfig+0x1de>
 800714a:	2bc0      	cmp	r3, #192	; 0xc0
 800714c:	d814      	bhi.n	8007178 <UART_SetConfig+0x1e4>
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d009      	beq.n	8007166 <UART_SetConfig+0x1d2>
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d810      	bhi.n	8007178 <UART_SetConfig+0x1e4>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <UART_SetConfig+0x1cc>
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d006      	beq.n	800716c <UART_SetConfig+0x1d8>
 800715e:	e00b      	b.n	8007178 <UART_SetConfig+0x1e4>
 8007160:	2300      	movs	r3, #0
 8007162:	76fb      	strb	r3, [r7, #27]
 8007164:	e038      	b.n	80071d8 <UART_SetConfig+0x244>
 8007166:	2302      	movs	r3, #2
 8007168:	76fb      	strb	r3, [r7, #27]
 800716a:	e035      	b.n	80071d8 <UART_SetConfig+0x244>
 800716c:	2304      	movs	r3, #4
 800716e:	76fb      	strb	r3, [r7, #27]
 8007170:	e032      	b.n	80071d8 <UART_SetConfig+0x244>
 8007172:	2308      	movs	r3, #8
 8007174:	76fb      	strb	r3, [r7, #27]
 8007176:	e02f      	b.n	80071d8 <UART_SetConfig+0x244>
 8007178:	2310      	movs	r3, #16
 800717a:	76fb      	strb	r3, [r7, #27]
 800717c:	e02c      	b.n	80071d8 <UART_SetConfig+0x244>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3f      	ldr	r2, [pc, #252]	; (8007280 <UART_SetConfig+0x2ec>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d125      	bne.n	80071d4 <UART_SetConfig+0x240>
 8007188:	4b3f      	ldr	r3, [pc, #252]	; (8007288 <UART_SetConfig+0x2f4>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007196:	d017      	beq.n	80071c8 <UART_SetConfig+0x234>
 8007198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800719c:	d817      	bhi.n	80071ce <UART_SetConfig+0x23a>
 800719e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a2:	d00b      	beq.n	80071bc <UART_SetConfig+0x228>
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a8:	d811      	bhi.n	80071ce <UART_SetConfig+0x23a>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <UART_SetConfig+0x222>
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b2:	d006      	beq.n	80071c2 <UART_SetConfig+0x22e>
 80071b4:	e00b      	b.n	80071ce <UART_SetConfig+0x23a>
 80071b6:	2300      	movs	r3, #0
 80071b8:	76fb      	strb	r3, [r7, #27]
 80071ba:	e00d      	b.n	80071d8 <UART_SetConfig+0x244>
 80071bc:	2302      	movs	r3, #2
 80071be:	76fb      	strb	r3, [r7, #27]
 80071c0:	e00a      	b.n	80071d8 <UART_SetConfig+0x244>
 80071c2:	2304      	movs	r3, #4
 80071c4:	76fb      	strb	r3, [r7, #27]
 80071c6:	e007      	b.n	80071d8 <UART_SetConfig+0x244>
 80071c8:	2308      	movs	r3, #8
 80071ca:	76fb      	strb	r3, [r7, #27]
 80071cc:	e004      	b.n	80071d8 <UART_SetConfig+0x244>
 80071ce:	2310      	movs	r3, #16
 80071d0:	76fb      	strb	r3, [r7, #27]
 80071d2:	e001      	b.n	80071d8 <UART_SetConfig+0x244>
 80071d4:	2310      	movs	r3, #16
 80071d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a28      	ldr	r2, [pc, #160]	; (8007280 <UART_SetConfig+0x2ec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	f040 809e 	bne.w	8007320 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071e4:	7efb      	ldrb	r3, [r7, #27]
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d823      	bhi.n	8007232 <UART_SetConfig+0x29e>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <UART_SetConfig+0x25c>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007215 	.word	0x08007215
 80071f4:	08007233 	.word	0x08007233
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007233 	.word	0x08007233
 8007200:	08007223 	.word	0x08007223
 8007204:	08007233 	.word	0x08007233
 8007208:	08007233 	.word	0x08007233
 800720c:	08007233 	.word	0x08007233
 8007210:	0800722b 	.word	0x0800722b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007214:	f7fd f87a 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8007218:	6178      	str	r0, [r7, #20]
        break;
 800721a:	e00f      	b.n	800723c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800721c:	4b1e      	ldr	r3, [pc, #120]	; (8007298 <UART_SetConfig+0x304>)
 800721e:	617b      	str	r3, [r7, #20]
        break;
 8007220:	e00c      	b.n	800723c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007222:	f7fd f805 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8007226:	6178      	str	r0, [r7, #20]
        break;
 8007228:	e008      	b.n	800723c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800722a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722e:	617b      	str	r3, [r7, #20]
        break;
 8007230:	e004      	b.n	800723c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	76bb      	strb	r3, [r7, #26]
        break;
 800723a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 812e 	beq.w	80074a0 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	4a14      	ldr	r2, [pc, #80]	; (800729c <UART_SetConfig+0x308>)
 800724a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724e:	461a      	mov	r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	fbb3 f3f2 	udiv	r3, r3, r2
 8007256:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	429a      	cmp	r2, r3
 8007266:	d305      	bcc.n	8007274 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d915      	bls.n	80072a0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	76bb      	strb	r3, [r7, #26]
 8007278:	e112      	b.n	80074a0 <UART_SetConfig+0x50c>
 800727a:	bf00      	nop
 800727c:	cfff69f3 	.word	0xcfff69f3
 8007280:	40008000 	.word	0x40008000
 8007284:	40013800 	.word	0x40013800
 8007288:	40021000 	.word	0x40021000
 800728c:	40004400 	.word	0x40004400
 8007290:	40004800 	.word	0x40004800
 8007294:	40004c00 	.word	0x40004c00
 8007298:	00f42400 	.word	0x00f42400
 800729c:	0800a6b8 	.word	0x0800a6b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	4a86      	ldr	r2, [pc, #536]	; (80074c8 <UART_SetConfig+0x534>)
 80072ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	f7f9 fcee 	bl	8000c98 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	020b      	lsls	r3, r1, #8
 80072ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072d2:	0202      	lsls	r2, r0, #8
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	6849      	ldr	r1, [r1, #4]
 80072d8:	0849      	lsrs	r1, r1, #1
 80072da:	4608      	mov	r0, r1
 80072dc:	f04f 0100 	mov.w	r1, #0
 80072e0:	1814      	adds	r4, r2, r0
 80072e2:	eb43 0501 	adc.w	r5, r3, r1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f9 fcd0 	bl	8000c98 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4613      	mov	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007306:	d308      	bcc.n	800731a <UART_SetConfig+0x386>
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730e:	d204      	bcs.n	800731a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	e0c2      	b.n	80074a0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	76bb      	strb	r3, [r7, #26]
 800731e:	e0bf      	b.n	80074a0 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007328:	d165      	bne.n	80073f6 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800732a:	7efb      	ldrb	r3, [r7, #27]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d828      	bhi.n	8007382 <UART_SetConfig+0x3ee>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <UART_SetConfig+0x3a4>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	08007383 	.word	0x08007383
 8007348:	08007373 	.word	0x08007373
 800734c:	08007383 	.word	0x08007383
 8007350:	08007383 	.word	0x08007383
 8007354:	08007383 	.word	0x08007383
 8007358:	0800737b 	.word	0x0800737b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7fc ffd6 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8007360:	6178      	str	r0, [r7, #20]
        break;
 8007362:	e013      	b.n	800738c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007364:	f7fc ffe8 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 8007368:	6178      	str	r0, [r7, #20]
        break;
 800736a:	e00f      	b.n	800738c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800736c:	4b57      	ldr	r3, [pc, #348]	; (80074cc <UART_SetConfig+0x538>)
 800736e:	617b      	str	r3, [r7, #20]
        break;
 8007370:	e00c      	b.n	800738c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007372:	f7fc ff5d 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8007376:	6178      	str	r0, [r7, #20]
        break;
 8007378:	e008      	b.n	800738c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737e:	617b      	str	r3, [r7, #20]
        break;
 8007380:	e004      	b.n	800738c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	76bb      	strb	r3, [r7, #26]
        break;
 800738a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8086 	beq.w	80074a0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	4a4b      	ldr	r2, [pc, #300]	; (80074c8 <UART_SetConfig+0x534>)
 800739a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800739e:	461a      	mov	r2, r3
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a6:	005a      	lsls	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	441a      	add	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	d916      	bls.n	80073f0 <UART_SetConfig+0x45c>
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c8:	d212      	bcs.n	80073f0 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	f023 030f 	bic.w	r3, r3, #15
 80073d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	b29a      	uxth	r2, r3
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	89fa      	ldrh	r2, [r7, #14]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	e057      	b.n	80074a0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	76bb      	strb	r3, [r7, #26]
 80073f4:	e054      	b.n	80074a0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f6:	7efb      	ldrb	r3, [r7, #27]
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x4ba>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0x470>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fc ff70 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 800742c:	6178      	str	r0, [r7, #20]
        break;
 800742e:	e013      	b.n	8007458 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fc ff82 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 8007434:	6178      	str	r0, [r7, #20]
        break;
 8007436:	e00f      	b.n	8007458 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b24      	ldr	r3, [pc, #144]	; (80074cc <UART_SetConfig+0x538>)
 800743a:	617b      	str	r3, [r7, #20]
        break;
 800743c:	e00c      	b.n	8007458 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fc fef7 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8007442:	6178      	str	r0, [r7, #20]
        break;
 8007444:	e008      	b.n	8007458 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	617b      	str	r3, [r7, #20]
        break;
 800744c:	e004      	b.n	8007458 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	76bb      	strb	r3, [r7, #26]
        break;
 8007456:	bf00      	nop
    }

    if (pclk != 0U)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d020      	beq.n	80074a0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <UART_SetConfig+0x534>)
 8007464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007468:	461a      	mov	r2, r3
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007480:	b29b      	uxth	r3, r3
 8007482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d908      	bls.n	800749c <UART_SetConfig+0x508>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007490:	d204      	bcs.n	800749c <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	60da      	str	r2, [r3, #12]
 800749a:	e001      	b.n	80074a0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bdb0      	pop	{r4, r5, r7, pc}
 80074c6:	bf00      	nop
 80074c8:	0800a6b8 	.word	0x0800a6b8
 80074cc:	00f42400 	.word	0x00f42400

080074d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ce:	d10a      	bne.n	80075e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af02      	add	r7, sp, #8
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007624:	f7fb fbb2 	bl	8002d8c <HAL_GetTick>
 8007628:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b08      	cmp	r3, #8
 8007636:	d10e      	bne.n	8007656 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f82f 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e025      	b.n	80076a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d10e      	bne.n	8007682 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f819 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00f      	b.n	80076a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4613      	mov	r3, r2
 80076b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ba:	e062      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d05e      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c4:	f7fb fb62 	bl	8002d8c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d302      	bcc.n	80076da <UART_WaitOnFlagUntilTimeout+0x30>
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11d      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e045      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d02e      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800772e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007732:	d126      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800773c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800774c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0201 	bic.w	r2, r2, #1
 800775c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e00f      	b.n	80077a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4013      	ands	r3, r2
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	bf0c      	ite	eq
 8007792:	2301      	moveq	r3, #1
 8007794:	2300      	movne	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	429a      	cmp	r2, r3
 800779e:	d08d      	beq.n	80076bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2222      	movs	r2, #34	; 0x22
 80077d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d02c      	beq.n	800783a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <UART_Start_Receive_DMA+0xd0>)
 80077e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ec:	4a24      	ldr	r2, [pc, #144]	; (8007880 <UART_Start_Receive_DMA+0xd4>)
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f4:	4a23      	ldr	r2, [pc, #140]	; (8007884 <UART_Start_Receive_DMA+0xd8>)
 80077f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077fc:	2200      	movs	r2, #0
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	4619      	mov	r1, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	461a      	mov	r2, r3
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	f7fb fca0 	bl	8003158 <HAL_DMA_Start_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2210      	movs	r2, #16
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e01c      	b.n	8007874 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007850:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007870:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08007929 	.word	0x08007929
 8007880:	080079c3 	.word	0x080079c3
 8007884:	080079fb 	.word	0x080079fb

08007888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800789e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80078ae:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ea:	f023 0301 	bic.w	r3, r3, #1
 80078ee:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d107      	bne.n	8007908 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0210 	bic.w	r2, r2, #16
 8007906:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d12b      	bne.n	800799c <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800795a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0210 	bic.w	r2, r2, #16
 800799a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d107      	bne.n	80079b4 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fae5 	bl	8006f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079b2:	e002      	b.n	80079ba <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7fa fb95 	bl	80020e4 <HAL_UART_RxCpltCallback>
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d109      	bne.n	80079ec <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff fac9 	bl	8006f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079ea:	e002      	b.n	80079f2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff fab1 	bl	8006f54 <HAL_UART_RxHalfCpltCallback>
}
 80079f2:	bf00      	nop
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b086      	sub	sp, #24
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d109      	bne.n	8007a3a <UART_DMAError+0x40>
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b21      	cmp	r3, #33	; 0x21
 8007a2a:	d106      	bne.n	8007a3a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007a34:	6978      	ldr	r0, [r7, #20]
 8007a36:	f7ff ff27 	bl	8007888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d109      	bne.n	8007a5c <UART_DMAError+0x62>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b22      	cmp	r3, #34	; 0x22
 8007a4c:	d106      	bne.n	8007a5c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007a56:	6978      	ldr	r0, [r7, #20]
 8007a58:	f7ff ff34 	bl	80078c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a62:	f043 0210 	orr.w	r2, r3, #16
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a6c:	6978      	ldr	r0, [r7, #20]
 8007a6e:	f7ff fa7b 	bl	8006f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e027      	b.n	8007ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2224      	movs	r2, #36	; 0x24
 8007a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e02d      	b.n	8007b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2224      	movs	r2, #36	; 0x24
 8007b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f84f 	bl	8007be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e02d      	b.n	8007bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2224      	movs	r2, #36	; 0x24
 8007b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f811 	bl	8007be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c04:	e031      	b.n	8007c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c06:	2308      	movs	r3, #8
 8007c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	0e5b      	lsrs	r3, r3, #25
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	0f5b      	lsrs	r3, r3, #29
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	7b3a      	ldrb	r2, [r7, #12]
 8007c32:	4911      	ldr	r1, [pc, #68]	; (8007c78 <UARTEx_SetNbDataToProcess+0x94>)
 8007c34:	5c8a      	ldrb	r2, [r1, r2]
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c3a:	7b3a      	ldrb	r2, [r7, #12]
 8007c3c:	490f      	ldr	r1, [pc, #60]	; (8007c7c <UARTEx_SetNbDataToProcess+0x98>)
 8007c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	7b7a      	ldrb	r2, [r7, #13]
 8007c50:	4909      	ldr	r1, [pc, #36]	; (8007c78 <UARTEx_SetNbDataToProcess+0x94>)
 8007c52:	5c8a      	ldrb	r2, [r1, r2]
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c58:	7b7a      	ldrb	r2, [r7, #13]
 8007c5a:	4908      	ldr	r1, [pc, #32]	; (8007c7c <UARTEx_SetNbDataToProcess+0x98>)
 8007c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	0800a6d0 	.word	0x0800a6d0
 8007c7c:	0800a6d8 	.word	0x0800a6d8

08007c80 <__errno>:
 8007c80:	4b01      	ldr	r3, [pc, #4]	; (8007c88 <__errno+0x8>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000010 	.word	0x20000010

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	; (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	; (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	; (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f002 fcf0 	bl	800a684 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	0800aacc 	.word	0x0800aacc
 8007cc8:	0800aacc 	.word	0x0800aacc
 8007ccc:	0800aacc 	.word	0x0800aacc
 8007cd0:	0800aad0 	.word	0x0800aad0

08007cd4 <memset>:
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d100      	bne.n	8007cde <memset+0xa>
 8007cdc:	4770      	bx	lr
 8007cde:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce2:	e7f9      	b.n	8007cd8 <memset+0x4>

08007ce4 <__cvt>:
 8007ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce8:	ec55 4b10 	vmov	r4, r5, d0
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	460e      	mov	r6, r1
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	bfbb      	ittet	lt
 8007cf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cfa:	461d      	movlt	r5, r3
 8007cfc:	2300      	movge	r3, #0
 8007cfe:	232d      	movlt	r3, #45	; 0x2d
 8007d00:	700b      	strb	r3, [r1, #0]
 8007d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d08:	4691      	mov	r9, r2
 8007d0a:	f023 0820 	bic.w	r8, r3, #32
 8007d0e:	bfbc      	itt	lt
 8007d10:	4622      	movlt	r2, r4
 8007d12:	4614      	movlt	r4, r2
 8007d14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d18:	d005      	beq.n	8007d26 <__cvt+0x42>
 8007d1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d1e:	d100      	bne.n	8007d22 <__cvt+0x3e>
 8007d20:	3601      	adds	r6, #1
 8007d22:	2102      	movs	r1, #2
 8007d24:	e000      	b.n	8007d28 <__cvt+0x44>
 8007d26:	2103      	movs	r1, #3
 8007d28:	ab03      	add	r3, sp, #12
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	ab02      	add	r3, sp, #8
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	ec45 4b10 	vmov	d0, r4, r5
 8007d34:	4653      	mov	r3, sl
 8007d36:	4632      	mov	r2, r6
 8007d38:	f000 fcca 	bl	80086d0 <_dtoa_r>
 8007d3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d40:	4607      	mov	r7, r0
 8007d42:	d102      	bne.n	8007d4a <__cvt+0x66>
 8007d44:	f019 0f01 	tst.w	r9, #1
 8007d48:	d022      	beq.n	8007d90 <__cvt+0xac>
 8007d4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d4e:	eb07 0906 	add.w	r9, r7, r6
 8007d52:	d110      	bne.n	8007d76 <__cvt+0x92>
 8007d54:	783b      	ldrb	r3, [r7, #0]
 8007d56:	2b30      	cmp	r3, #48	; 0x30
 8007d58:	d10a      	bne.n	8007d70 <__cvt+0x8c>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fed9 	bl	8000b18 <__aeabi_dcmpeq>
 8007d66:	b918      	cbnz	r0, 8007d70 <__cvt+0x8c>
 8007d68:	f1c6 0601 	rsb	r6, r6, #1
 8007d6c:	f8ca 6000 	str.w	r6, [sl]
 8007d70:	f8da 3000 	ldr.w	r3, [sl]
 8007d74:	4499      	add	r9, r3
 8007d76:	2200      	movs	r2, #0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fecb 	bl	8000b18 <__aeabi_dcmpeq>
 8007d82:	b108      	cbz	r0, 8007d88 <__cvt+0xa4>
 8007d84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d88:	2230      	movs	r2, #48	; 0x30
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	454b      	cmp	r3, r9
 8007d8e:	d307      	bcc.n	8007da0 <__cvt+0xbc>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d94:	1bdb      	subs	r3, r3, r7
 8007d96:	4638      	mov	r0, r7
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	b004      	add	sp, #16
 8007d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da0:	1c59      	adds	r1, r3, #1
 8007da2:	9103      	str	r1, [sp, #12]
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e7f0      	b.n	8007d8a <__cvt+0xa6>

08007da8 <__exponent>:
 8007da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007daa:	4603      	mov	r3, r0
 8007dac:	2900      	cmp	r1, #0
 8007dae:	bfb8      	it	lt
 8007db0:	4249      	neglt	r1, r1
 8007db2:	f803 2b02 	strb.w	r2, [r3], #2
 8007db6:	bfb4      	ite	lt
 8007db8:	222d      	movlt	r2, #45	; 0x2d
 8007dba:	222b      	movge	r2, #43	; 0x2b
 8007dbc:	2909      	cmp	r1, #9
 8007dbe:	7042      	strb	r2, [r0, #1]
 8007dc0:	dd2a      	ble.n	8007e18 <__exponent+0x70>
 8007dc2:	f10d 0407 	add.w	r4, sp, #7
 8007dc6:	46a4      	mov	ip, r4
 8007dc8:	270a      	movs	r7, #10
 8007dca:	46a6      	mov	lr, r4
 8007dcc:	460a      	mov	r2, r1
 8007dce:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dd2:	fb07 1516 	mls	r5, r7, r6, r1
 8007dd6:	3530      	adds	r5, #48	; 0x30
 8007dd8:	2a63      	cmp	r2, #99	; 0x63
 8007dda:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007de2:	4631      	mov	r1, r6
 8007de4:	dcf1      	bgt.n	8007dca <__exponent+0x22>
 8007de6:	3130      	adds	r1, #48	; 0x30
 8007de8:	f1ae 0502 	sub.w	r5, lr, #2
 8007dec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007df0:	1c44      	adds	r4, r0, #1
 8007df2:	4629      	mov	r1, r5
 8007df4:	4561      	cmp	r1, ip
 8007df6:	d30a      	bcc.n	8007e0e <__exponent+0x66>
 8007df8:	f10d 0209 	add.w	r2, sp, #9
 8007dfc:	eba2 020e 	sub.w	r2, r2, lr
 8007e00:	4565      	cmp	r5, ip
 8007e02:	bf88      	it	hi
 8007e04:	2200      	movhi	r2, #0
 8007e06:	4413      	add	r3, r2
 8007e08:	1a18      	subs	r0, r3, r0
 8007e0a:	b003      	add	sp, #12
 8007e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e16:	e7ed      	b.n	8007df4 <__exponent+0x4c>
 8007e18:	2330      	movs	r3, #48	; 0x30
 8007e1a:	3130      	adds	r1, #48	; 0x30
 8007e1c:	7083      	strb	r3, [r0, #2]
 8007e1e:	70c1      	strb	r1, [r0, #3]
 8007e20:	1d03      	adds	r3, r0, #4
 8007e22:	e7f1      	b.n	8007e08 <__exponent+0x60>

08007e24 <_printf_float>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	ed2d 8b02 	vpush	{d8}
 8007e2c:	b08d      	sub	sp, #52	; 0x34
 8007e2e:	460c      	mov	r4, r1
 8007e30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e34:	4616      	mov	r6, r2
 8007e36:	461f      	mov	r7, r3
 8007e38:	4605      	mov	r5, r0
 8007e3a:	f001 fa35 	bl	80092a8 <_localeconv_r>
 8007e3e:	f8d0 a000 	ldr.w	sl, [r0]
 8007e42:	4650      	mov	r0, sl
 8007e44:	f7f8 f9ec 	bl	8000220 <strlen>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	f8d8 3000 	ldr.w	r3, [r8]
 8007e54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	f103 0208 	add.w	r2, r3, #8
 8007e62:	f8c8 2000 	str.w	r2, [r8]
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e7c:	ee08 0a10 	vmov	s16, r0
 8007e80:	4b9f      	ldr	r3, [pc, #636]	; (8008100 <_printf_float+0x2dc>)
 8007e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	f7f8 fe77 	bl	8000b7c <__aeabi_dcmpun>
 8007e8e:	bb88      	cbnz	r0, 8007ef4 <_printf_float+0xd0>
 8007e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e94:	4b9a      	ldr	r3, [pc, #616]	; (8008100 <_printf_float+0x2dc>)
 8007e96:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9a:	f7f8 fe51 	bl	8000b40 <__aeabi_dcmple>
 8007e9e:	bb48      	cbnz	r0, 8007ef4 <_printf_float+0xd0>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	f7f8 fe40 	bl	8000b2c <__aeabi_dcmplt>
 8007eac:	b110      	cbz	r0, 8007eb4 <_printf_float+0x90>
 8007eae:	232d      	movs	r3, #45	; 0x2d
 8007eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb4:	4b93      	ldr	r3, [pc, #588]	; (8008104 <_printf_float+0x2e0>)
 8007eb6:	4894      	ldr	r0, [pc, #592]	; (8008108 <_printf_float+0x2e4>)
 8007eb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ebc:	bf94      	ite	ls
 8007ebe:	4698      	movls	r8, r3
 8007ec0:	4680      	movhi	r8, r0
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	f023 0204 	bic.w	r2, r3, #4
 8007ecc:	6022      	str	r2, [r4, #0]
 8007ece:	f04f 0900 	mov.w	r9, #0
 8007ed2:	9700      	str	r7, [sp, #0]
 8007ed4:	4633      	mov	r3, r6
 8007ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4628      	mov	r0, r5
 8007edc:	f000 f9d8 	bl	8008290 <_printf_common>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f040 8090 	bne.w	8008006 <_printf_float+0x1e2>
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	b00d      	add	sp, #52	; 0x34
 8007eec:	ecbd 8b02 	vpop	{d8}
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	4640      	mov	r0, r8
 8007efa:	4649      	mov	r1, r9
 8007efc:	f7f8 fe3e 	bl	8000b7c <__aeabi_dcmpun>
 8007f00:	b140      	cbz	r0, 8007f14 <_printf_float+0xf0>
 8007f02:	464b      	mov	r3, r9
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bfbc      	itt	lt
 8007f08:	232d      	movlt	r3, #45	; 0x2d
 8007f0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f0e:	487f      	ldr	r0, [pc, #508]	; (800810c <_printf_float+0x2e8>)
 8007f10:	4b7f      	ldr	r3, [pc, #508]	; (8008110 <_printf_float+0x2ec>)
 8007f12:	e7d1      	b.n	8007eb8 <_printf_float+0x94>
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f1a:	9206      	str	r2, [sp, #24]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	d13f      	bne.n	8007fa0 <_printf_float+0x17c>
 8007f20:	2306      	movs	r3, #6
 8007f22:	6063      	str	r3, [r4, #4]
 8007f24:	9b05      	ldr	r3, [sp, #20]
 8007f26:	6861      	ldr	r1, [r4, #4]
 8007f28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	ab0a      	add	r3, sp, #40	; 0x28
 8007f32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f36:	ab09      	add	r3, sp, #36	; 0x24
 8007f38:	ec49 8b10 	vmov	d0, r8, r9
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	6022      	str	r2, [r4, #0]
 8007f40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7ff fecd 	bl	8007ce4 <__cvt>
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f4e:	2b47      	cmp	r3, #71	; 0x47
 8007f50:	4680      	mov	r8, r0
 8007f52:	d108      	bne.n	8007f66 <_printf_float+0x142>
 8007f54:	1cc8      	adds	r0, r1, #3
 8007f56:	db02      	blt.n	8007f5e <_printf_float+0x13a>
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	dd41      	ble.n	8007fe2 <_printf_float+0x1be>
 8007f5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f62:	fa5f fb8b 	uxtb.w	fp, fp
 8007f66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f6a:	d820      	bhi.n	8007fae <_printf_float+0x18a>
 8007f6c:	3901      	subs	r1, #1
 8007f6e:	465a      	mov	r2, fp
 8007f70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f74:	9109      	str	r1, [sp, #36]	; 0x24
 8007f76:	f7ff ff17 	bl	8007da8 <__exponent>
 8007f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7c:	1813      	adds	r3, r2, r0
 8007f7e:	2a01      	cmp	r2, #1
 8007f80:	4681      	mov	r9, r0
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	dc02      	bgt.n	8007f8c <_printf_float+0x168>
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	07d2      	lsls	r2, r2, #31
 8007f8a:	d501      	bpl.n	8007f90 <_printf_float+0x16c>
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	6123      	str	r3, [r4, #16]
 8007f90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d09c      	beq.n	8007ed2 <_printf_float+0xae>
 8007f98:	232d      	movs	r3, #45	; 0x2d
 8007f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f9e:	e798      	b.n	8007ed2 <_printf_float+0xae>
 8007fa0:	9a06      	ldr	r2, [sp, #24]
 8007fa2:	2a47      	cmp	r2, #71	; 0x47
 8007fa4:	d1be      	bne.n	8007f24 <_printf_float+0x100>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1bc      	bne.n	8007f24 <_printf_float+0x100>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e7b9      	b.n	8007f22 <_printf_float+0xfe>
 8007fae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fb2:	d118      	bne.n	8007fe6 <_printf_float+0x1c2>
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	dd0b      	ble.n	8007fd2 <_printf_float+0x1ae>
 8007fba:	6121      	str	r1, [r4, #16]
 8007fbc:	b913      	cbnz	r3, 8007fc4 <_printf_float+0x1a0>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	07d0      	lsls	r0, r2, #31
 8007fc2:	d502      	bpl.n	8007fca <_printf_float+0x1a6>
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	440b      	add	r3, r1
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fcc:	f04f 0900 	mov.w	r9, #0
 8007fd0:	e7de      	b.n	8007f90 <_printf_float+0x16c>
 8007fd2:	b913      	cbnz	r3, 8007fda <_printf_float+0x1b6>
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	07d2      	lsls	r2, r2, #31
 8007fd8:	d501      	bpl.n	8007fde <_printf_float+0x1ba>
 8007fda:	3302      	adds	r3, #2
 8007fdc:	e7f4      	b.n	8007fc8 <_printf_float+0x1a4>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e7f2      	b.n	8007fc8 <_printf_float+0x1a4>
 8007fe2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	db05      	blt.n	8007ff8 <_printf_float+0x1d4>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	6121      	str	r1, [r4, #16]
 8007ff0:	07d8      	lsls	r0, r3, #31
 8007ff2:	d5ea      	bpl.n	8007fca <_printf_float+0x1a6>
 8007ff4:	1c4b      	adds	r3, r1, #1
 8007ff6:	e7e7      	b.n	8007fc8 <_printf_float+0x1a4>
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	bfd4      	ite	le
 8007ffc:	f1c1 0202 	rsble	r2, r1, #2
 8008000:	2201      	movgt	r2, #1
 8008002:	4413      	add	r3, r2
 8008004:	e7e0      	b.n	8007fc8 <_printf_float+0x1a4>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	055a      	lsls	r2, r3, #21
 800800a:	d407      	bmi.n	800801c <_printf_float+0x1f8>
 800800c:	6923      	ldr	r3, [r4, #16]
 800800e:	4642      	mov	r2, r8
 8008010:	4631      	mov	r1, r6
 8008012:	4628      	mov	r0, r5
 8008014:	47b8      	blx	r7
 8008016:	3001      	adds	r0, #1
 8008018:	d12c      	bne.n	8008074 <_printf_float+0x250>
 800801a:	e764      	b.n	8007ee6 <_printf_float+0xc2>
 800801c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008020:	f240 80e0 	bls.w	80081e4 <_printf_float+0x3c0>
 8008024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	f7f8 fd74 	bl	8000b18 <__aeabi_dcmpeq>
 8008030:	2800      	cmp	r0, #0
 8008032:	d034      	beq.n	800809e <_printf_float+0x27a>
 8008034:	4a37      	ldr	r2, [pc, #220]	; (8008114 <_printf_float+0x2f0>)
 8008036:	2301      	movs	r3, #1
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af51 	beq.w	8007ee6 <_printf_float+0xc2>
 8008044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008048:	429a      	cmp	r2, r3
 800804a:	db02      	blt.n	8008052 <_printf_float+0x22e>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	07d8      	lsls	r0, r3, #31
 8008050:	d510      	bpl.n	8008074 <_printf_float+0x250>
 8008052:	ee18 3a10 	vmov	r3, s16
 8008056:	4652      	mov	r2, sl
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f af41 	beq.w	8007ee6 <_printf_float+0xc2>
 8008064:	f04f 0800 	mov.w	r8, #0
 8008068:	f104 091a 	add.w	r9, r4, #26
 800806c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806e:	3b01      	subs	r3, #1
 8008070:	4543      	cmp	r3, r8
 8008072:	dc09      	bgt.n	8008088 <_printf_float+0x264>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	079b      	lsls	r3, r3, #30
 8008078:	f100 8105 	bmi.w	8008286 <_printf_float+0x462>
 800807c:	68e0      	ldr	r0, [r4, #12]
 800807e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008080:	4298      	cmp	r0, r3
 8008082:	bfb8      	it	lt
 8008084:	4618      	movlt	r0, r3
 8008086:	e730      	b.n	8007eea <_printf_float+0xc6>
 8008088:	2301      	movs	r3, #1
 800808a:	464a      	mov	r2, r9
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	f43f af27 	beq.w	8007ee6 <_printf_float+0xc2>
 8008098:	f108 0801 	add.w	r8, r8, #1
 800809c:	e7e6      	b.n	800806c <_printf_float+0x248>
 800809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dc39      	bgt.n	8008118 <_printf_float+0x2f4>
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <_printf_float+0x2f0>)
 80080a6:	2301      	movs	r3, #1
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f af19 	beq.w	8007ee6 <_printf_float+0xc2>
 80080b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b8:	4313      	orrs	r3, r2
 80080ba:	d102      	bne.n	80080c2 <_printf_float+0x29e>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	d5d8      	bpl.n	8008074 <_printf_float+0x250>
 80080c2:	ee18 3a10 	vmov	r3, s16
 80080c6:	4652      	mov	r2, sl
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af09 	beq.w	8007ee6 <_printf_float+0xc2>
 80080d4:	f04f 0900 	mov.w	r9, #0
 80080d8:	f104 0a1a 	add.w	sl, r4, #26
 80080dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080de:	425b      	negs	r3, r3
 80080e0:	454b      	cmp	r3, r9
 80080e2:	dc01      	bgt.n	80080e8 <_printf_float+0x2c4>
 80080e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e6:	e792      	b.n	800800e <_printf_float+0x1ea>
 80080e8:	2301      	movs	r3, #1
 80080ea:	4652      	mov	r2, sl
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f aef7 	beq.w	8007ee6 <_printf_float+0xc2>
 80080f8:	f109 0901 	add.w	r9, r9, #1
 80080fc:	e7ee      	b.n	80080dc <_printf_float+0x2b8>
 80080fe:	bf00      	nop
 8008100:	7fefffff 	.word	0x7fefffff
 8008104:	0800a6e4 	.word	0x0800a6e4
 8008108:	0800a6e8 	.word	0x0800a6e8
 800810c:	0800a6f0 	.word	0x0800a6f0
 8008110:	0800a6ec 	.word	0x0800a6ec
 8008114:	0800a6f4 	.word	0x0800a6f4
 8008118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800811c:	429a      	cmp	r2, r3
 800811e:	bfa8      	it	ge
 8008120:	461a      	movge	r2, r3
 8008122:	2a00      	cmp	r2, #0
 8008124:	4691      	mov	r9, r2
 8008126:	dc37      	bgt.n	8008198 <_printf_float+0x374>
 8008128:	f04f 0b00 	mov.w	fp, #0
 800812c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008130:	f104 021a 	add.w	r2, r4, #26
 8008134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	eba3 0309 	sub.w	r3, r3, r9
 800813c:	455b      	cmp	r3, fp
 800813e:	dc33      	bgt.n	80081a8 <_printf_float+0x384>
 8008140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008144:	429a      	cmp	r2, r3
 8008146:	db3b      	blt.n	80081c0 <_printf_float+0x39c>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	07da      	lsls	r2, r3, #31
 800814c:	d438      	bmi.n	80081c0 <_printf_float+0x39c>
 800814e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	eba2 0901 	sub.w	r9, r2, r1
 800815a:	4599      	cmp	r9, r3
 800815c:	bfa8      	it	ge
 800815e:	4699      	movge	r9, r3
 8008160:	f1b9 0f00 	cmp.w	r9, #0
 8008164:	dc35      	bgt.n	80081d2 <_printf_float+0x3ae>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800816e:	f104 0a1a 	add.w	sl, r4, #26
 8008172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	eba3 0309 	sub.w	r3, r3, r9
 800817c:	4543      	cmp	r3, r8
 800817e:	f77f af79 	ble.w	8008074 <_printf_float+0x250>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	f43f aeaa 	beq.w	8007ee6 <_printf_float+0xc2>
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	e7ec      	b.n	8008172 <_printf_float+0x34e>
 8008198:	4613      	mov	r3, r2
 800819a:	4631      	mov	r1, r6
 800819c:	4642      	mov	r2, r8
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	d1c0      	bne.n	8008128 <_printf_float+0x304>
 80081a6:	e69e      	b.n	8007ee6 <_printf_float+0xc2>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	9205      	str	r2, [sp, #20]
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f ae97 	beq.w	8007ee6 <_printf_float+0xc2>
 80081b8:	9a05      	ldr	r2, [sp, #20]
 80081ba:	f10b 0b01 	add.w	fp, fp, #1
 80081be:	e7b9      	b.n	8008134 <_printf_float+0x310>
 80081c0:	ee18 3a10 	vmov	r3, s16
 80081c4:	4652      	mov	r2, sl
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	d1be      	bne.n	800814e <_printf_float+0x32a>
 80081d0:	e689      	b.n	8007ee6 <_printf_float+0xc2>
 80081d2:	9a05      	ldr	r2, [sp, #20]
 80081d4:	464b      	mov	r3, r9
 80081d6:	4442      	add	r2, r8
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	d1c1      	bne.n	8008166 <_printf_float+0x342>
 80081e2:	e680      	b.n	8007ee6 <_printf_float+0xc2>
 80081e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e6:	2a01      	cmp	r2, #1
 80081e8:	dc01      	bgt.n	80081ee <_printf_float+0x3ca>
 80081ea:	07db      	lsls	r3, r3, #31
 80081ec:	d538      	bpl.n	8008260 <_printf_float+0x43c>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4642      	mov	r2, r8
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f ae74 	beq.w	8007ee6 <_printf_float+0xc2>
 80081fe:	ee18 3a10 	vmov	r3, s16
 8008202:	4652      	mov	r2, sl
 8008204:	4631      	mov	r1, r6
 8008206:	4628      	mov	r0, r5
 8008208:	47b8      	blx	r7
 800820a:	3001      	adds	r0, #1
 800820c:	f43f ae6b 	beq.w	8007ee6 <_printf_float+0xc2>
 8008210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	f7f8 fc7e 	bl	8000b18 <__aeabi_dcmpeq>
 800821c:	b9d8      	cbnz	r0, 8008256 <_printf_float+0x432>
 800821e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008220:	f108 0201 	add.w	r2, r8, #1
 8008224:	3b01      	subs	r3, #1
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	d10e      	bne.n	800824e <_printf_float+0x42a>
 8008230:	e659      	b.n	8007ee6 <_printf_float+0xc2>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f ae52 	beq.w	8007ee6 <_printf_float+0xc2>
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008248:	3b01      	subs	r3, #1
 800824a:	4543      	cmp	r3, r8
 800824c:	dcf1      	bgt.n	8008232 <_printf_float+0x40e>
 800824e:	464b      	mov	r3, r9
 8008250:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008254:	e6dc      	b.n	8008010 <_printf_float+0x1ec>
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	f104 0a1a 	add.w	sl, r4, #26
 800825e:	e7f2      	b.n	8008246 <_printf_float+0x422>
 8008260:	2301      	movs	r3, #1
 8008262:	4642      	mov	r2, r8
 8008264:	e7df      	b.n	8008226 <_printf_float+0x402>
 8008266:	2301      	movs	r3, #1
 8008268:	464a      	mov	r2, r9
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f ae38 	beq.w	8007ee6 <_printf_float+0xc2>
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	68e3      	ldr	r3, [r4, #12]
 800827c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800827e:	1a5b      	subs	r3, r3, r1
 8008280:	4543      	cmp	r3, r8
 8008282:	dcf0      	bgt.n	8008266 <_printf_float+0x442>
 8008284:	e6fa      	b.n	800807c <_printf_float+0x258>
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	f104 0919 	add.w	r9, r4, #25
 800828e:	e7f4      	b.n	800827a <_printf_float+0x456>

08008290 <_printf_common>:
 8008290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	4616      	mov	r6, r2
 8008296:	4699      	mov	r9, r3
 8008298:	688a      	ldr	r2, [r1, #8]
 800829a:	690b      	ldr	r3, [r1, #16]
 800829c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bfb8      	it	lt
 80082a4:	4613      	movlt	r3, r2
 80082a6:	6033      	str	r3, [r6, #0]
 80082a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082ac:	4607      	mov	r7, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	b10a      	cbz	r2, 80082b6 <_printf_common+0x26>
 80082b2:	3301      	adds	r3, #1
 80082b4:	6033      	str	r3, [r6, #0]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	0699      	lsls	r1, r3, #26
 80082ba:	bf42      	ittt	mi
 80082bc:	6833      	ldrmi	r3, [r6, #0]
 80082be:	3302      	addmi	r3, #2
 80082c0:	6033      	strmi	r3, [r6, #0]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	f015 0506 	ands.w	r5, r5, #6
 80082c8:	d106      	bne.n	80082d8 <_printf_common+0x48>
 80082ca:	f104 0a19 	add.w	sl, r4, #25
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	6832      	ldr	r2, [r6, #0]
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	dc26      	bgt.n	8008326 <_printf_common+0x96>
 80082d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082dc:	1e13      	subs	r3, r2, #0
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	bf18      	it	ne
 80082e2:	2301      	movne	r3, #1
 80082e4:	0692      	lsls	r2, r2, #26
 80082e6:	d42b      	bmi.n	8008340 <_printf_common+0xb0>
 80082e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ec:	4649      	mov	r1, r9
 80082ee:	4638      	mov	r0, r7
 80082f0:	47c0      	blx	r8
 80082f2:	3001      	adds	r0, #1
 80082f4:	d01e      	beq.n	8008334 <_printf_common+0xa4>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	68e5      	ldr	r5, [r4, #12]
 80082fa:	6832      	ldr	r2, [r6, #0]
 80082fc:	f003 0306 	and.w	r3, r3, #6
 8008300:	2b04      	cmp	r3, #4
 8008302:	bf08      	it	eq
 8008304:	1aad      	subeq	r5, r5, r2
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	6922      	ldr	r2, [r4, #16]
 800830a:	bf0c      	ite	eq
 800830c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008310:	2500      	movne	r5, #0
 8008312:	4293      	cmp	r3, r2
 8008314:	bfc4      	itt	gt
 8008316:	1a9b      	subgt	r3, r3, r2
 8008318:	18ed      	addgt	r5, r5, r3
 800831a:	2600      	movs	r6, #0
 800831c:	341a      	adds	r4, #26
 800831e:	42b5      	cmp	r5, r6
 8008320:	d11a      	bne.n	8008358 <_printf_common+0xc8>
 8008322:	2000      	movs	r0, #0
 8008324:	e008      	b.n	8008338 <_printf_common+0xa8>
 8008326:	2301      	movs	r3, #1
 8008328:	4652      	mov	r2, sl
 800832a:	4649      	mov	r1, r9
 800832c:	4638      	mov	r0, r7
 800832e:	47c0      	blx	r8
 8008330:	3001      	adds	r0, #1
 8008332:	d103      	bne.n	800833c <_printf_common+0xac>
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833c:	3501      	adds	r5, #1
 800833e:	e7c6      	b.n	80082ce <_printf_common+0x3e>
 8008340:	18e1      	adds	r1, r4, r3
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	2030      	movs	r0, #48	; 0x30
 8008346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800834a:	4422      	add	r2, r4
 800834c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008354:	3302      	adds	r3, #2
 8008356:	e7c7      	b.n	80082e8 <_printf_common+0x58>
 8008358:	2301      	movs	r3, #1
 800835a:	4622      	mov	r2, r4
 800835c:	4649      	mov	r1, r9
 800835e:	4638      	mov	r0, r7
 8008360:	47c0      	blx	r8
 8008362:	3001      	adds	r0, #1
 8008364:	d0e6      	beq.n	8008334 <_printf_common+0xa4>
 8008366:	3601      	adds	r6, #1
 8008368:	e7d9      	b.n	800831e <_printf_common+0x8e>
	...

0800836c <_printf_i>:
 800836c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	460c      	mov	r4, r1
 8008372:	4691      	mov	r9, r2
 8008374:	7e27      	ldrb	r7, [r4, #24]
 8008376:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008378:	2f78      	cmp	r7, #120	; 0x78
 800837a:	4680      	mov	r8, r0
 800837c:	469a      	mov	sl, r3
 800837e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008382:	d807      	bhi.n	8008394 <_printf_i+0x28>
 8008384:	2f62      	cmp	r7, #98	; 0x62
 8008386:	d80a      	bhi.n	800839e <_printf_i+0x32>
 8008388:	2f00      	cmp	r7, #0
 800838a:	f000 80d8 	beq.w	800853e <_printf_i+0x1d2>
 800838e:	2f58      	cmp	r7, #88	; 0x58
 8008390:	f000 80a3 	beq.w	80084da <_printf_i+0x16e>
 8008394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800839c:	e03a      	b.n	8008414 <_printf_i+0xa8>
 800839e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083a2:	2b15      	cmp	r3, #21
 80083a4:	d8f6      	bhi.n	8008394 <_printf_i+0x28>
 80083a6:	a001      	add	r0, pc, #4	; (adr r0, 80083ac <_printf_i+0x40>)
 80083a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083ac:	08008405 	.word	0x08008405
 80083b0:	08008419 	.word	0x08008419
 80083b4:	08008395 	.word	0x08008395
 80083b8:	08008395 	.word	0x08008395
 80083bc:	08008395 	.word	0x08008395
 80083c0:	08008395 	.word	0x08008395
 80083c4:	08008419 	.word	0x08008419
 80083c8:	08008395 	.word	0x08008395
 80083cc:	08008395 	.word	0x08008395
 80083d0:	08008395 	.word	0x08008395
 80083d4:	08008395 	.word	0x08008395
 80083d8:	08008525 	.word	0x08008525
 80083dc:	08008449 	.word	0x08008449
 80083e0:	08008507 	.word	0x08008507
 80083e4:	08008395 	.word	0x08008395
 80083e8:	08008395 	.word	0x08008395
 80083ec:	08008547 	.word	0x08008547
 80083f0:	08008395 	.word	0x08008395
 80083f4:	08008449 	.word	0x08008449
 80083f8:	08008395 	.word	0x08008395
 80083fc:	08008395 	.word	0x08008395
 8008400:	0800850f 	.word	0x0800850f
 8008404:	680b      	ldr	r3, [r1, #0]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	600a      	str	r2, [r1, #0]
 800840c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008414:	2301      	movs	r3, #1
 8008416:	e0a3      	b.n	8008560 <_printf_i+0x1f4>
 8008418:	6825      	ldr	r5, [r4, #0]
 800841a:	6808      	ldr	r0, [r1, #0]
 800841c:	062e      	lsls	r6, r5, #24
 800841e:	f100 0304 	add.w	r3, r0, #4
 8008422:	d50a      	bpl.n	800843a <_printf_i+0xce>
 8008424:	6805      	ldr	r5, [r0, #0]
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	2d00      	cmp	r5, #0
 800842a:	da03      	bge.n	8008434 <_printf_i+0xc8>
 800842c:	232d      	movs	r3, #45	; 0x2d
 800842e:	426d      	negs	r5, r5
 8008430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008434:	485e      	ldr	r0, [pc, #376]	; (80085b0 <_printf_i+0x244>)
 8008436:	230a      	movs	r3, #10
 8008438:	e019      	b.n	800846e <_printf_i+0x102>
 800843a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800843e:	6805      	ldr	r5, [r0, #0]
 8008440:	600b      	str	r3, [r1, #0]
 8008442:	bf18      	it	ne
 8008444:	b22d      	sxthne	r5, r5
 8008446:	e7ef      	b.n	8008428 <_printf_i+0xbc>
 8008448:	680b      	ldr	r3, [r1, #0]
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	1d18      	adds	r0, r3, #4
 800844e:	6008      	str	r0, [r1, #0]
 8008450:	0628      	lsls	r0, r5, #24
 8008452:	d501      	bpl.n	8008458 <_printf_i+0xec>
 8008454:	681d      	ldr	r5, [r3, #0]
 8008456:	e002      	b.n	800845e <_printf_i+0xf2>
 8008458:	0669      	lsls	r1, r5, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0xe8>
 800845c:	881d      	ldrh	r5, [r3, #0]
 800845e:	4854      	ldr	r0, [pc, #336]	; (80085b0 <_printf_i+0x244>)
 8008460:	2f6f      	cmp	r7, #111	; 0x6f
 8008462:	bf0c      	ite	eq
 8008464:	2308      	moveq	r3, #8
 8008466:	230a      	movne	r3, #10
 8008468:	2100      	movs	r1, #0
 800846a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800846e:	6866      	ldr	r6, [r4, #4]
 8008470:	60a6      	str	r6, [r4, #8]
 8008472:	2e00      	cmp	r6, #0
 8008474:	bfa2      	ittt	ge
 8008476:	6821      	ldrge	r1, [r4, #0]
 8008478:	f021 0104 	bicge.w	r1, r1, #4
 800847c:	6021      	strge	r1, [r4, #0]
 800847e:	b90d      	cbnz	r5, 8008484 <_printf_i+0x118>
 8008480:	2e00      	cmp	r6, #0
 8008482:	d04d      	beq.n	8008520 <_printf_i+0x1b4>
 8008484:	4616      	mov	r6, r2
 8008486:	fbb5 f1f3 	udiv	r1, r5, r3
 800848a:	fb03 5711 	mls	r7, r3, r1, r5
 800848e:	5dc7      	ldrb	r7, [r0, r7]
 8008490:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008494:	462f      	mov	r7, r5
 8008496:	42bb      	cmp	r3, r7
 8008498:	460d      	mov	r5, r1
 800849a:	d9f4      	bls.n	8008486 <_printf_i+0x11a>
 800849c:	2b08      	cmp	r3, #8
 800849e:	d10b      	bne.n	80084b8 <_printf_i+0x14c>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	07df      	lsls	r7, r3, #31
 80084a4:	d508      	bpl.n	80084b8 <_printf_i+0x14c>
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	6861      	ldr	r1, [r4, #4]
 80084aa:	4299      	cmp	r1, r3
 80084ac:	bfde      	ittt	le
 80084ae:	2330      	movle	r3, #48	; 0x30
 80084b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084b8:	1b92      	subs	r2, r2, r6
 80084ba:	6122      	str	r2, [r4, #16]
 80084bc:	f8cd a000 	str.w	sl, [sp]
 80084c0:	464b      	mov	r3, r9
 80084c2:	aa03      	add	r2, sp, #12
 80084c4:	4621      	mov	r1, r4
 80084c6:	4640      	mov	r0, r8
 80084c8:	f7ff fee2 	bl	8008290 <_printf_common>
 80084cc:	3001      	adds	r0, #1
 80084ce:	d14c      	bne.n	800856a <_printf_i+0x1fe>
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	b004      	add	sp, #16
 80084d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084da:	4835      	ldr	r0, [pc, #212]	; (80085b0 <_printf_i+0x244>)
 80084dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	680e      	ldr	r6, [r1, #0]
 80084e4:	061f      	lsls	r7, r3, #24
 80084e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80084ea:	600e      	str	r6, [r1, #0]
 80084ec:	d514      	bpl.n	8008518 <_printf_i+0x1ac>
 80084ee:	07d9      	lsls	r1, r3, #31
 80084f0:	bf44      	itt	mi
 80084f2:	f043 0320 	orrmi.w	r3, r3, #32
 80084f6:	6023      	strmi	r3, [r4, #0]
 80084f8:	b91d      	cbnz	r5, 8008502 <_printf_i+0x196>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f023 0320 	bic.w	r3, r3, #32
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	2310      	movs	r3, #16
 8008504:	e7b0      	b.n	8008468 <_printf_i+0xfc>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f043 0320 	orr.w	r3, r3, #32
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	2378      	movs	r3, #120	; 0x78
 8008510:	4828      	ldr	r0, [pc, #160]	; (80085b4 <_printf_i+0x248>)
 8008512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008516:	e7e3      	b.n	80084e0 <_printf_i+0x174>
 8008518:	065e      	lsls	r6, r3, #25
 800851a:	bf48      	it	mi
 800851c:	b2ad      	uxthmi	r5, r5
 800851e:	e7e6      	b.n	80084ee <_printf_i+0x182>
 8008520:	4616      	mov	r6, r2
 8008522:	e7bb      	b.n	800849c <_printf_i+0x130>
 8008524:	680b      	ldr	r3, [r1, #0]
 8008526:	6826      	ldr	r6, [r4, #0]
 8008528:	6960      	ldr	r0, [r4, #20]
 800852a:	1d1d      	adds	r5, r3, #4
 800852c:	600d      	str	r5, [r1, #0]
 800852e:	0635      	lsls	r5, r6, #24
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	d501      	bpl.n	8008538 <_printf_i+0x1cc>
 8008534:	6018      	str	r0, [r3, #0]
 8008536:	e002      	b.n	800853e <_printf_i+0x1d2>
 8008538:	0671      	lsls	r1, r6, #25
 800853a:	d5fb      	bpl.n	8008534 <_printf_i+0x1c8>
 800853c:	8018      	strh	r0, [r3, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	6123      	str	r3, [r4, #16]
 8008542:	4616      	mov	r6, r2
 8008544:	e7ba      	b.n	80084bc <_printf_i+0x150>
 8008546:	680b      	ldr	r3, [r1, #0]
 8008548:	1d1a      	adds	r2, r3, #4
 800854a:	600a      	str	r2, [r1, #0]
 800854c:	681e      	ldr	r6, [r3, #0]
 800854e:	6862      	ldr	r2, [r4, #4]
 8008550:	2100      	movs	r1, #0
 8008552:	4630      	mov	r0, r6
 8008554:	f7f7 fe6c 	bl	8000230 <memchr>
 8008558:	b108      	cbz	r0, 800855e <_printf_i+0x1f2>
 800855a:	1b80      	subs	r0, r0, r6
 800855c:	6060      	str	r0, [r4, #4]
 800855e:	6863      	ldr	r3, [r4, #4]
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	2300      	movs	r3, #0
 8008564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008568:	e7a8      	b.n	80084bc <_printf_i+0x150>
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	4632      	mov	r2, r6
 800856e:	4649      	mov	r1, r9
 8008570:	4640      	mov	r0, r8
 8008572:	47d0      	blx	sl
 8008574:	3001      	adds	r0, #1
 8008576:	d0ab      	beq.n	80084d0 <_printf_i+0x164>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	079b      	lsls	r3, r3, #30
 800857c:	d413      	bmi.n	80085a6 <_printf_i+0x23a>
 800857e:	68e0      	ldr	r0, [r4, #12]
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	4298      	cmp	r0, r3
 8008584:	bfb8      	it	lt
 8008586:	4618      	movlt	r0, r3
 8008588:	e7a4      	b.n	80084d4 <_printf_i+0x168>
 800858a:	2301      	movs	r3, #1
 800858c:	4632      	mov	r2, r6
 800858e:	4649      	mov	r1, r9
 8008590:	4640      	mov	r0, r8
 8008592:	47d0      	blx	sl
 8008594:	3001      	adds	r0, #1
 8008596:	d09b      	beq.n	80084d0 <_printf_i+0x164>
 8008598:	3501      	adds	r5, #1
 800859a:	68e3      	ldr	r3, [r4, #12]
 800859c:	9903      	ldr	r1, [sp, #12]
 800859e:	1a5b      	subs	r3, r3, r1
 80085a0:	42ab      	cmp	r3, r5
 80085a2:	dcf2      	bgt.n	800858a <_printf_i+0x21e>
 80085a4:	e7eb      	b.n	800857e <_printf_i+0x212>
 80085a6:	2500      	movs	r5, #0
 80085a8:	f104 0619 	add.w	r6, r4, #25
 80085ac:	e7f5      	b.n	800859a <_printf_i+0x22e>
 80085ae:	bf00      	nop
 80085b0:	0800a6f6 	.word	0x0800a6f6
 80085b4:	0800a707 	.word	0x0800a707

080085b8 <quorem>:
 80085b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	6903      	ldr	r3, [r0, #16]
 80085be:	690c      	ldr	r4, [r1, #16]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	4607      	mov	r7, r0
 80085c4:	f2c0 8081 	blt.w	80086ca <quorem+0x112>
 80085c8:	3c01      	subs	r4, #1
 80085ca:	f101 0814 	add.w	r8, r1, #20
 80085ce:	f100 0514 	add.w	r5, r0, #20
 80085d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e0:	3301      	adds	r3, #1
 80085e2:	429a      	cmp	r2, r3
 80085e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80085f0:	d331      	bcc.n	8008656 <quorem+0x9e>
 80085f2:	f04f 0e00 	mov.w	lr, #0
 80085f6:	4640      	mov	r0, r8
 80085f8:	46ac      	mov	ip, r5
 80085fa:	46f2      	mov	sl, lr
 80085fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008600:	b293      	uxth	r3, r2
 8008602:	fb06 e303 	mla	r3, r6, r3, lr
 8008606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800860a:	b29b      	uxth	r3, r3
 800860c:	ebaa 0303 	sub.w	r3, sl, r3
 8008610:	0c12      	lsrs	r2, r2, #16
 8008612:	f8dc a000 	ldr.w	sl, [ip]
 8008616:	fb06 e202 	mla	r2, r6, r2, lr
 800861a:	fa13 f38a 	uxtah	r3, r3, sl
 800861e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008622:	fa1f fa82 	uxth.w	sl, r2
 8008626:	f8dc 2000 	ldr.w	r2, [ip]
 800862a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800862e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008632:	b29b      	uxth	r3, r3
 8008634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008638:	4581      	cmp	r9, r0
 800863a:	f84c 3b04 	str.w	r3, [ip], #4
 800863e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008642:	d2db      	bcs.n	80085fc <quorem+0x44>
 8008644:	f855 300b 	ldr.w	r3, [r5, fp]
 8008648:	b92b      	cbnz	r3, 8008656 <quorem+0x9e>
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	3b04      	subs	r3, #4
 800864e:	429d      	cmp	r5, r3
 8008650:	461a      	mov	r2, r3
 8008652:	d32e      	bcc.n	80086b2 <quorem+0xfa>
 8008654:	613c      	str	r4, [r7, #16]
 8008656:	4638      	mov	r0, r7
 8008658:	f001 f8be 	bl	80097d8 <__mcmp>
 800865c:	2800      	cmp	r0, #0
 800865e:	db24      	blt.n	80086aa <quorem+0xf2>
 8008660:	3601      	adds	r6, #1
 8008662:	4628      	mov	r0, r5
 8008664:	f04f 0c00 	mov.w	ip, #0
 8008668:	f858 2b04 	ldr.w	r2, [r8], #4
 800866c:	f8d0 e000 	ldr.w	lr, [r0]
 8008670:	b293      	uxth	r3, r2
 8008672:	ebac 0303 	sub.w	r3, ip, r3
 8008676:	0c12      	lsrs	r2, r2, #16
 8008678:	fa13 f38e 	uxtah	r3, r3, lr
 800867c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868a:	45c1      	cmp	r9, r8
 800868c:	f840 3b04 	str.w	r3, [r0], #4
 8008690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008694:	d2e8      	bcs.n	8008668 <quorem+0xb0>
 8008696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800869a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800869e:	b922      	cbnz	r2, 80086aa <quorem+0xf2>
 80086a0:	3b04      	subs	r3, #4
 80086a2:	429d      	cmp	r5, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	d30a      	bcc.n	80086be <quorem+0x106>
 80086a8:	613c      	str	r4, [r7, #16]
 80086aa:	4630      	mov	r0, r6
 80086ac:	b003      	add	sp, #12
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	6812      	ldr	r2, [r2, #0]
 80086b4:	3b04      	subs	r3, #4
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	d1cc      	bne.n	8008654 <quorem+0x9c>
 80086ba:	3c01      	subs	r4, #1
 80086bc:	e7c7      	b.n	800864e <quorem+0x96>
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	3b04      	subs	r3, #4
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	d1f0      	bne.n	80086a8 <quorem+0xf0>
 80086c6:	3c01      	subs	r4, #1
 80086c8:	e7eb      	b.n	80086a2 <quorem+0xea>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e7ee      	b.n	80086ac <quorem+0xf4>
	...

080086d0 <_dtoa_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	ed2d 8b02 	vpush	{d8}
 80086d8:	ec57 6b10 	vmov	r6, r7, d0
 80086dc:	b095      	sub	sp, #84	; 0x54
 80086de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086ea:	4604      	mov	r4, r0
 80086ec:	9209      	str	r2, [sp, #36]	; 0x24
 80086ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f0:	b975      	cbnz	r5, 8008710 <_dtoa_r+0x40>
 80086f2:	2010      	movs	r0, #16
 80086f4:	f000 fddc 	bl	80092b0 <malloc>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6260      	str	r0, [r4, #36]	; 0x24
 80086fc:	b920      	cbnz	r0, 8008708 <_dtoa_r+0x38>
 80086fe:	4bb2      	ldr	r3, [pc, #712]	; (80089c8 <_dtoa_r+0x2f8>)
 8008700:	21ea      	movs	r1, #234	; 0xea
 8008702:	48b2      	ldr	r0, [pc, #712]	; (80089cc <_dtoa_r+0x2fc>)
 8008704:	f001 fa32 	bl	8009b6c <__assert_func>
 8008708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800870c:	6005      	str	r5, [r0, #0]
 800870e:	60c5      	str	r5, [r0, #12]
 8008710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	b151      	cbz	r1, 800872c <_dtoa_r+0x5c>
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	604a      	str	r2, [r1, #4]
 800871a:	2301      	movs	r3, #1
 800871c:	4093      	lsls	r3, r2
 800871e:	608b      	str	r3, [r1, #8]
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fe1b 	bl	800935c <_Bfree>
 8008726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	1e3b      	subs	r3, r7, #0
 800872e:	bfb9      	ittee	lt
 8008730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008734:	9303      	strlt	r3, [sp, #12]
 8008736:	2300      	movge	r3, #0
 8008738:	f8c8 3000 	strge.w	r3, [r8]
 800873c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008740:	4ba3      	ldr	r3, [pc, #652]	; (80089d0 <_dtoa_r+0x300>)
 8008742:	bfbc      	itt	lt
 8008744:	2201      	movlt	r2, #1
 8008746:	f8c8 2000 	strlt.w	r2, [r8]
 800874a:	ea33 0309 	bics.w	r3, r3, r9
 800874e:	d11b      	bne.n	8008788 <_dtoa_r+0xb8>
 8008750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008752:	f242 730f 	movw	r3, #9999	; 0x270f
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800875c:	4333      	orrs	r3, r6
 800875e:	f000 857a 	beq.w	8009256 <_dtoa_r+0xb86>
 8008762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008764:	b963      	cbnz	r3, 8008780 <_dtoa_r+0xb0>
 8008766:	4b9b      	ldr	r3, [pc, #620]	; (80089d4 <_dtoa_r+0x304>)
 8008768:	e024      	b.n	80087b4 <_dtoa_r+0xe4>
 800876a:	4b9b      	ldr	r3, [pc, #620]	; (80089d8 <_dtoa_r+0x308>)
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	9800      	ldr	r0, [sp, #0]
 8008776:	b015      	add	sp, #84	; 0x54
 8008778:	ecbd 8b02 	vpop	{d8}
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	4b94      	ldr	r3, [pc, #592]	; (80089d4 <_dtoa_r+0x304>)
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	3303      	adds	r3, #3
 8008786:	e7f3      	b.n	8008770 <_dtoa_r+0xa0>
 8008788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	ec51 0b17 	vmov	r0, r1, d7
 8008792:	2300      	movs	r3, #0
 8008794:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008798:	f7f8 f9be 	bl	8000b18 <__aeabi_dcmpeq>
 800879c:	4680      	mov	r8, r0
 800879e:	b158      	cbz	r0, 80087b8 <_dtoa_r+0xe8>
 80087a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087a2:	2301      	movs	r3, #1
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 8551 	beq.w	8009250 <_dtoa_r+0xb80>
 80087ae:	488b      	ldr	r0, [pc, #556]	; (80089dc <_dtoa_r+0x30c>)
 80087b0:	6018      	str	r0, [r3, #0]
 80087b2:	1e43      	subs	r3, r0, #1
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	e7dd      	b.n	8008774 <_dtoa_r+0xa4>
 80087b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087bc:	aa12      	add	r2, sp, #72	; 0x48
 80087be:	a913      	add	r1, sp, #76	; 0x4c
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 f8ad 	bl	8009920 <__d2b>
 80087c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087ca:	4683      	mov	fp, r0
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d07c      	beq.n	80088ca <_dtoa_r+0x1fa>
 80087d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80087d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087ea:	4b7d      	ldr	r3, [pc, #500]	; (80089e0 <_dtoa_r+0x310>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fd71 	bl	80002d8 <__aeabi_dsub>
 80087f6:	a36e      	add	r3, pc, #440	; (adr r3, 80089b0 <_dtoa_r+0x2e0>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 ff24 	bl	8000648 <__aeabi_dmul>
 8008800:	a36d      	add	r3, pc, #436	; (adr r3, 80089b8 <_dtoa_r+0x2e8>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	f7f7 fd69 	bl	80002dc <__adddf3>
 800880a:	4606      	mov	r6, r0
 800880c:	4628      	mov	r0, r5
 800880e:	460f      	mov	r7, r1
 8008810:	f7f7 feb0 	bl	8000574 <__aeabi_i2d>
 8008814:	a36a      	add	r3, pc, #424	; (adr r3, 80089c0 <_dtoa_r+0x2f0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 ff15 	bl	8000648 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fd59 	bl	80002dc <__adddf3>
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	f7f8 f9bb 	bl	8000ba8 <__aeabi_d2iz>
 8008832:	2200      	movs	r2, #0
 8008834:	4682      	mov	sl, r0
 8008836:	2300      	movs	r3, #0
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f976 	bl	8000b2c <__aeabi_dcmplt>
 8008840:	b148      	cbz	r0, 8008856 <_dtoa_r+0x186>
 8008842:	4650      	mov	r0, sl
 8008844:	f7f7 fe96 	bl	8000574 <__aeabi_i2d>
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	f7f8 f964 	bl	8000b18 <__aeabi_dcmpeq>
 8008850:	b908      	cbnz	r0, 8008856 <_dtoa_r+0x186>
 8008852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008856:	f1ba 0f16 	cmp.w	sl, #22
 800885a:	d854      	bhi.n	8008906 <_dtoa_r+0x236>
 800885c:	4b61      	ldr	r3, [pc, #388]	; (80089e4 <_dtoa_r+0x314>)
 800885e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800886a:	f7f8 f95f 	bl	8000b2c <__aeabi_dcmplt>
 800886e:	2800      	cmp	r0, #0
 8008870:	d04b      	beq.n	800890a <_dtoa_r+0x23a>
 8008872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008876:	2300      	movs	r3, #0
 8008878:	930e      	str	r3, [sp, #56]	; 0x38
 800887a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800887c:	1b5d      	subs	r5, r3, r5
 800887e:	1e6b      	subs	r3, r5, #1
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	bf43      	ittte	mi
 8008884:	2300      	movmi	r3, #0
 8008886:	f1c5 0801 	rsbmi	r8, r5, #1
 800888a:	9304      	strmi	r3, [sp, #16]
 800888c:	f04f 0800 	movpl.w	r8, #0
 8008890:	f1ba 0f00 	cmp.w	sl, #0
 8008894:	db3b      	blt.n	800890e <_dtoa_r+0x23e>
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800889c:	4453      	add	r3, sl
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	2300      	movs	r3, #0
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	9b05      	ldr	r3, [sp, #20]
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d869      	bhi.n	800897e <_dtoa_r+0x2ae>
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	bfc4      	itt	gt
 80088ae:	3b04      	subgt	r3, #4
 80088b0:	9305      	strgt	r3, [sp, #20]
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	f1a3 0302 	sub.w	r3, r3, #2
 80088b8:	bfcc      	ite	gt
 80088ba:	2500      	movgt	r5, #0
 80088bc:	2501      	movle	r5, #1
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d869      	bhi.n	8008996 <_dtoa_r+0x2c6>
 80088c2:	e8df f003 	tbb	[pc, r3]
 80088c6:	4e2c      	.short	0x4e2c
 80088c8:	5a4c      	.short	0x5a4c
 80088ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80088ce:	441d      	add	r5, r3
 80088d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	bfc1      	itttt	gt
 80088d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80088e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088e8:	bfda      	itte	le
 80088ea:	f1c3 0320 	rsble	r3, r3, #32
 80088ee:	fa06 f003 	lslle.w	r0, r6, r3
 80088f2:	4318      	orrgt	r0, r3
 80088f4:	f7f7 fe2e 	bl	8000554 <__aeabi_ui2d>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4606      	mov	r6, r0
 80088fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008900:	3d01      	subs	r5, #1
 8008902:	9310      	str	r3, [sp, #64]	; 0x40
 8008904:	e771      	b.n	80087ea <_dtoa_r+0x11a>
 8008906:	2301      	movs	r3, #1
 8008908:	e7b6      	b.n	8008878 <_dtoa_r+0x1a8>
 800890a:	900e      	str	r0, [sp, #56]	; 0x38
 800890c:	e7b5      	b.n	800887a <_dtoa_r+0x1aa>
 800890e:	f1ca 0300 	rsb	r3, sl, #0
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	2300      	movs	r3, #0
 8008916:	eba8 080a 	sub.w	r8, r8, sl
 800891a:	930d      	str	r3, [sp, #52]	; 0x34
 800891c:	e7c2      	b.n	80088a4 <_dtoa_r+0x1d4>
 800891e:	2300      	movs	r3, #0
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	dc39      	bgt.n	800899c <_dtoa_r+0x2cc>
 8008928:	f04f 0901 	mov.w	r9, #1
 800892c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008930:	464b      	mov	r3, r9
 8008932:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008936:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008938:	2200      	movs	r2, #0
 800893a:	6042      	str	r2, [r0, #4]
 800893c:	2204      	movs	r2, #4
 800893e:	f102 0614 	add.w	r6, r2, #20
 8008942:	429e      	cmp	r6, r3
 8008944:	6841      	ldr	r1, [r0, #4]
 8008946:	d92f      	bls.n	80089a8 <_dtoa_r+0x2d8>
 8008948:	4620      	mov	r0, r4
 800894a:	f000 fcc7 	bl	80092dc <_Balloc>
 800894e:	9000      	str	r0, [sp, #0]
 8008950:	2800      	cmp	r0, #0
 8008952:	d14b      	bne.n	80089ec <_dtoa_r+0x31c>
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <_dtoa_r+0x318>)
 8008956:	4602      	mov	r2, r0
 8008958:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800895c:	e6d1      	b.n	8008702 <_dtoa_r+0x32>
 800895e:	2301      	movs	r3, #1
 8008960:	e7de      	b.n	8008920 <_dtoa_r+0x250>
 8008962:	2300      	movs	r3, #0
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008968:	eb0a 0903 	add.w	r9, sl, r3
 800896c:	f109 0301 	add.w	r3, r9, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	bfb8      	it	lt
 8008976:	2301      	movlt	r3, #1
 8008978:	e7dd      	b.n	8008936 <_dtoa_r+0x266>
 800897a:	2301      	movs	r3, #1
 800897c:	e7f2      	b.n	8008964 <_dtoa_r+0x294>
 800897e:	2501      	movs	r5, #1
 8008980:	2300      	movs	r3, #0
 8008982:	9305      	str	r3, [sp, #20]
 8008984:	9508      	str	r5, [sp, #32]
 8008986:	f04f 39ff 	mov.w	r9, #4294967295
 800898a:	2200      	movs	r2, #0
 800898c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008990:	2312      	movs	r3, #18
 8008992:	9209      	str	r2, [sp, #36]	; 0x24
 8008994:	e7cf      	b.n	8008936 <_dtoa_r+0x266>
 8008996:	2301      	movs	r3, #1
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	e7f4      	b.n	8008986 <_dtoa_r+0x2b6>
 800899c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80089a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80089a4:	464b      	mov	r3, r9
 80089a6:	e7c6      	b.n	8008936 <_dtoa_r+0x266>
 80089a8:	3101      	adds	r1, #1
 80089aa:	6041      	str	r1, [r0, #4]
 80089ac:	0052      	lsls	r2, r2, #1
 80089ae:	e7c6      	b.n	800893e <_dtoa_r+0x26e>
 80089b0:	636f4361 	.word	0x636f4361
 80089b4:	3fd287a7 	.word	0x3fd287a7
 80089b8:	8b60c8b3 	.word	0x8b60c8b3
 80089bc:	3fc68a28 	.word	0x3fc68a28
 80089c0:	509f79fb 	.word	0x509f79fb
 80089c4:	3fd34413 	.word	0x3fd34413
 80089c8:	0800a725 	.word	0x0800a725
 80089cc:	0800a73c 	.word	0x0800a73c
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	0800a721 	.word	0x0800a721
 80089d8:	0800a718 	.word	0x0800a718
 80089dc:	0800a6f5 	.word	0x0800a6f5
 80089e0:	3ff80000 	.word	0x3ff80000
 80089e4:	0800a838 	.word	0x0800a838
 80089e8:	0800a79b 	.word	0x0800a79b
 80089ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ee:	9a00      	ldr	r2, [sp, #0]
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	2b0e      	cmp	r3, #14
 80089f6:	f200 80ad 	bhi.w	8008b54 <_dtoa_r+0x484>
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	f000 80aa 	beq.w	8008b54 <_dtoa_r+0x484>
 8008a00:	f1ba 0f00 	cmp.w	sl, #0
 8008a04:	dd36      	ble.n	8008a74 <_dtoa_r+0x3a4>
 8008a06:	4ac3      	ldr	r2, [pc, #780]	; (8008d14 <_dtoa_r+0x644>)
 8008a08:	f00a 030f 	and.w	r3, sl, #15
 8008a0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a10:	ed93 7b00 	vldr	d7, [r3]
 8008a14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a1c:	eeb0 8a47 	vmov.f32	s16, s14
 8008a20:	eef0 8a67 	vmov.f32	s17, s15
 8008a24:	d016      	beq.n	8008a54 <_dtoa_r+0x384>
 8008a26:	4bbc      	ldr	r3, [pc, #752]	; (8008d18 <_dtoa_r+0x648>)
 8008a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a30:	f7f7 ff34 	bl	800089c <__aeabi_ddiv>
 8008a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a38:	f007 070f 	and.w	r7, r7, #15
 8008a3c:	2503      	movs	r5, #3
 8008a3e:	4eb6      	ldr	r6, [pc, #728]	; (8008d18 <_dtoa_r+0x648>)
 8008a40:	b957      	cbnz	r7, 8008a58 <_dtoa_r+0x388>
 8008a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a46:	ec53 2b18 	vmov	r2, r3, d8
 8008a4a:	f7f7 ff27 	bl	800089c <__aeabi_ddiv>
 8008a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a52:	e029      	b.n	8008aa8 <_dtoa_r+0x3d8>
 8008a54:	2502      	movs	r5, #2
 8008a56:	e7f2      	b.n	8008a3e <_dtoa_r+0x36e>
 8008a58:	07f9      	lsls	r1, r7, #31
 8008a5a:	d508      	bpl.n	8008a6e <_dtoa_r+0x39e>
 8008a5c:	ec51 0b18 	vmov	r0, r1, d8
 8008a60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a64:	f7f7 fdf0 	bl	8000648 <__aeabi_dmul>
 8008a68:	ec41 0b18 	vmov	d8, r0, r1
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	107f      	asrs	r7, r7, #1
 8008a70:	3608      	adds	r6, #8
 8008a72:	e7e5      	b.n	8008a40 <_dtoa_r+0x370>
 8008a74:	f000 80a6 	beq.w	8008bc4 <_dtoa_r+0x4f4>
 8008a78:	f1ca 0600 	rsb	r6, sl, #0
 8008a7c:	4ba5      	ldr	r3, [pc, #660]	; (8008d14 <_dtoa_r+0x644>)
 8008a7e:	4fa6      	ldr	r7, [pc, #664]	; (8008d18 <_dtoa_r+0x648>)
 8008a80:	f006 020f 	and.w	r2, r6, #15
 8008a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a90:	f7f7 fdda 	bl	8000648 <__aeabi_dmul>
 8008a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a98:	1136      	asrs	r6, r6, #4
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2502      	movs	r5, #2
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	f040 8085 	bne.w	8008bae <_dtoa_r+0x4de>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1d2      	bne.n	8008a4e <_dtoa_r+0x37e>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 808c 	beq.w	8008bc8 <_dtoa_r+0x4f8>
 8008ab0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ab4:	4b99      	ldr	r3, [pc, #612]	; (8008d1c <_dtoa_r+0x64c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f8 f836 	bl	8000b2c <__aeabi_dcmplt>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f000 8081 	beq.w	8008bc8 <_dtoa_r+0x4f8>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d07d      	beq.n	8008bc8 <_dtoa_r+0x4f8>
 8008acc:	f1b9 0f00 	cmp.w	r9, #0
 8008ad0:	dd3c      	ble.n	8008b4c <_dtoa_r+0x47c>
 8008ad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4b91      	ldr	r3, [pc, #580]	; (8008d20 <_dtoa_r+0x650>)
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fdb2 	bl	8000648 <__aeabi_dmul>
 8008ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae8:	3501      	adds	r5, #1
 8008aea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008aee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008af2:	4628      	mov	r0, r5
 8008af4:	f7f7 fd3e 	bl	8000574 <__aeabi_i2d>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 fda4 	bl	8000648 <__aeabi_dmul>
 8008b00:	4b88      	ldr	r3, [pc, #544]	; (8008d24 <_dtoa_r+0x654>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	f7f7 fbea 	bl	80002dc <__adddf3>
 8008b08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d15c      	bne.n	8008bd2 <_dtoa_r+0x502>
 8008b18:	4b83      	ldr	r3, [pc, #524]	; (8008d28 <_dtoa_r+0x658>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 fbda 	bl	80002d8 <__aeabi_dsub>
 8008b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b28:	4606      	mov	r6, r0
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	f7f8 f81c 	bl	8000b68 <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f040 8296 	bne.w	8009062 <_dtoa_r+0x992>
 8008b36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b40:	4639      	mov	r1, r7
 8008b42:	f7f7 fff3 	bl	8000b2c <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 8288 	bne.w	800905c <_dtoa_r+0x98c>
 8008b4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f2c0 8158 	blt.w	8008e0c <_dtoa_r+0x73c>
 8008b5c:	f1ba 0f0e 	cmp.w	sl, #14
 8008b60:	f300 8154 	bgt.w	8008e0c <_dtoa_r+0x73c>
 8008b64:	4b6b      	ldr	r3, [pc, #428]	; (8008d14 <_dtoa_r+0x644>)
 8008b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f280 80e3 	bge.w	8008d3c <_dtoa_r+0x66c>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f300 80df 	bgt.w	8008d3c <_dtoa_r+0x66c>
 8008b7e:	f040 826d 	bne.w	800905c <_dtoa_r+0x98c>
 8008b82:	4b69      	ldr	r3, [pc, #420]	; (8008d28 <_dtoa_r+0x658>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f7f7 fd5d 	bl	8000648 <__aeabi_dmul>
 8008b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b92:	f7f7 ffdf 	bl	8000b54 <__aeabi_dcmpge>
 8008b96:	9e01      	ldr	r6, [sp, #4]
 8008b98:	4637      	mov	r7, r6
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f040 8243 	bne.w	8009026 <_dtoa_r+0x956>
 8008ba0:	9d00      	ldr	r5, [sp, #0]
 8008ba2:	2331      	movs	r3, #49	; 0x31
 8008ba4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ba8:	f10a 0a01 	add.w	sl, sl, #1
 8008bac:	e23f      	b.n	800902e <_dtoa_r+0x95e>
 8008bae:	07f2      	lsls	r2, r6, #31
 8008bb0:	d505      	bpl.n	8008bbe <_dtoa_r+0x4ee>
 8008bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb6:	f7f7 fd47 	bl	8000648 <__aeabi_dmul>
 8008bba:	3501      	adds	r5, #1
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	1076      	asrs	r6, r6, #1
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	e76c      	b.n	8008a9e <_dtoa_r+0x3ce>
 8008bc4:	2502      	movs	r5, #2
 8008bc6:	e76f      	b.n	8008aa8 <_dtoa_r+0x3d8>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	f8cd a01c 	str.w	sl, [sp, #28]
 8008bce:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd0:	e78d      	b.n	8008aee <_dtoa_r+0x41e>
 8008bd2:	9900      	ldr	r1, [sp, #0]
 8008bd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd8:	4b4e      	ldr	r3, [pc, #312]	; (8008d14 <_dtoa_r+0x644>)
 8008bda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bde:	4401      	add	r1, r0
 8008be0:	9102      	str	r1, [sp, #8]
 8008be2:	9908      	ldr	r1, [sp, #32]
 8008be4:	eeb0 8a47 	vmov.f32	s16, s14
 8008be8:	eef0 8a67 	vmov.f32	s17, s15
 8008bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d045      	beq.n	8008c84 <_dtoa_r+0x5b4>
 8008bf8:	494c      	ldr	r1, [pc, #304]	; (8008d2c <_dtoa_r+0x65c>)
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f7 fe4e 	bl	800089c <__aeabi_ddiv>
 8008c00:	ec53 2b18 	vmov	r2, r3, d8
 8008c04:	f7f7 fb68 	bl	80002d8 <__aeabi_dsub>
 8008c08:	9d00      	ldr	r5, [sp, #0]
 8008c0a:	ec41 0b18 	vmov	d8, r0, r1
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7f7 ffc9 	bl	8000ba8 <__aeabi_d2iz>
 8008c16:	900c      	str	r0, [sp, #48]	; 0x30
 8008c18:	f7f7 fcac 	bl	8000574 <__aeabi_i2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fb58 	bl	80002d8 <__aeabi_dsub>
 8008c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c2a:	3330      	adds	r3, #48	; 0x30
 8008c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c30:	ec53 2b18 	vmov	r2, r3, d8
 8008c34:	4606      	mov	r6, r0
 8008c36:	460f      	mov	r7, r1
 8008c38:	f7f7 ff78 	bl	8000b2c <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d165      	bne.n	8008d0c <_dtoa_r+0x63c>
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	4935      	ldr	r1, [pc, #212]	; (8008d1c <_dtoa_r+0x64c>)
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7f7 fb46 	bl	80002d8 <__aeabi_dsub>
 8008c4c:	ec53 2b18 	vmov	r2, r3, d8
 8008c50:	f7f7 ff6c 	bl	8000b2c <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 80b9 	bne.w	8008dcc <_dtoa_r+0x6fc>
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	f43f af75 	beq.w	8008b4c <_dtoa_r+0x47c>
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <_dtoa_r+0x650>)
 8008c64:	ec51 0b18 	vmov	r0, r1, d8
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f7f7 fced 	bl	8000648 <__aeabi_dmul>
 8008c6e:	4b2c      	ldr	r3, [pc, #176]	; (8008d20 <_dtoa_r+0x650>)
 8008c70:	ec41 0b18 	vmov	d8, r0, r1
 8008c74:	2200      	movs	r2, #0
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fce5 	bl	8000648 <__aeabi_dmul>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	e7c4      	b.n	8008c0e <_dtoa_r+0x53e>
 8008c84:	ec51 0b17 	vmov	r0, r1, d7
 8008c88:	f7f7 fcde 	bl	8000648 <__aeabi_dmul>
 8008c8c:	9b02      	ldr	r3, [sp, #8]
 8008c8e:	9d00      	ldr	r5, [sp, #0]
 8008c90:	930c      	str	r3, [sp, #48]	; 0x30
 8008c92:	ec41 0b18 	vmov	d8, r0, r1
 8008c96:	4639      	mov	r1, r7
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7f7 ff85 	bl	8000ba8 <__aeabi_d2iz>
 8008c9e:	9011      	str	r0, [sp, #68]	; 0x44
 8008ca0:	f7f7 fc68 	bl	8000574 <__aeabi_i2d>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 fb14 	bl	80002d8 <__aeabi_dsub>
 8008cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb2:	3330      	adds	r3, #48	; 0x30
 8008cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	d134      	bne.n	8008d30 <_dtoa_r+0x660>
 8008cc6:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <_dtoa_r+0x65c>)
 8008cc8:	ec51 0b18 	vmov	r0, r1, d8
 8008ccc:	f7f7 fb06 	bl	80002dc <__adddf3>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	f7f7 ff46 	bl	8000b68 <__aeabi_dcmpgt>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d175      	bne.n	8008dcc <_dtoa_r+0x6fc>
 8008ce0:	ec53 2b18 	vmov	r2, r3, d8
 8008ce4:	4911      	ldr	r1, [pc, #68]	; (8008d2c <_dtoa_r+0x65c>)
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	f7f7 faf6 	bl	80002d8 <__aeabi_dsub>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 ff1a 	bl	8000b2c <__aeabi_dcmplt>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f43f af27 	beq.w	8008b4c <_dtoa_r+0x47c>
 8008cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d00:	1e6b      	subs	r3, r5, #1
 8008d02:	930c      	str	r3, [sp, #48]	; 0x30
 8008d04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d0f8      	beq.n	8008cfe <_dtoa_r+0x62e>
 8008d0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d10:	e04a      	b.n	8008da8 <_dtoa_r+0x6d8>
 8008d12:	bf00      	nop
 8008d14:	0800a838 	.word	0x0800a838
 8008d18:	0800a810 	.word	0x0800a810
 8008d1c:	3ff00000 	.word	0x3ff00000
 8008d20:	40240000 	.word	0x40240000
 8008d24:	401c0000 	.word	0x401c0000
 8008d28:	40140000 	.word	0x40140000
 8008d2c:	3fe00000 	.word	0x3fe00000
 8008d30:	4baf      	ldr	r3, [pc, #700]	; (8008ff0 <_dtoa_r+0x920>)
 8008d32:	f7f7 fc89 	bl	8000648 <__aeabi_dmul>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	e7ac      	b.n	8008c96 <_dtoa_r+0x5c6>
 8008d3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d40:	9d00      	ldr	r5, [sp, #0]
 8008d42:	4642      	mov	r2, r8
 8008d44:	464b      	mov	r3, r9
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fda7 	bl	800089c <__aeabi_ddiv>
 8008d4e:	f7f7 ff2b 	bl	8000ba8 <__aeabi_d2iz>
 8008d52:	9002      	str	r0, [sp, #8]
 8008d54:	f7f7 fc0e 	bl	8000574 <__aeabi_i2d>
 8008d58:	4642      	mov	r2, r8
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	f7f7 fc74 	bl	8000648 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 fab6 	bl	80002d8 <__aeabi_dsub>
 8008d6c:	9e02      	ldr	r6, [sp, #8]
 8008d6e:	9f01      	ldr	r7, [sp, #4]
 8008d70:	3630      	adds	r6, #48	; 0x30
 8008d72:	f805 6b01 	strb.w	r6, [r5], #1
 8008d76:	9e00      	ldr	r6, [sp, #0]
 8008d78:	1bae      	subs	r6, r5, r6
 8008d7a:	42b7      	cmp	r7, r6
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	d137      	bne.n	8008df2 <_dtoa_r+0x722>
 8008d82:	f7f7 faab 	bl	80002dc <__adddf3>
 8008d86:	4642      	mov	r2, r8
 8008d88:	464b      	mov	r3, r9
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	f7f7 feeb 	bl	8000b68 <__aeabi_dcmpgt>
 8008d92:	b9c8      	cbnz	r0, 8008dc8 <_dtoa_r+0x6f8>
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 febc 	bl	8000b18 <__aeabi_dcmpeq>
 8008da0:	b110      	cbz	r0, 8008da8 <_dtoa_r+0x6d8>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	07d9      	lsls	r1, r3, #31
 8008da6:	d40f      	bmi.n	8008dc8 <_dtoa_r+0x6f8>
 8008da8:	4620      	mov	r0, r4
 8008daa:	4659      	mov	r1, fp
 8008dac:	f000 fad6 	bl	800935c <_Bfree>
 8008db0:	2300      	movs	r3, #0
 8008db2:	702b      	strb	r3, [r5, #0]
 8008db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db6:	f10a 0001 	add.w	r0, sl, #1
 8008dba:	6018      	str	r0, [r3, #0]
 8008dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f43f acd8 	beq.w	8008774 <_dtoa_r+0xa4>
 8008dc4:	601d      	str	r5, [r3, #0]
 8008dc6:	e4d5      	b.n	8008774 <_dtoa_r+0xa4>
 8008dc8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dcc:	462b      	mov	r3, r5
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd4:	2a39      	cmp	r2, #57	; 0x39
 8008dd6:	d108      	bne.n	8008dea <_dtoa_r+0x71a>
 8008dd8:	9a00      	ldr	r2, [sp, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1f7      	bne.n	8008dce <_dtoa_r+0x6fe>
 8008dde:	9a07      	ldr	r2, [sp, #28]
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	3201      	adds	r2, #1
 8008de4:	9207      	str	r2, [sp, #28]
 8008de6:	2230      	movs	r2, #48	; 0x30
 8008de8:	700a      	strb	r2, [r1, #0]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	3201      	adds	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e78c      	b.n	8008d0c <_dtoa_r+0x63c>
 8008df2:	4b7f      	ldr	r3, [pc, #508]	; (8008ff0 <_dtoa_r+0x920>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	f7f7 fc27 	bl	8000648 <__aeabi_dmul>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	f7f7 fe89 	bl	8000b18 <__aeabi_dcmpeq>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d09b      	beq.n	8008d42 <_dtoa_r+0x672>
 8008e0a:	e7cd      	b.n	8008da8 <_dtoa_r+0x6d8>
 8008e0c:	9a08      	ldr	r2, [sp, #32]
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	f000 80c4 	beq.w	8008f9c <_dtoa_r+0x8cc>
 8008e14:	9a05      	ldr	r2, [sp, #20]
 8008e16:	2a01      	cmp	r2, #1
 8008e18:	f300 80a8 	bgt.w	8008f6c <_dtoa_r+0x89c>
 8008e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	f000 80a0 	beq.w	8008f64 <_dtoa_r+0x894>
 8008e24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e28:	9e06      	ldr	r6, [sp, #24]
 8008e2a:	4645      	mov	r5, r8
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	441a      	add	r2, r3
 8008e32:	4620      	mov	r0, r4
 8008e34:	4498      	add	r8, r3
 8008e36:	9204      	str	r2, [sp, #16]
 8008e38:	f000 fb4c 	bl	80094d4 <__i2b>
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	dd0b      	ble.n	8008e5a <_dtoa_r+0x78a>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd08      	ble.n	8008e5a <_dtoa_r+0x78a>
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	9a04      	ldr	r2, [sp, #16]
 8008e4c:	bfa8      	it	ge
 8008e4e:	462b      	movge	r3, r5
 8008e50:	eba8 0803 	sub.w	r8, r8, r3
 8008e54:	1aed      	subs	r5, r5, r3
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	9b06      	ldr	r3, [sp, #24]
 8008e5c:	b1fb      	cbz	r3, 8008e9e <_dtoa_r+0x7ce>
 8008e5e:	9b08      	ldr	r3, [sp, #32]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 809f 	beq.w	8008fa4 <_dtoa_r+0x8d4>
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	dd11      	ble.n	8008e8e <_dtoa_r+0x7be>
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fbec 	bl	800964c <__pow5mult>
 8008e74:	465a      	mov	r2, fp
 8008e76:	4601      	mov	r1, r0
 8008e78:	4607      	mov	r7, r0
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fb40 	bl	8009500 <__multiply>
 8008e80:	4659      	mov	r1, fp
 8008e82:	9007      	str	r0, [sp, #28]
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 fa69 	bl	800935c <_Bfree>
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	469b      	mov	fp, r3
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	1b9a      	subs	r2, r3, r6
 8008e92:	d004      	beq.n	8008e9e <_dtoa_r+0x7ce>
 8008e94:	4659      	mov	r1, fp
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fbd8 	bl	800964c <__pow5mult>
 8008e9c:	4683      	mov	fp, r0
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fb17 	bl	80094d4 <__i2b>
 8008ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	dd7c      	ble.n	8008fa8 <_dtoa_r+0x8d8>
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fbca 	bl	800964c <__pow5mult>
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	dd76      	ble.n	8008fae <_dtoa_r+0x8de>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9306      	str	r3, [sp, #24]
 8008ec4:	6933      	ldr	r3, [r6, #16]
 8008ec6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008eca:	6918      	ldr	r0, [r3, #16]
 8008ecc:	f000 fab2 	bl	8009434 <__hi0bits>
 8008ed0:	f1c0 0020 	rsb	r0, r0, #32
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	4418      	add	r0, r3
 8008ed8:	f010 001f 	ands.w	r0, r0, #31
 8008edc:	f000 8086 	beq.w	8008fec <_dtoa_r+0x91c>
 8008ee0:	f1c0 0320 	rsb	r3, r0, #32
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	dd7f      	ble.n	8008fe8 <_dtoa_r+0x918>
 8008ee8:	f1c0 001c 	rsb	r0, r0, #28
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4403      	add	r3, r0
 8008ef0:	4480      	add	r8, r0
 8008ef2:	4405      	add	r5, r0
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	dd05      	ble.n	8008f08 <_dtoa_r+0x838>
 8008efc:	4659      	mov	r1, fp
 8008efe:	4642      	mov	r2, r8
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fbfd 	bl	8009700 <__lshift>
 8008f06:	4683      	mov	fp, r0
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd05      	ble.n	8008f1a <_dtoa_r+0x84a>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	461a      	mov	r2, r3
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fbf4 	bl	8009700 <__lshift>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d069      	beq.n	8008ff4 <_dtoa_r+0x924>
 8008f20:	4631      	mov	r1, r6
 8008f22:	4658      	mov	r0, fp
 8008f24:	f000 fc58 	bl	80097d8 <__mcmp>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	da63      	bge.n	8008ff4 <_dtoa_r+0x924>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4659      	mov	r1, fp
 8008f30:	220a      	movs	r2, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fa34 	bl	80093a0 <__multadd>
 8008f38:	9b08      	ldr	r3, [sp, #32]
 8008f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3e:	4683      	mov	fp, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 818f 	beq.w	8009264 <_dtoa_r+0xb94>
 8008f46:	4639      	mov	r1, r7
 8008f48:	2300      	movs	r3, #0
 8008f4a:	220a      	movs	r2, #10
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fa27 	bl	80093a0 <__multadd>
 8008f52:	f1b9 0f00 	cmp.w	r9, #0
 8008f56:	4607      	mov	r7, r0
 8008f58:	f300 808e 	bgt.w	8009078 <_dtoa_r+0x9a8>
 8008f5c:	9b05      	ldr	r3, [sp, #20]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	dc50      	bgt.n	8009004 <_dtoa_r+0x934>
 8008f62:	e089      	b.n	8009078 <_dtoa_r+0x9a8>
 8008f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f6a:	e75d      	b.n	8008e28 <_dtoa_r+0x758>
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	1e5e      	subs	r6, r3, #1
 8008f70:	9b06      	ldr	r3, [sp, #24]
 8008f72:	42b3      	cmp	r3, r6
 8008f74:	bfbf      	itttt	lt
 8008f76:	9b06      	ldrlt	r3, [sp, #24]
 8008f78:	9606      	strlt	r6, [sp, #24]
 8008f7a:	1af2      	sublt	r2, r6, r3
 8008f7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f7e:	bfb6      	itet	lt
 8008f80:	189b      	addlt	r3, r3, r2
 8008f82:	1b9e      	subge	r6, r3, r6
 8008f84:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	bfb8      	it	lt
 8008f8a:	2600      	movlt	r6, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfb5      	itete	lt
 8008f90:	eba8 0503 	sublt.w	r5, r8, r3
 8008f94:	9b01      	ldrge	r3, [sp, #4]
 8008f96:	2300      	movlt	r3, #0
 8008f98:	4645      	movge	r5, r8
 8008f9a:	e747      	b.n	8008e2c <_dtoa_r+0x75c>
 8008f9c:	9e06      	ldr	r6, [sp, #24]
 8008f9e:	9f08      	ldr	r7, [sp, #32]
 8008fa0:	4645      	mov	r5, r8
 8008fa2:	e74c      	b.n	8008e3e <_dtoa_r+0x76e>
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	e775      	b.n	8008e94 <_dtoa_r+0x7c4>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	dc18      	bgt.n	8008fe0 <_dtoa_r+0x910>
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	b9b3      	cbnz	r3, 8008fe0 <_dtoa_r+0x910>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb8:	b9a3      	cbnz	r3, 8008fe4 <_dtoa_r+0x914>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fc0:	0d1b      	lsrs	r3, r3, #20
 8008fc2:	051b      	lsls	r3, r3, #20
 8008fc4:	b12b      	cbz	r3, 8008fd2 <_dtoa_r+0x902>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f108 0801 	add.w	r8, r8, #1
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	9306      	str	r3, [sp, #24]
 8008fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f47f af74 	bne.w	8008ec4 <_dtoa_r+0x7f4>
 8008fdc:	2001      	movs	r0, #1
 8008fde:	e779      	b.n	8008ed4 <_dtoa_r+0x804>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7f6      	b.n	8008fd2 <_dtoa_r+0x902>
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	e7f4      	b.n	8008fd2 <_dtoa_r+0x902>
 8008fe8:	d085      	beq.n	8008ef6 <_dtoa_r+0x826>
 8008fea:	4618      	mov	r0, r3
 8008fec:	301c      	adds	r0, #28
 8008fee:	e77d      	b.n	8008eec <_dtoa_r+0x81c>
 8008ff0:	40240000 	.word	0x40240000
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dc38      	bgt.n	800906c <_dtoa_r+0x99c>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	dd35      	ble.n	800906c <_dtoa_r+0x99c>
 8009000:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009004:	f1b9 0f00 	cmp.w	r9, #0
 8009008:	d10d      	bne.n	8009026 <_dtoa_r+0x956>
 800900a:	4631      	mov	r1, r6
 800900c:	464b      	mov	r3, r9
 800900e:	2205      	movs	r2, #5
 8009010:	4620      	mov	r0, r4
 8009012:	f000 f9c5 	bl	80093a0 <__multadd>
 8009016:	4601      	mov	r1, r0
 8009018:	4606      	mov	r6, r0
 800901a:	4658      	mov	r0, fp
 800901c:	f000 fbdc 	bl	80097d8 <__mcmp>
 8009020:	2800      	cmp	r0, #0
 8009022:	f73f adbd 	bgt.w	8008ba0 <_dtoa_r+0x4d0>
 8009026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009028:	9d00      	ldr	r5, [sp, #0]
 800902a:	ea6f 0a03 	mvn.w	sl, r3
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	4631      	mov	r1, r6
 8009034:	4620      	mov	r0, r4
 8009036:	f000 f991 	bl	800935c <_Bfree>
 800903a:	2f00      	cmp	r7, #0
 800903c:	f43f aeb4 	beq.w	8008da8 <_dtoa_r+0x6d8>
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	d005      	beq.n	8009052 <_dtoa_r+0x982>
 8009046:	45b8      	cmp	r8, r7
 8009048:	d003      	beq.n	8009052 <_dtoa_r+0x982>
 800904a:	4641      	mov	r1, r8
 800904c:	4620      	mov	r0, r4
 800904e:	f000 f985 	bl	800935c <_Bfree>
 8009052:	4639      	mov	r1, r7
 8009054:	4620      	mov	r0, r4
 8009056:	f000 f981 	bl	800935c <_Bfree>
 800905a:	e6a5      	b.n	8008da8 <_dtoa_r+0x6d8>
 800905c:	2600      	movs	r6, #0
 800905e:	4637      	mov	r7, r6
 8009060:	e7e1      	b.n	8009026 <_dtoa_r+0x956>
 8009062:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009064:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009068:	4637      	mov	r7, r6
 800906a:	e599      	b.n	8008ba0 <_dtoa_r+0x4d0>
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80fd 	beq.w	8009272 <_dtoa_r+0xba2>
 8009078:	2d00      	cmp	r5, #0
 800907a:	dd05      	ble.n	8009088 <_dtoa_r+0x9b8>
 800907c:	4639      	mov	r1, r7
 800907e:	462a      	mov	r2, r5
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fb3d 	bl	8009700 <__lshift>
 8009086:	4607      	mov	r7, r0
 8009088:	9b06      	ldr	r3, [sp, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d05c      	beq.n	8009148 <_dtoa_r+0xa78>
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f923 	bl	80092dc <_Balloc>
 8009096:	4605      	mov	r5, r0
 8009098:	b928      	cbnz	r0, 80090a6 <_dtoa_r+0x9d6>
 800909a:	4b80      	ldr	r3, [pc, #512]	; (800929c <_dtoa_r+0xbcc>)
 800909c:	4602      	mov	r2, r0
 800909e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090a2:	f7ff bb2e 	b.w	8008702 <_dtoa_r+0x32>
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	3202      	adds	r2, #2
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	f107 010c 	add.w	r1, r7, #12
 80090b0:	300c      	adds	r0, #12
 80090b2:	f000 f905 	bl	80092c0 <memcpy>
 80090b6:	2201      	movs	r2, #1
 80090b8:	4629      	mov	r1, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fb20 	bl	8009700 <__lshift>
 80090c0:	9b00      	ldr	r3, [sp, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	444b      	add	r3, r9
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	46b8      	mov	r8, r7
 80090d4:	9306      	str	r3, [sp, #24]
 80090d6:	4607      	mov	r7, r0
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	4631      	mov	r1, r6
 80090dc:	3b01      	subs	r3, #1
 80090de:	4658      	mov	r0, fp
 80090e0:	9302      	str	r3, [sp, #8]
 80090e2:	f7ff fa69 	bl	80085b8 <quorem>
 80090e6:	4603      	mov	r3, r0
 80090e8:	3330      	adds	r3, #48	; 0x30
 80090ea:	9004      	str	r0, [sp, #16]
 80090ec:	4641      	mov	r1, r8
 80090ee:	4658      	mov	r0, fp
 80090f0:	9308      	str	r3, [sp, #32]
 80090f2:	f000 fb71 	bl	80097d8 <__mcmp>
 80090f6:	463a      	mov	r2, r7
 80090f8:	4681      	mov	r9, r0
 80090fa:	4631      	mov	r1, r6
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fb87 	bl	8009810 <__mdiff>
 8009102:	68c2      	ldr	r2, [r0, #12]
 8009104:	9b08      	ldr	r3, [sp, #32]
 8009106:	4605      	mov	r5, r0
 8009108:	bb02      	cbnz	r2, 800914c <_dtoa_r+0xa7c>
 800910a:	4601      	mov	r1, r0
 800910c:	4658      	mov	r0, fp
 800910e:	f000 fb63 	bl	80097d8 <__mcmp>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	4602      	mov	r2, r0
 8009116:	4629      	mov	r1, r5
 8009118:	4620      	mov	r0, r4
 800911a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800911e:	f000 f91d 	bl	800935c <_Bfree>
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009126:	9d01      	ldr	r5, [sp, #4]
 8009128:	ea43 0102 	orr.w	r1, r3, r2
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	430b      	orrs	r3, r1
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	d10d      	bne.n	8009150 <_dtoa_r+0xa80>
 8009134:	2b39      	cmp	r3, #57	; 0x39
 8009136:	d029      	beq.n	800918c <_dtoa_r+0xabc>
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	dd01      	ble.n	8009142 <_dtoa_r+0xa72>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	3331      	adds	r3, #49	; 0x31
 8009142:	9a02      	ldr	r2, [sp, #8]
 8009144:	7013      	strb	r3, [r2, #0]
 8009146:	e774      	b.n	8009032 <_dtoa_r+0x962>
 8009148:	4638      	mov	r0, r7
 800914a:	e7b9      	b.n	80090c0 <_dtoa_r+0x9f0>
 800914c:	2201      	movs	r2, #1
 800914e:	e7e2      	b.n	8009116 <_dtoa_r+0xa46>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	db06      	blt.n	8009164 <_dtoa_r+0xa94>
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	ea41 0909 	orr.w	r9, r1, r9
 800915c:	9906      	ldr	r1, [sp, #24]
 800915e:	ea59 0101 	orrs.w	r1, r9, r1
 8009162:	d120      	bne.n	80091a6 <_dtoa_r+0xad6>
 8009164:	2a00      	cmp	r2, #0
 8009166:	ddec      	ble.n	8009142 <_dtoa_r+0xa72>
 8009168:	4659      	mov	r1, fp
 800916a:	2201      	movs	r2, #1
 800916c:	4620      	mov	r0, r4
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	f000 fac6 	bl	8009700 <__lshift>
 8009174:	4631      	mov	r1, r6
 8009176:	4683      	mov	fp, r0
 8009178:	f000 fb2e 	bl	80097d8 <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	dc02      	bgt.n	8009188 <_dtoa_r+0xab8>
 8009182:	d1de      	bne.n	8009142 <_dtoa_r+0xa72>
 8009184:	07da      	lsls	r2, r3, #31
 8009186:	d5dc      	bpl.n	8009142 <_dtoa_r+0xa72>
 8009188:	2b39      	cmp	r3, #57	; 0x39
 800918a:	d1d8      	bne.n	800913e <_dtoa_r+0xa6e>
 800918c:	9a02      	ldr	r2, [sp, #8]
 800918e:	2339      	movs	r3, #57	; 0x39
 8009190:	7013      	strb	r3, [r2, #0]
 8009192:	462b      	mov	r3, r5
 8009194:	461d      	mov	r5, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800919c:	2a39      	cmp	r2, #57	; 0x39
 800919e:	d050      	beq.n	8009242 <_dtoa_r+0xb72>
 80091a0:	3201      	adds	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e745      	b.n	8009032 <_dtoa_r+0x962>
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	dd03      	ble.n	80091b2 <_dtoa_r+0xae2>
 80091aa:	2b39      	cmp	r3, #57	; 0x39
 80091ac:	d0ee      	beq.n	800918c <_dtoa_r+0xabc>
 80091ae:	3301      	adds	r3, #1
 80091b0:	e7c7      	b.n	8009142 <_dtoa_r+0xa72>
 80091b2:	9a01      	ldr	r2, [sp, #4]
 80091b4:	9907      	ldr	r1, [sp, #28]
 80091b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091ba:	428a      	cmp	r2, r1
 80091bc:	d02a      	beq.n	8009214 <_dtoa_r+0xb44>
 80091be:	4659      	mov	r1, fp
 80091c0:	2300      	movs	r3, #0
 80091c2:	220a      	movs	r2, #10
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 f8eb 	bl	80093a0 <__multadd>
 80091ca:	45b8      	cmp	r8, r7
 80091cc:	4683      	mov	fp, r0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	f04f 020a 	mov.w	r2, #10
 80091d6:	4641      	mov	r1, r8
 80091d8:	4620      	mov	r0, r4
 80091da:	d107      	bne.n	80091ec <_dtoa_r+0xb1c>
 80091dc:	f000 f8e0 	bl	80093a0 <__multadd>
 80091e0:	4680      	mov	r8, r0
 80091e2:	4607      	mov	r7, r0
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	3301      	adds	r3, #1
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	e775      	b.n	80090d8 <_dtoa_r+0xa08>
 80091ec:	f000 f8d8 	bl	80093a0 <__multadd>
 80091f0:	4639      	mov	r1, r7
 80091f2:	4680      	mov	r8, r0
 80091f4:	2300      	movs	r3, #0
 80091f6:	220a      	movs	r2, #10
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f8d1 	bl	80093a0 <__multadd>
 80091fe:	4607      	mov	r7, r0
 8009200:	e7f0      	b.n	80091e4 <_dtoa_r+0xb14>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	9a00      	ldr	r2, [sp, #0]
 8009208:	bfcc      	ite	gt
 800920a:	464d      	movgt	r5, r9
 800920c:	2501      	movle	r5, #1
 800920e:	4415      	add	r5, r2
 8009210:	f04f 0800 	mov.w	r8, #0
 8009214:	4659      	mov	r1, fp
 8009216:	2201      	movs	r2, #1
 8009218:	4620      	mov	r0, r4
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	f000 fa70 	bl	8009700 <__lshift>
 8009220:	4631      	mov	r1, r6
 8009222:	4683      	mov	fp, r0
 8009224:	f000 fad8 	bl	80097d8 <__mcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	dcb2      	bgt.n	8009192 <_dtoa_r+0xac2>
 800922c:	d102      	bne.n	8009234 <_dtoa_r+0xb64>
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	07db      	lsls	r3, r3, #31
 8009232:	d4ae      	bmi.n	8009192 <_dtoa_r+0xac2>
 8009234:	462b      	mov	r3, r5
 8009236:	461d      	mov	r5, r3
 8009238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800923c:	2a30      	cmp	r2, #48	; 0x30
 800923e:	d0fa      	beq.n	8009236 <_dtoa_r+0xb66>
 8009240:	e6f7      	b.n	8009032 <_dtoa_r+0x962>
 8009242:	9a00      	ldr	r2, [sp, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d1a5      	bne.n	8009194 <_dtoa_r+0xac4>
 8009248:	f10a 0a01 	add.w	sl, sl, #1
 800924c:	2331      	movs	r3, #49	; 0x31
 800924e:	e779      	b.n	8009144 <_dtoa_r+0xa74>
 8009250:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <_dtoa_r+0xbd0>)
 8009252:	f7ff baaf 	b.w	80087b4 <_dtoa_r+0xe4>
 8009256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f aa86 	bne.w	800876a <_dtoa_r+0x9a>
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <_dtoa_r+0xbd4>)
 8009260:	f7ff baa8 	b.w	80087b4 <_dtoa_r+0xe4>
 8009264:	f1b9 0f00 	cmp.w	r9, #0
 8009268:	dc03      	bgt.n	8009272 <_dtoa_r+0xba2>
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f73f aec9 	bgt.w	8009004 <_dtoa_r+0x934>
 8009272:	9d00      	ldr	r5, [sp, #0]
 8009274:	4631      	mov	r1, r6
 8009276:	4658      	mov	r0, fp
 8009278:	f7ff f99e 	bl	80085b8 <quorem>
 800927c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009280:	f805 3b01 	strb.w	r3, [r5], #1
 8009284:	9a00      	ldr	r2, [sp, #0]
 8009286:	1aaa      	subs	r2, r5, r2
 8009288:	4591      	cmp	r9, r2
 800928a:	ddba      	ble.n	8009202 <_dtoa_r+0xb32>
 800928c:	4659      	mov	r1, fp
 800928e:	2300      	movs	r3, #0
 8009290:	220a      	movs	r2, #10
 8009292:	4620      	mov	r0, r4
 8009294:	f000 f884 	bl	80093a0 <__multadd>
 8009298:	4683      	mov	fp, r0
 800929a:	e7eb      	b.n	8009274 <_dtoa_r+0xba4>
 800929c:	0800a79b 	.word	0x0800a79b
 80092a0:	0800a6f4 	.word	0x0800a6f4
 80092a4:	0800a718 	.word	0x0800a718

080092a8 <_localeconv_r>:
 80092a8:	4800      	ldr	r0, [pc, #0]	; (80092ac <_localeconv_r+0x4>)
 80092aa:	4770      	bx	lr
 80092ac:	20000164 	.word	0x20000164

080092b0 <malloc>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <malloc+0xc>)
 80092b2:	4601      	mov	r1, r0
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	f000 bbef 	b.w	8009a98 <_malloc_r>
 80092ba:	bf00      	nop
 80092bc:	20000010 	.word	0x20000010

080092c0 <memcpy>:
 80092c0:	440a      	add	r2, r1
 80092c2:	4291      	cmp	r1, r2
 80092c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092c8:	d100      	bne.n	80092cc <memcpy+0xc>
 80092ca:	4770      	bx	lr
 80092cc:	b510      	push	{r4, lr}
 80092ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d6:	4291      	cmp	r1, r2
 80092d8:	d1f9      	bne.n	80092ce <memcpy+0xe>
 80092da:	bd10      	pop	{r4, pc}

080092dc <_Balloc>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	b976      	cbnz	r6, 8009304 <_Balloc+0x28>
 80092e6:	2010      	movs	r0, #16
 80092e8:	f7ff ffe2 	bl	80092b0 <malloc>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6260      	str	r0, [r4, #36]	; 0x24
 80092f0:	b920      	cbnz	r0, 80092fc <_Balloc+0x20>
 80092f2:	4b18      	ldr	r3, [pc, #96]	; (8009354 <_Balloc+0x78>)
 80092f4:	4818      	ldr	r0, [pc, #96]	; (8009358 <_Balloc+0x7c>)
 80092f6:	2166      	movs	r1, #102	; 0x66
 80092f8:	f000 fc38 	bl	8009b6c <__assert_func>
 80092fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009300:	6006      	str	r6, [r0, #0]
 8009302:	60c6      	str	r6, [r0, #12]
 8009304:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009306:	68f3      	ldr	r3, [r6, #12]
 8009308:	b183      	cbz	r3, 800932c <_Balloc+0x50>
 800930a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009312:	b9b8      	cbnz	r0, 8009344 <_Balloc+0x68>
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f605 	lsl.w	r6, r1, r5
 800931a:	1d72      	adds	r2, r6, #5
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	4620      	mov	r0, r4
 8009320:	f000 fb5a 	bl	80099d8 <_calloc_r>
 8009324:	b160      	cbz	r0, 8009340 <_Balloc+0x64>
 8009326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800932a:	e00e      	b.n	800934a <_Balloc+0x6e>
 800932c:	2221      	movs	r2, #33	; 0x21
 800932e:	2104      	movs	r1, #4
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fb51 	bl	80099d8 <_calloc_r>
 8009336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009338:	60f0      	str	r0, [r6, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e4      	bne.n	800930a <_Balloc+0x2e>
 8009340:	2000      	movs	r0, #0
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	6802      	ldr	r2, [r0, #0]
 8009346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800934a:	2300      	movs	r3, #0
 800934c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009350:	e7f7      	b.n	8009342 <_Balloc+0x66>
 8009352:	bf00      	nop
 8009354:	0800a725 	.word	0x0800a725
 8009358:	0800a7ac 	.word	0x0800a7ac

0800935c <_Bfree>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b976      	cbnz	r6, 8009384 <_Bfree+0x28>
 8009366:	2010      	movs	r0, #16
 8009368:	f7ff ffa2 	bl	80092b0 <malloc>
 800936c:	4602      	mov	r2, r0
 800936e:	6268      	str	r0, [r5, #36]	; 0x24
 8009370:	b920      	cbnz	r0, 800937c <_Bfree+0x20>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <_Bfree+0x3c>)
 8009374:	4809      	ldr	r0, [pc, #36]	; (800939c <_Bfree+0x40>)
 8009376:	218a      	movs	r1, #138	; 0x8a
 8009378:	f000 fbf8 	bl	8009b6c <__assert_func>
 800937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009380:	6006      	str	r6, [r0, #0]
 8009382:	60c6      	str	r6, [r0, #12]
 8009384:	b13c      	cbz	r4, 8009396 <_Bfree+0x3a>
 8009386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009390:	6021      	str	r1, [r4, #0]
 8009392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	0800a725 	.word	0x0800a725
 800939c:	0800a7ac 	.word	0x0800a7ac

080093a0 <__multadd>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	690e      	ldr	r6, [r1, #16]
 80093a6:	4607      	mov	r7, r0
 80093a8:	4698      	mov	r8, r3
 80093aa:	460c      	mov	r4, r1
 80093ac:	f101 0014 	add.w	r0, r1, #20
 80093b0:	2300      	movs	r3, #0
 80093b2:	6805      	ldr	r5, [r0, #0]
 80093b4:	b2a9      	uxth	r1, r5
 80093b6:	fb02 8101 	mla	r1, r2, r1, r8
 80093ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80093be:	0c2d      	lsrs	r5, r5, #16
 80093c0:	fb02 c505 	mla	r5, r2, r5, ip
 80093c4:	b289      	uxth	r1, r1
 80093c6:	3301      	adds	r3, #1
 80093c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80093cc:	429e      	cmp	r6, r3
 80093ce:	f840 1b04 	str.w	r1, [r0], #4
 80093d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80093d6:	dcec      	bgt.n	80093b2 <__multadd+0x12>
 80093d8:	f1b8 0f00 	cmp.w	r8, #0
 80093dc:	d022      	beq.n	8009424 <__multadd+0x84>
 80093de:	68a3      	ldr	r3, [r4, #8]
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	dc19      	bgt.n	8009418 <__multadd+0x78>
 80093e4:	6861      	ldr	r1, [r4, #4]
 80093e6:	4638      	mov	r0, r7
 80093e8:	3101      	adds	r1, #1
 80093ea:	f7ff ff77 	bl	80092dc <_Balloc>
 80093ee:	4605      	mov	r5, r0
 80093f0:	b928      	cbnz	r0, 80093fe <__multadd+0x5e>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <__multadd+0x8c>)
 80093f6:	480e      	ldr	r0, [pc, #56]	; (8009430 <__multadd+0x90>)
 80093f8:	21b5      	movs	r1, #181	; 0xb5
 80093fa:	f000 fbb7 	bl	8009b6c <__assert_func>
 80093fe:	6922      	ldr	r2, [r4, #16]
 8009400:	3202      	adds	r2, #2
 8009402:	f104 010c 	add.w	r1, r4, #12
 8009406:	0092      	lsls	r2, r2, #2
 8009408:	300c      	adds	r0, #12
 800940a:	f7ff ff59 	bl	80092c0 <memcpy>
 800940e:	4621      	mov	r1, r4
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa3 	bl	800935c <_Bfree>
 8009416:	462c      	mov	r4, r5
 8009418:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800941c:	3601      	adds	r6, #1
 800941e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009422:	6126      	str	r6, [r4, #16]
 8009424:	4620      	mov	r0, r4
 8009426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942a:	bf00      	nop
 800942c:	0800a79b 	.word	0x0800a79b
 8009430:	0800a7ac 	.word	0x0800a7ac

08009434 <__hi0bits>:
 8009434:	0c03      	lsrs	r3, r0, #16
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	b9d3      	cbnz	r3, 8009470 <__hi0bits+0x3c>
 800943a:	0400      	lsls	r0, r0, #16
 800943c:	2310      	movs	r3, #16
 800943e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009442:	bf04      	itt	eq
 8009444:	0200      	lsleq	r0, r0, #8
 8009446:	3308      	addeq	r3, #8
 8009448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800944c:	bf04      	itt	eq
 800944e:	0100      	lsleq	r0, r0, #4
 8009450:	3304      	addeq	r3, #4
 8009452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009456:	bf04      	itt	eq
 8009458:	0080      	lsleq	r0, r0, #2
 800945a:	3302      	addeq	r3, #2
 800945c:	2800      	cmp	r0, #0
 800945e:	db05      	blt.n	800946c <__hi0bits+0x38>
 8009460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	bf08      	it	eq
 800946a:	2320      	moveq	r3, #32
 800946c:	4618      	mov	r0, r3
 800946e:	4770      	bx	lr
 8009470:	2300      	movs	r3, #0
 8009472:	e7e4      	b.n	800943e <__hi0bits+0xa>

08009474 <__lo0bits>:
 8009474:	6803      	ldr	r3, [r0, #0]
 8009476:	f013 0207 	ands.w	r2, r3, #7
 800947a:	4601      	mov	r1, r0
 800947c:	d00b      	beq.n	8009496 <__lo0bits+0x22>
 800947e:	07da      	lsls	r2, r3, #31
 8009480:	d424      	bmi.n	80094cc <__lo0bits+0x58>
 8009482:	0798      	lsls	r0, r3, #30
 8009484:	bf49      	itett	mi
 8009486:	085b      	lsrmi	r3, r3, #1
 8009488:	089b      	lsrpl	r3, r3, #2
 800948a:	2001      	movmi	r0, #1
 800948c:	600b      	strmi	r3, [r1, #0]
 800948e:	bf5c      	itt	pl
 8009490:	600b      	strpl	r3, [r1, #0]
 8009492:	2002      	movpl	r0, #2
 8009494:	4770      	bx	lr
 8009496:	b298      	uxth	r0, r3
 8009498:	b9b0      	cbnz	r0, 80094c8 <__lo0bits+0x54>
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	2010      	movs	r0, #16
 800949e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094a2:	bf04      	itt	eq
 80094a4:	0a1b      	lsreq	r3, r3, #8
 80094a6:	3008      	addeq	r0, #8
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	bf04      	itt	eq
 80094ac:	091b      	lsreq	r3, r3, #4
 80094ae:	3004      	addeq	r0, #4
 80094b0:	079a      	lsls	r2, r3, #30
 80094b2:	bf04      	itt	eq
 80094b4:	089b      	lsreq	r3, r3, #2
 80094b6:	3002      	addeq	r0, #2
 80094b8:	07da      	lsls	r2, r3, #31
 80094ba:	d403      	bmi.n	80094c4 <__lo0bits+0x50>
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	f100 0001 	add.w	r0, r0, #1
 80094c2:	d005      	beq.n	80094d0 <__lo0bits+0x5c>
 80094c4:	600b      	str	r3, [r1, #0]
 80094c6:	4770      	bx	lr
 80094c8:	4610      	mov	r0, r2
 80094ca:	e7e8      	b.n	800949e <__lo0bits+0x2a>
 80094cc:	2000      	movs	r0, #0
 80094ce:	4770      	bx	lr
 80094d0:	2020      	movs	r0, #32
 80094d2:	4770      	bx	lr

080094d4 <__i2b>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	460c      	mov	r4, r1
 80094d8:	2101      	movs	r1, #1
 80094da:	f7ff feff 	bl	80092dc <_Balloc>
 80094de:	4602      	mov	r2, r0
 80094e0:	b928      	cbnz	r0, 80094ee <__i2b+0x1a>
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <__i2b+0x24>)
 80094e4:	4805      	ldr	r0, [pc, #20]	; (80094fc <__i2b+0x28>)
 80094e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094ea:	f000 fb3f 	bl	8009b6c <__assert_func>
 80094ee:	2301      	movs	r3, #1
 80094f0:	6144      	str	r4, [r0, #20]
 80094f2:	6103      	str	r3, [r0, #16]
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	bf00      	nop
 80094f8:	0800a79b 	.word	0x0800a79b
 80094fc:	0800a7ac 	.word	0x0800a7ac

08009500 <__multiply>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	4614      	mov	r4, r2
 8009506:	690a      	ldr	r2, [r1, #16]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	429a      	cmp	r2, r3
 800950c:	bfb8      	it	lt
 800950e:	460b      	movlt	r3, r1
 8009510:	460d      	mov	r5, r1
 8009512:	bfbc      	itt	lt
 8009514:	4625      	movlt	r5, r4
 8009516:	461c      	movlt	r4, r3
 8009518:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800951c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009520:	68ab      	ldr	r3, [r5, #8]
 8009522:	6869      	ldr	r1, [r5, #4]
 8009524:	eb0a 0709 	add.w	r7, sl, r9
 8009528:	42bb      	cmp	r3, r7
 800952a:	b085      	sub	sp, #20
 800952c:	bfb8      	it	lt
 800952e:	3101      	addlt	r1, #1
 8009530:	f7ff fed4 	bl	80092dc <_Balloc>
 8009534:	b930      	cbnz	r0, 8009544 <__multiply+0x44>
 8009536:	4602      	mov	r2, r0
 8009538:	4b42      	ldr	r3, [pc, #264]	; (8009644 <__multiply+0x144>)
 800953a:	4843      	ldr	r0, [pc, #268]	; (8009648 <__multiply+0x148>)
 800953c:	f240 115d 	movw	r1, #349	; 0x15d
 8009540:	f000 fb14 	bl	8009b6c <__assert_func>
 8009544:	f100 0614 	add.w	r6, r0, #20
 8009548:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800954c:	4633      	mov	r3, r6
 800954e:	2200      	movs	r2, #0
 8009550:	4543      	cmp	r3, r8
 8009552:	d31e      	bcc.n	8009592 <__multiply+0x92>
 8009554:	f105 0c14 	add.w	ip, r5, #20
 8009558:	f104 0314 	add.w	r3, r4, #20
 800955c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009560:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009564:	9202      	str	r2, [sp, #8]
 8009566:	ebac 0205 	sub.w	r2, ip, r5
 800956a:	3a15      	subs	r2, #21
 800956c:	f022 0203 	bic.w	r2, r2, #3
 8009570:	3204      	adds	r2, #4
 8009572:	f105 0115 	add.w	r1, r5, #21
 8009576:	458c      	cmp	ip, r1
 8009578:	bf38      	it	cc
 800957a:	2204      	movcc	r2, #4
 800957c:	9201      	str	r2, [sp, #4]
 800957e:	9a02      	ldr	r2, [sp, #8]
 8009580:	9303      	str	r3, [sp, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d808      	bhi.n	8009598 <__multiply+0x98>
 8009586:	2f00      	cmp	r7, #0
 8009588:	dc55      	bgt.n	8009636 <__multiply+0x136>
 800958a:	6107      	str	r7, [r0, #16]
 800958c:	b005      	add	sp, #20
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009592:	f843 2b04 	str.w	r2, [r3], #4
 8009596:	e7db      	b.n	8009550 <__multiply+0x50>
 8009598:	f8b3 a000 	ldrh.w	sl, [r3]
 800959c:	f1ba 0f00 	cmp.w	sl, #0
 80095a0:	d020      	beq.n	80095e4 <__multiply+0xe4>
 80095a2:	f105 0e14 	add.w	lr, r5, #20
 80095a6:	46b1      	mov	r9, r6
 80095a8:	2200      	movs	r2, #0
 80095aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80095ae:	f8d9 b000 	ldr.w	fp, [r9]
 80095b2:	b2a1      	uxth	r1, r4
 80095b4:	fa1f fb8b 	uxth.w	fp, fp
 80095b8:	fb0a b101 	mla	r1, sl, r1, fp
 80095bc:	4411      	add	r1, r2
 80095be:	f8d9 2000 	ldr.w	r2, [r9]
 80095c2:	0c24      	lsrs	r4, r4, #16
 80095c4:	0c12      	lsrs	r2, r2, #16
 80095c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80095ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095ce:	b289      	uxth	r1, r1
 80095d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095d4:	45f4      	cmp	ip, lr
 80095d6:	f849 1b04 	str.w	r1, [r9], #4
 80095da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095de:	d8e4      	bhi.n	80095aa <__multiply+0xaa>
 80095e0:	9901      	ldr	r1, [sp, #4]
 80095e2:	5072      	str	r2, [r6, r1]
 80095e4:	9a03      	ldr	r2, [sp, #12]
 80095e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095ea:	3304      	adds	r3, #4
 80095ec:	f1b9 0f00 	cmp.w	r9, #0
 80095f0:	d01f      	beq.n	8009632 <__multiply+0x132>
 80095f2:	6834      	ldr	r4, [r6, #0]
 80095f4:	f105 0114 	add.w	r1, r5, #20
 80095f8:	46b6      	mov	lr, r6
 80095fa:	f04f 0a00 	mov.w	sl, #0
 80095fe:	880a      	ldrh	r2, [r1, #0]
 8009600:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009604:	fb09 b202 	mla	r2, r9, r2, fp
 8009608:	4492      	add	sl, r2
 800960a:	b2a4      	uxth	r4, r4
 800960c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009610:	f84e 4b04 	str.w	r4, [lr], #4
 8009614:	f851 4b04 	ldr.w	r4, [r1], #4
 8009618:	f8be 2000 	ldrh.w	r2, [lr]
 800961c:	0c24      	lsrs	r4, r4, #16
 800961e:	fb09 2404 	mla	r4, r9, r4, r2
 8009622:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009626:	458c      	cmp	ip, r1
 8009628:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800962c:	d8e7      	bhi.n	80095fe <__multiply+0xfe>
 800962e:	9a01      	ldr	r2, [sp, #4]
 8009630:	50b4      	str	r4, [r6, r2]
 8009632:	3604      	adds	r6, #4
 8009634:	e7a3      	b.n	800957e <__multiply+0x7e>
 8009636:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1a5      	bne.n	800958a <__multiply+0x8a>
 800963e:	3f01      	subs	r7, #1
 8009640:	e7a1      	b.n	8009586 <__multiply+0x86>
 8009642:	bf00      	nop
 8009644:	0800a79b 	.word	0x0800a79b
 8009648:	0800a7ac 	.word	0x0800a7ac

0800964c <__pow5mult>:
 800964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009650:	4615      	mov	r5, r2
 8009652:	f012 0203 	ands.w	r2, r2, #3
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	d007      	beq.n	800966c <__pow5mult+0x20>
 800965c:	4c25      	ldr	r4, [pc, #148]	; (80096f4 <__pow5mult+0xa8>)
 800965e:	3a01      	subs	r2, #1
 8009660:	2300      	movs	r3, #0
 8009662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009666:	f7ff fe9b 	bl	80093a0 <__multadd>
 800966a:	4607      	mov	r7, r0
 800966c:	10ad      	asrs	r5, r5, #2
 800966e:	d03d      	beq.n	80096ec <__pow5mult+0xa0>
 8009670:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009672:	b97c      	cbnz	r4, 8009694 <__pow5mult+0x48>
 8009674:	2010      	movs	r0, #16
 8009676:	f7ff fe1b 	bl	80092b0 <malloc>
 800967a:	4602      	mov	r2, r0
 800967c:	6270      	str	r0, [r6, #36]	; 0x24
 800967e:	b928      	cbnz	r0, 800968c <__pow5mult+0x40>
 8009680:	4b1d      	ldr	r3, [pc, #116]	; (80096f8 <__pow5mult+0xac>)
 8009682:	481e      	ldr	r0, [pc, #120]	; (80096fc <__pow5mult+0xb0>)
 8009684:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009688:	f000 fa70 	bl	8009b6c <__assert_func>
 800968c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009690:	6004      	str	r4, [r0, #0]
 8009692:	60c4      	str	r4, [r0, #12]
 8009694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800969c:	b94c      	cbnz	r4, 80096b2 <__pow5mult+0x66>
 800969e:	f240 2171 	movw	r1, #625	; 0x271
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ff16 	bl	80094d4 <__i2b>
 80096a8:	2300      	movs	r3, #0
 80096aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ae:	4604      	mov	r4, r0
 80096b0:	6003      	str	r3, [r0, #0]
 80096b2:	f04f 0900 	mov.w	r9, #0
 80096b6:	07eb      	lsls	r3, r5, #31
 80096b8:	d50a      	bpl.n	80096d0 <__pow5mult+0x84>
 80096ba:	4639      	mov	r1, r7
 80096bc:	4622      	mov	r2, r4
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ff1e 	bl	8009500 <__multiply>
 80096c4:	4639      	mov	r1, r7
 80096c6:	4680      	mov	r8, r0
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7ff fe47 	bl	800935c <_Bfree>
 80096ce:	4647      	mov	r7, r8
 80096d0:	106d      	asrs	r5, r5, #1
 80096d2:	d00b      	beq.n	80096ec <__pow5mult+0xa0>
 80096d4:	6820      	ldr	r0, [r4, #0]
 80096d6:	b938      	cbnz	r0, 80096e8 <__pow5mult+0x9c>
 80096d8:	4622      	mov	r2, r4
 80096da:	4621      	mov	r1, r4
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff ff0f 	bl	8009500 <__multiply>
 80096e2:	6020      	str	r0, [r4, #0]
 80096e4:	f8c0 9000 	str.w	r9, [r0]
 80096e8:	4604      	mov	r4, r0
 80096ea:	e7e4      	b.n	80096b6 <__pow5mult+0x6a>
 80096ec:	4638      	mov	r0, r7
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	bf00      	nop
 80096f4:	0800a900 	.word	0x0800a900
 80096f8:	0800a725 	.word	0x0800a725
 80096fc:	0800a7ac 	.word	0x0800a7ac

08009700 <__lshift>:
 8009700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009704:	460c      	mov	r4, r1
 8009706:	6849      	ldr	r1, [r1, #4]
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	4607      	mov	r7, r0
 8009712:	4691      	mov	r9, r2
 8009714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009718:	f108 0601 	add.w	r6, r8, #1
 800971c:	42b3      	cmp	r3, r6
 800971e:	db0b      	blt.n	8009738 <__lshift+0x38>
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff fddb 	bl	80092dc <_Balloc>
 8009726:	4605      	mov	r5, r0
 8009728:	b948      	cbnz	r0, 800973e <__lshift+0x3e>
 800972a:	4602      	mov	r2, r0
 800972c:	4b28      	ldr	r3, [pc, #160]	; (80097d0 <__lshift+0xd0>)
 800972e:	4829      	ldr	r0, [pc, #164]	; (80097d4 <__lshift+0xd4>)
 8009730:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009734:	f000 fa1a 	bl	8009b6c <__assert_func>
 8009738:	3101      	adds	r1, #1
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	e7ee      	b.n	800971c <__lshift+0x1c>
 800973e:	2300      	movs	r3, #0
 8009740:	f100 0114 	add.w	r1, r0, #20
 8009744:	f100 0210 	add.w	r2, r0, #16
 8009748:	4618      	mov	r0, r3
 800974a:	4553      	cmp	r3, sl
 800974c:	db33      	blt.n	80097b6 <__lshift+0xb6>
 800974e:	6920      	ldr	r0, [r4, #16]
 8009750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009754:	f104 0314 	add.w	r3, r4, #20
 8009758:	f019 091f 	ands.w	r9, r9, #31
 800975c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009764:	d02b      	beq.n	80097be <__lshift+0xbe>
 8009766:	f1c9 0e20 	rsb	lr, r9, #32
 800976a:	468a      	mov	sl, r1
 800976c:	2200      	movs	r2, #0
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	fa00 f009 	lsl.w	r0, r0, r9
 8009774:	4302      	orrs	r2, r0
 8009776:	f84a 2b04 	str.w	r2, [sl], #4
 800977a:	f853 2b04 	ldr.w	r2, [r3], #4
 800977e:	459c      	cmp	ip, r3
 8009780:	fa22 f20e 	lsr.w	r2, r2, lr
 8009784:	d8f3      	bhi.n	800976e <__lshift+0x6e>
 8009786:	ebac 0304 	sub.w	r3, ip, r4
 800978a:	3b15      	subs	r3, #21
 800978c:	f023 0303 	bic.w	r3, r3, #3
 8009790:	3304      	adds	r3, #4
 8009792:	f104 0015 	add.w	r0, r4, #21
 8009796:	4584      	cmp	ip, r0
 8009798:	bf38      	it	cc
 800979a:	2304      	movcc	r3, #4
 800979c:	50ca      	str	r2, [r1, r3]
 800979e:	b10a      	cbz	r2, 80097a4 <__lshift+0xa4>
 80097a0:	f108 0602 	add.w	r6, r8, #2
 80097a4:	3e01      	subs	r6, #1
 80097a6:	4638      	mov	r0, r7
 80097a8:	612e      	str	r6, [r5, #16]
 80097aa:	4621      	mov	r1, r4
 80097ac:	f7ff fdd6 	bl	800935c <_Bfree>
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097ba:	3301      	adds	r3, #1
 80097bc:	e7c5      	b.n	800974a <__lshift+0x4a>
 80097be:	3904      	subs	r1, #4
 80097c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097c8:	459c      	cmp	ip, r3
 80097ca:	d8f9      	bhi.n	80097c0 <__lshift+0xc0>
 80097cc:	e7ea      	b.n	80097a4 <__lshift+0xa4>
 80097ce:	bf00      	nop
 80097d0:	0800a79b 	.word	0x0800a79b
 80097d4:	0800a7ac 	.word	0x0800a7ac

080097d8 <__mcmp>:
 80097d8:	b530      	push	{r4, r5, lr}
 80097da:	6902      	ldr	r2, [r0, #16]
 80097dc:	690c      	ldr	r4, [r1, #16]
 80097de:	1b12      	subs	r2, r2, r4
 80097e0:	d10e      	bne.n	8009800 <__mcmp+0x28>
 80097e2:	f100 0314 	add.w	r3, r0, #20
 80097e6:	3114      	adds	r1, #20
 80097e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097f8:	42a5      	cmp	r5, r4
 80097fa:	d003      	beq.n	8009804 <__mcmp+0x2c>
 80097fc:	d305      	bcc.n	800980a <__mcmp+0x32>
 80097fe:	2201      	movs	r2, #1
 8009800:	4610      	mov	r0, r2
 8009802:	bd30      	pop	{r4, r5, pc}
 8009804:	4283      	cmp	r3, r0
 8009806:	d3f3      	bcc.n	80097f0 <__mcmp+0x18>
 8009808:	e7fa      	b.n	8009800 <__mcmp+0x28>
 800980a:	f04f 32ff 	mov.w	r2, #4294967295
 800980e:	e7f7      	b.n	8009800 <__mcmp+0x28>

08009810 <__mdiff>:
 8009810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	460c      	mov	r4, r1
 8009816:	4606      	mov	r6, r0
 8009818:	4611      	mov	r1, r2
 800981a:	4620      	mov	r0, r4
 800981c:	4617      	mov	r7, r2
 800981e:	f7ff ffdb 	bl	80097d8 <__mcmp>
 8009822:	1e05      	subs	r5, r0, #0
 8009824:	d110      	bne.n	8009848 <__mdiff+0x38>
 8009826:	4629      	mov	r1, r5
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff fd57 	bl	80092dc <_Balloc>
 800982e:	b930      	cbnz	r0, 800983e <__mdiff+0x2e>
 8009830:	4b39      	ldr	r3, [pc, #228]	; (8009918 <__mdiff+0x108>)
 8009832:	4602      	mov	r2, r0
 8009834:	f240 2132 	movw	r1, #562	; 0x232
 8009838:	4838      	ldr	r0, [pc, #224]	; (800991c <__mdiff+0x10c>)
 800983a:	f000 f997 	bl	8009b6c <__assert_func>
 800983e:	2301      	movs	r3, #1
 8009840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009848:	bfa4      	itt	ge
 800984a:	463b      	movge	r3, r7
 800984c:	4627      	movge	r7, r4
 800984e:	4630      	mov	r0, r6
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	bfa6      	itte	ge
 8009854:	461c      	movge	r4, r3
 8009856:	2500      	movge	r5, #0
 8009858:	2501      	movlt	r5, #1
 800985a:	f7ff fd3f 	bl	80092dc <_Balloc>
 800985e:	b920      	cbnz	r0, 800986a <__mdiff+0x5a>
 8009860:	4b2d      	ldr	r3, [pc, #180]	; (8009918 <__mdiff+0x108>)
 8009862:	4602      	mov	r2, r0
 8009864:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009868:	e7e6      	b.n	8009838 <__mdiff+0x28>
 800986a:	693e      	ldr	r6, [r7, #16]
 800986c:	60c5      	str	r5, [r0, #12]
 800986e:	6925      	ldr	r5, [r4, #16]
 8009870:	f107 0114 	add.w	r1, r7, #20
 8009874:	f104 0914 	add.w	r9, r4, #20
 8009878:	f100 0e14 	add.w	lr, r0, #20
 800987c:	f107 0210 	add.w	r2, r7, #16
 8009880:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009884:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009888:	46f2      	mov	sl, lr
 800988a:	2700      	movs	r7, #0
 800988c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009890:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009894:	fa1f f883 	uxth.w	r8, r3
 8009898:	fa17 f78b 	uxtah	r7, r7, fp
 800989c:	0c1b      	lsrs	r3, r3, #16
 800989e:	eba7 0808 	sub.w	r8, r7, r8
 80098a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098aa:	fa1f f888 	uxth.w	r8, r8
 80098ae:	141f      	asrs	r7, r3, #16
 80098b0:	454d      	cmp	r5, r9
 80098b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098b6:	f84a 3b04 	str.w	r3, [sl], #4
 80098ba:	d8e7      	bhi.n	800988c <__mdiff+0x7c>
 80098bc:	1b2b      	subs	r3, r5, r4
 80098be:	3b15      	subs	r3, #21
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	3304      	adds	r3, #4
 80098c6:	3415      	adds	r4, #21
 80098c8:	42a5      	cmp	r5, r4
 80098ca:	bf38      	it	cc
 80098cc:	2304      	movcc	r3, #4
 80098ce:	4419      	add	r1, r3
 80098d0:	4473      	add	r3, lr
 80098d2:	469e      	mov	lr, r3
 80098d4:	460d      	mov	r5, r1
 80098d6:	4565      	cmp	r5, ip
 80098d8:	d30e      	bcc.n	80098f8 <__mdiff+0xe8>
 80098da:	f10c 0203 	add.w	r2, ip, #3
 80098de:	1a52      	subs	r2, r2, r1
 80098e0:	f022 0203 	bic.w	r2, r2, #3
 80098e4:	3903      	subs	r1, #3
 80098e6:	458c      	cmp	ip, r1
 80098e8:	bf38      	it	cc
 80098ea:	2200      	movcc	r2, #0
 80098ec:	441a      	add	r2, r3
 80098ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098f2:	b17b      	cbz	r3, 8009914 <__mdiff+0x104>
 80098f4:	6106      	str	r6, [r0, #16]
 80098f6:	e7a5      	b.n	8009844 <__mdiff+0x34>
 80098f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80098fc:	fa17 f488 	uxtah	r4, r7, r8
 8009900:	1422      	asrs	r2, r4, #16
 8009902:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009906:	b2a4      	uxth	r4, r4
 8009908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800990c:	f84e 4b04 	str.w	r4, [lr], #4
 8009910:	1417      	asrs	r7, r2, #16
 8009912:	e7e0      	b.n	80098d6 <__mdiff+0xc6>
 8009914:	3e01      	subs	r6, #1
 8009916:	e7ea      	b.n	80098ee <__mdiff+0xde>
 8009918:	0800a79b 	.word	0x0800a79b
 800991c:	0800a7ac 	.word	0x0800a7ac

08009920 <__d2b>:
 8009920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009924:	4689      	mov	r9, r1
 8009926:	2101      	movs	r1, #1
 8009928:	ec57 6b10 	vmov	r6, r7, d0
 800992c:	4690      	mov	r8, r2
 800992e:	f7ff fcd5 	bl	80092dc <_Balloc>
 8009932:	4604      	mov	r4, r0
 8009934:	b930      	cbnz	r0, 8009944 <__d2b+0x24>
 8009936:	4602      	mov	r2, r0
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <__d2b+0xb0>)
 800993a:	4826      	ldr	r0, [pc, #152]	; (80099d4 <__d2b+0xb4>)
 800993c:	f240 310a 	movw	r1, #778	; 0x30a
 8009940:	f000 f914 	bl	8009b6c <__assert_func>
 8009944:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800994c:	bb35      	cbnz	r5, 800999c <__d2b+0x7c>
 800994e:	2e00      	cmp	r6, #0
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	d028      	beq.n	80099a6 <__d2b+0x86>
 8009954:	4668      	mov	r0, sp
 8009956:	9600      	str	r6, [sp, #0]
 8009958:	f7ff fd8c 	bl	8009474 <__lo0bits>
 800995c:	9900      	ldr	r1, [sp, #0]
 800995e:	b300      	cbz	r0, 80099a2 <__d2b+0x82>
 8009960:	9a01      	ldr	r2, [sp, #4]
 8009962:	f1c0 0320 	rsb	r3, r0, #32
 8009966:	fa02 f303 	lsl.w	r3, r2, r3
 800996a:	430b      	orrs	r3, r1
 800996c:	40c2      	lsrs	r2, r0
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	9201      	str	r2, [sp, #4]
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	61a3      	str	r3, [r4, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	bf14      	ite	ne
 800997a:	2202      	movne	r2, #2
 800997c:	2201      	moveq	r2, #1
 800997e:	6122      	str	r2, [r4, #16]
 8009980:	b1d5      	cbz	r5, 80099b8 <__d2b+0x98>
 8009982:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009986:	4405      	add	r5, r0
 8009988:	f8c9 5000 	str.w	r5, [r9]
 800998c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009990:	f8c8 0000 	str.w	r0, [r8]
 8009994:	4620      	mov	r0, r4
 8009996:	b003      	add	sp, #12
 8009998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800999c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099a0:	e7d5      	b.n	800994e <__d2b+0x2e>
 80099a2:	6161      	str	r1, [r4, #20]
 80099a4:	e7e5      	b.n	8009972 <__d2b+0x52>
 80099a6:	a801      	add	r0, sp, #4
 80099a8:	f7ff fd64 	bl	8009474 <__lo0bits>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	6163      	str	r3, [r4, #20]
 80099b0:	2201      	movs	r2, #1
 80099b2:	6122      	str	r2, [r4, #16]
 80099b4:	3020      	adds	r0, #32
 80099b6:	e7e3      	b.n	8009980 <__d2b+0x60>
 80099b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099c0:	f8c9 0000 	str.w	r0, [r9]
 80099c4:	6918      	ldr	r0, [r3, #16]
 80099c6:	f7ff fd35 	bl	8009434 <__hi0bits>
 80099ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099ce:	e7df      	b.n	8009990 <__d2b+0x70>
 80099d0:	0800a79b 	.word	0x0800a79b
 80099d4:	0800a7ac 	.word	0x0800a7ac

080099d8 <_calloc_r>:
 80099d8:	b513      	push	{r0, r1, r4, lr}
 80099da:	434a      	muls	r2, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	9201      	str	r2, [sp, #4]
 80099e0:	f000 f85a 	bl	8009a98 <_malloc_r>
 80099e4:	4604      	mov	r4, r0
 80099e6:	b118      	cbz	r0, 80099f0 <_calloc_r+0x18>
 80099e8:	9a01      	ldr	r2, [sp, #4]
 80099ea:	2100      	movs	r1, #0
 80099ec:	f7fe f972 	bl	8007cd4 <memset>
 80099f0:	4620      	mov	r0, r4
 80099f2:	b002      	add	sp, #8
 80099f4:	bd10      	pop	{r4, pc}
	...

080099f8 <_free_r>:
 80099f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fa:	2900      	cmp	r1, #0
 80099fc:	d048      	beq.n	8009a90 <_free_r+0x98>
 80099fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f1a1 0404 	sub.w	r4, r1, #4
 8009a0a:	bfb8      	it	lt
 8009a0c:	18e4      	addlt	r4, r4, r3
 8009a0e:	f000 f8ef 	bl	8009bf0 <__malloc_lock>
 8009a12:	4a20      	ldr	r2, [pc, #128]	; (8009a94 <_free_r+0x9c>)
 8009a14:	9801      	ldr	r0, [sp, #4]
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	4615      	mov	r5, r2
 8009a1a:	b933      	cbnz	r3, 8009a2a <_free_r+0x32>
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	6014      	str	r4, [r2, #0]
 8009a20:	b003      	add	sp, #12
 8009a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a26:	f000 b8e9 	b.w	8009bfc <__malloc_unlock>
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	d90b      	bls.n	8009a46 <_free_r+0x4e>
 8009a2e:	6821      	ldr	r1, [r4, #0]
 8009a30:	1862      	adds	r2, r4, r1
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bf04      	itt	eq
 8009a36:	681a      	ldreq	r2, [r3, #0]
 8009a38:	685b      	ldreq	r3, [r3, #4]
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	bf04      	itt	eq
 8009a3e:	1852      	addeq	r2, r2, r1
 8009a40:	6022      	streq	r2, [r4, #0]
 8009a42:	602c      	str	r4, [r5, #0]
 8009a44:	e7ec      	b.n	8009a20 <_free_r+0x28>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x58>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x4e>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1855      	adds	r5, r2, r1
 8009a54:	42a5      	cmp	r5, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x78>
 8009a58:	6824      	ldr	r4, [r4, #0]
 8009a5a:	4421      	add	r1, r4
 8009a5c:	1854      	adds	r4, r2, r1
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1dd      	bne.n	8009a20 <_free_r+0x28>
 8009a64:	681c      	ldr	r4, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	6053      	str	r3, [r2, #4]
 8009a6a:	4421      	add	r1, r4
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	e7d7      	b.n	8009a20 <_free_r+0x28>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x80>
 8009a72:	230c      	movs	r3, #12
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	e7d3      	b.n	8009a20 <_free_r+0x28>
 8009a78:	6825      	ldr	r5, [r4, #0]
 8009a7a:	1961      	adds	r1, r4, r5
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf04      	itt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	bf04      	itt	eq
 8009a88:	1949      	addeq	r1, r1, r5
 8009a8a:	6021      	streq	r1, [r4, #0]
 8009a8c:	6054      	str	r4, [r2, #4]
 8009a8e:	e7c7      	b.n	8009a20 <_free_r+0x28>
 8009a90:	b003      	add	sp, #12
 8009a92:	bd30      	pop	{r4, r5, pc}
 8009a94:	20000e0c 	.word	0x20000e0c

08009a98 <_malloc_r>:
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	1ccd      	adds	r5, r1, #3
 8009a9c:	f025 0503 	bic.w	r5, r5, #3
 8009aa0:	3508      	adds	r5, #8
 8009aa2:	2d0c      	cmp	r5, #12
 8009aa4:	bf38      	it	cc
 8009aa6:	250c      	movcc	r5, #12
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	4606      	mov	r6, r0
 8009aac:	db01      	blt.n	8009ab2 <_malloc_r+0x1a>
 8009aae:	42a9      	cmp	r1, r5
 8009ab0:	d903      	bls.n	8009aba <_malloc_r+0x22>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aba:	f000 f899 	bl	8009bf0 <__malloc_lock>
 8009abe:	4921      	ldr	r1, [pc, #132]	; (8009b44 <_malloc_r+0xac>)
 8009ac0:	680a      	ldr	r2, [r1, #0]
 8009ac2:	4614      	mov	r4, r2
 8009ac4:	b99c      	cbnz	r4, 8009aee <_malloc_r+0x56>
 8009ac6:	4f20      	ldr	r7, [pc, #128]	; (8009b48 <_malloc_r+0xb0>)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	b923      	cbnz	r3, 8009ad6 <_malloc_r+0x3e>
 8009acc:	4621      	mov	r1, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 f83c 	bl	8009b4c <_sbrk_r>
 8009ad4:	6038      	str	r0, [r7, #0]
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f837 	bl	8009b4c <_sbrk_r>
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	d123      	bne.n	8009b2a <_malloc_r+0x92>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	6033      	str	r3, [r6, #0]
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f888 	bl	8009bfc <__malloc_unlock>
 8009aec:	e7e3      	b.n	8009ab6 <_malloc_r+0x1e>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	1b5b      	subs	r3, r3, r5
 8009af2:	d417      	bmi.n	8009b24 <_malloc_r+0x8c>
 8009af4:	2b0b      	cmp	r3, #11
 8009af6:	d903      	bls.n	8009b00 <_malloc_r+0x68>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	441c      	add	r4, r3
 8009afc:	6025      	str	r5, [r4, #0]
 8009afe:	e004      	b.n	8009b0a <_malloc_r+0x72>
 8009b00:	6863      	ldr	r3, [r4, #4]
 8009b02:	42a2      	cmp	r2, r4
 8009b04:	bf0c      	ite	eq
 8009b06:	600b      	streq	r3, [r1, #0]
 8009b08:	6053      	strne	r3, [r2, #4]
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 f876 	bl	8009bfc <__malloc_unlock>
 8009b10:	f104 000b 	add.w	r0, r4, #11
 8009b14:	1d23      	adds	r3, r4, #4
 8009b16:	f020 0007 	bic.w	r0, r0, #7
 8009b1a:	1ac2      	subs	r2, r0, r3
 8009b1c:	d0cc      	beq.n	8009ab8 <_malloc_r+0x20>
 8009b1e:	1a1b      	subs	r3, r3, r0
 8009b20:	50a3      	str	r3, [r4, r2]
 8009b22:	e7c9      	b.n	8009ab8 <_malloc_r+0x20>
 8009b24:	4622      	mov	r2, r4
 8009b26:	6864      	ldr	r4, [r4, #4]
 8009b28:	e7cc      	b.n	8009ac4 <_malloc_r+0x2c>
 8009b2a:	1cc4      	adds	r4, r0, #3
 8009b2c:	f024 0403 	bic.w	r4, r4, #3
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d0e3      	beq.n	8009afc <_malloc_r+0x64>
 8009b34:	1a21      	subs	r1, r4, r0
 8009b36:	4630      	mov	r0, r6
 8009b38:	f000 f808 	bl	8009b4c <_sbrk_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d1dd      	bne.n	8009afc <_malloc_r+0x64>
 8009b40:	e7cf      	b.n	8009ae2 <_malloc_r+0x4a>
 8009b42:	bf00      	nop
 8009b44:	20000e0c 	.word	0x20000e0c
 8009b48:	20000e10 	.word	0x20000e10

08009b4c <_sbrk_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d06      	ldr	r5, [pc, #24]	; (8009b68 <_sbrk_r+0x1c>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	f7f8 ffd2 	bl	8002b00 <_sbrk>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_sbrk_r+0x1a>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_sbrk_r+0x1a>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	200011e8 	.word	0x200011e8

08009b6c <__assert_func>:
 8009b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b6e:	4614      	mov	r4, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <__assert_func+0x2c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4605      	mov	r5, r0
 8009b78:	68d8      	ldr	r0, [r3, #12]
 8009b7a:	b14c      	cbz	r4, 8009b90 <__assert_func+0x24>
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <__assert_func+0x30>)
 8009b7e:	9100      	str	r1, [sp, #0]
 8009b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b84:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <__assert_func+0x34>)
 8009b86:	462b      	mov	r3, r5
 8009b88:	f000 f80e 	bl	8009ba8 <fiprintf>
 8009b8c:	f000 fa64 	bl	800a058 <abort>
 8009b90:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <__assert_func+0x38>)
 8009b92:	461c      	mov	r4, r3
 8009b94:	e7f3      	b.n	8009b7e <__assert_func+0x12>
 8009b96:	bf00      	nop
 8009b98:	20000010 	.word	0x20000010
 8009b9c:	0800a90c 	.word	0x0800a90c
 8009ba0:	0800a919 	.word	0x0800a919
 8009ba4:	0800a947 	.word	0x0800a947

08009ba8 <fiprintf>:
 8009ba8:	b40e      	push	{r1, r2, r3}
 8009baa:	b503      	push	{r0, r1, lr}
 8009bac:	4601      	mov	r1, r0
 8009bae:	ab03      	add	r3, sp, #12
 8009bb0:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <fiprintf+0x20>)
 8009bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb6:	6800      	ldr	r0, [r0, #0]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	f000 f84f 	bl	8009c5c <_vfiprintf_r>
 8009bbe:	b002      	add	sp, #8
 8009bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc4:	b003      	add	sp, #12
 8009bc6:	4770      	bx	lr
 8009bc8:	20000010 	.word	0x20000010

08009bcc <__ascii_mbtowc>:
 8009bcc:	b082      	sub	sp, #8
 8009bce:	b901      	cbnz	r1, 8009bd2 <__ascii_mbtowc+0x6>
 8009bd0:	a901      	add	r1, sp, #4
 8009bd2:	b142      	cbz	r2, 8009be6 <__ascii_mbtowc+0x1a>
 8009bd4:	b14b      	cbz	r3, 8009bea <__ascii_mbtowc+0x1e>
 8009bd6:	7813      	ldrb	r3, [r2, #0]
 8009bd8:	600b      	str	r3, [r1, #0]
 8009bda:	7812      	ldrb	r2, [r2, #0]
 8009bdc:	1e10      	subs	r0, r2, #0
 8009bde:	bf18      	it	ne
 8009be0:	2001      	movne	r0, #1
 8009be2:	b002      	add	sp, #8
 8009be4:	4770      	bx	lr
 8009be6:	4610      	mov	r0, r2
 8009be8:	e7fb      	b.n	8009be2 <__ascii_mbtowc+0x16>
 8009bea:	f06f 0001 	mvn.w	r0, #1
 8009bee:	e7f8      	b.n	8009be2 <__ascii_mbtowc+0x16>

08009bf0 <__malloc_lock>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__malloc_lock+0x8>)
 8009bf2:	f000 bbf1 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	200011f0 	.word	0x200011f0

08009bfc <__malloc_unlock>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__malloc_unlock+0x8>)
 8009bfe:	f000 bbec 	b.w	800a3da <__retarget_lock_release_recursive>
 8009c02:	bf00      	nop
 8009c04:	200011f0 	.word	0x200011f0

08009c08 <__sfputc_r>:
 8009c08:	6893      	ldr	r3, [r2, #8]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	b410      	push	{r4}
 8009c10:	6093      	str	r3, [r2, #8]
 8009c12:	da08      	bge.n	8009c26 <__sfputc_r+0x1e>
 8009c14:	6994      	ldr	r4, [r2, #24]
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	db01      	blt.n	8009c1e <__sfputc_r+0x16>
 8009c1a:	290a      	cmp	r1, #10
 8009c1c:	d103      	bne.n	8009c26 <__sfputc_r+0x1e>
 8009c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c22:	f000 b94b 	b.w	8009ebc <__swbuf_r>
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	1c58      	adds	r0, r3, #1
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	7019      	strb	r1, [r3, #0]
 8009c2e:	4608      	mov	r0, r1
 8009c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <__sfputs_r>:
 8009c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c38:	4606      	mov	r6, r0
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	18d5      	adds	r5, r2, r3
 8009c40:	42ac      	cmp	r4, r5
 8009c42:	d101      	bne.n	8009c48 <__sfputs_r+0x12>
 8009c44:	2000      	movs	r0, #0
 8009c46:	e007      	b.n	8009c58 <__sfputs_r+0x22>
 8009c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7ff ffda 	bl	8009c08 <__sfputc_r>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d1f3      	bne.n	8009c40 <__sfputs_r+0xa>
 8009c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c5c <_vfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	460d      	mov	r5, r1
 8009c62:	b09d      	sub	sp, #116	; 0x74
 8009c64:	4614      	mov	r4, r2
 8009c66:	4698      	mov	r8, r3
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b118      	cbz	r0, 8009c74 <_vfiprintf_r+0x18>
 8009c6c:	6983      	ldr	r3, [r0, #24]
 8009c6e:	b90b      	cbnz	r3, 8009c74 <_vfiprintf_r+0x18>
 8009c70:	f000 fb14 	bl	800a29c <__sinit>
 8009c74:	4b89      	ldr	r3, [pc, #548]	; (8009e9c <_vfiprintf_r+0x240>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	d11b      	bne.n	8009cb2 <_vfiprintf_r+0x56>
 8009c7a:	6875      	ldr	r5, [r6, #4]
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f000 fba5 	bl	800a3d8 <__retarget_lock_acquire_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	071b      	lsls	r3, r3, #28
 8009c92:	d501      	bpl.n	8009c98 <_vfiprintf_r+0x3c>
 8009c94:	692b      	ldr	r3, [r5, #16]
 8009c96:	b9eb      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x78>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f000 f96e 	bl	8009f7c <__swsetup_r>
 8009ca0:	b1c0      	cbz	r0, 8009cd4 <_vfiprintf_r+0x78>
 8009ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca4:	07dc      	lsls	r4, r3, #31
 8009ca6:	d50e      	bpl.n	8009cc6 <_vfiprintf_r+0x6a>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b01d      	add	sp, #116	; 0x74
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <_vfiprintf_r+0x244>)
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d101      	bne.n	8009cbc <_vfiprintf_r+0x60>
 8009cb8:	68b5      	ldr	r5, [r6, #8]
 8009cba:	e7df      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <_vfiprintf_r+0x248>)
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf08      	it	eq
 8009cc2:	68f5      	ldreq	r5, [r6, #12]
 8009cc4:	e7da      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	0598      	lsls	r0, r3, #22
 8009cca:	d4ed      	bmi.n	8009ca8 <_vfiprintf_r+0x4c>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cce:	f000 fb84 	bl	800a3da <__retarget_lock_release_recursive>
 8009cd2:	e7e9      	b.n	8009ca8 <_vfiprintf_r+0x4c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ea8 <_vfiprintf_r+0x24c>
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_vfiprintf_r+0xa2>
 8009cfa:	2a25      	cmp	r2, #37	; 0x25
 8009cfc:	d1f9      	bne.n	8009cf2 <_vfiprintf_r+0x96>
 8009cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009d02:	d00b      	beq.n	8009d1c <_vfiprintf_r+0xc0>
 8009d04:	465b      	mov	r3, fp
 8009d06:	4622      	mov	r2, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ff93 	bl	8009c36 <__sfputs_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f000 80aa 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d18:	445a      	add	r2, fp
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80a2 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	f10a 0a01 	add.w	sl, sl, #1
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2205      	movs	r2, #5
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4858      	ldr	r0, [pc, #352]	; (8009ea8 <_vfiprintf_r+0x24c>)
 8009d48:	f7f6 fa72 	bl	8000230 <memchr>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	b9d8      	cbnz	r0, 8009d88 <_vfiprintf_r+0x12c>
 8009d50:	06d1      	lsls	r1, r2, #27
 8009d52:	bf44      	itt	mi
 8009d54:	2320      	movmi	r3, #32
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	0713      	lsls	r3, r2, #28
 8009d5c:	bf44      	itt	mi
 8009d5e:	232b      	movmi	r3, #43	; 0x2b
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	d015      	beq.n	8009d98 <_vfiprintf_r+0x13c>
 8009d6c:	9a07      	ldr	r2, [sp, #28]
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2000      	movs	r0, #0
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4621      	mov	r1, r4
 8009d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7c:	3b30      	subs	r3, #48	; 0x30
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d94e      	bls.n	8009e20 <_vfiprintf_r+0x1c4>
 8009d82:	b1b0      	cbz	r0, 8009db2 <_vfiprintf_r+0x156>
 8009d84:	9207      	str	r2, [sp, #28]
 8009d86:	e014      	b.n	8009db2 <_vfiprintf_r+0x156>
 8009d88:	eba0 0308 	sub.w	r3, r0, r8
 8009d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	46a2      	mov	sl, r4
 8009d96:	e7d2      	b.n	8009d3e <_vfiprintf_r+0xe2>
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbb      	ittet	lt
 8009da4:	425b      	neglt	r3, r3
 8009da6:	f042 0202 	orrlt.w	r2, r2, #2
 8009daa:	9307      	strge	r3, [sp, #28]
 8009dac:	9307      	strlt	r3, [sp, #28]
 8009dae:	bfb8      	it	lt
 8009db0:	9204      	strlt	r2, [sp, #16]
 8009db2:	7823      	ldrb	r3, [r4, #0]
 8009db4:	2b2e      	cmp	r3, #46	; 0x2e
 8009db6:	d10c      	bne.n	8009dd2 <_vfiprintf_r+0x176>
 8009db8:	7863      	ldrb	r3, [r4, #1]
 8009dba:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbc:	d135      	bne.n	8009e2a <_vfiprintf_r+0x1ce>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9203      	str	r2, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfb8      	it	lt
 8009dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dce:	3402      	adds	r4, #2
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009eb8 <_vfiprintf_r+0x25c>
 8009dd6:	7821      	ldrb	r1, [r4, #0]
 8009dd8:	2203      	movs	r2, #3
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fa28 	bl	8000230 <memchr>
 8009de0:	b140      	cbz	r0, 8009df4 <_vfiprintf_r+0x198>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	eba0 000a 	sub.w	r0, r0, sl
 8009de8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	4303      	orrs	r3, r0
 8009df0:	3401      	adds	r4, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	482c      	ldr	r0, [pc, #176]	; (8009eac <_vfiprintf_r+0x250>)
 8009dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfe:	2206      	movs	r2, #6
 8009e00:	f7f6 fa16 	bl	8000230 <memchr>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d03f      	beq.n	8009e88 <_vfiprintf_r+0x22c>
 8009e08:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <_vfiprintf_r+0x254>)
 8009e0a:	bb1b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x1f8>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	3307      	adds	r3, #7
 8009e10:	f023 0307 	bic.w	r3, r3, #7
 8009e14:	3308      	adds	r3, #8
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	443b      	add	r3, r7
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	e767      	b.n	8009cf0 <_vfiprintf_r+0x94>
 8009e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e24:	460c      	mov	r4, r1
 8009e26:	2001      	movs	r0, #1
 8009e28:	e7a5      	b.n	8009d76 <_vfiprintf_r+0x11a>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f04f 0c0a 	mov.w	ip, #10
 8009e36:	4620      	mov	r0, r4
 8009e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3c:	3a30      	subs	r2, #48	; 0x30
 8009e3e:	2a09      	cmp	r2, #9
 8009e40:	d903      	bls.n	8009e4a <_vfiprintf_r+0x1ee>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c5      	beq.n	8009dd2 <_vfiprintf_r+0x176>
 8009e46:	9105      	str	r1, [sp, #20]
 8009e48:	e7c3      	b.n	8009dd2 <_vfiprintf_r+0x176>
 8009e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4e:	4604      	mov	r4, r0
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7f0      	b.n	8009e36 <_vfiprintf_r+0x1da>
 8009e54:	ab03      	add	r3, sp, #12
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7fd ffe0 	bl	8007e24 <_printf_float>
 8009e64:	4607      	mov	r7, r0
 8009e66:	1c78      	adds	r0, r7, #1
 8009e68:	d1d6      	bne.n	8009e18 <_vfiprintf_r+0x1bc>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6c:	07d9      	lsls	r1, r3, #31
 8009e6e:	d405      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e70:	89ab      	ldrh	r3, [r5, #12]
 8009e72:	059a      	lsls	r2, r3, #22
 8009e74:	d402      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e78:	f000 faaf 	bl	800a3da <__retarget_lock_release_recursive>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af12 	bmi.w	8009ca8 <_vfiprintf_r+0x4c>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	e711      	b.n	8009cac <_vfiprintf_r+0x50>
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7fe fa6a 	bl	800836c <_printf_i>
 8009e98:	e7e4      	b.n	8009e64 <_vfiprintf_r+0x208>
 8009e9a:	bf00      	nop
 8009e9c:	0800aa84 	.word	0x0800aa84
 8009ea0:	0800aaa4 	.word	0x0800aaa4
 8009ea4:	0800aa64 	.word	0x0800aa64
 8009ea8:	0800a952 	.word	0x0800a952
 8009eac:	0800a95c 	.word	0x0800a95c
 8009eb0:	08007e25 	.word	0x08007e25
 8009eb4:	08009c37 	.word	0x08009c37
 8009eb8:	0800a958 	.word	0x0800a958

08009ebc <__swbuf_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	b118      	cbz	r0, 8009ece <__swbuf_r+0x12>
 8009ec6:	6983      	ldr	r3, [r0, #24]
 8009ec8:	b90b      	cbnz	r3, 8009ece <__swbuf_r+0x12>
 8009eca:	f000 f9e7 	bl	800a29c <__sinit>
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <__swbuf_r+0x98>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d12b      	bne.n	8009f2c <__swbuf_r+0x70>
 8009ed4:	686c      	ldr	r4, [r5, #4]
 8009ed6:	69a3      	ldr	r3, [r4, #24]
 8009ed8:	60a3      	str	r3, [r4, #8]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	071a      	lsls	r2, r3, #28
 8009ede:	d52f      	bpl.n	8009f40 <__swbuf_r+0x84>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	b36b      	cbz	r3, 8009f40 <__swbuf_r+0x84>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	1ac0      	subs	r0, r0, r3
 8009eea:	6963      	ldr	r3, [r4, #20]
 8009eec:	b2f6      	uxtb	r6, r6
 8009eee:	4283      	cmp	r3, r0
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	dc04      	bgt.n	8009efe <__swbuf_r+0x42>
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f000 f93c 	bl	800a174 <_fflush_r>
 8009efc:	bb30      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	6022      	str	r2, [r4, #0]
 8009f0a:	701e      	strb	r6, [r3, #0]
 8009f0c:	6963      	ldr	r3, [r4, #20]
 8009f0e:	3001      	adds	r0, #1
 8009f10:	4283      	cmp	r3, r0
 8009f12:	d004      	beq.n	8009f1e <__swbuf_r+0x62>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	07db      	lsls	r3, r3, #31
 8009f18:	d506      	bpl.n	8009f28 <__swbuf_r+0x6c>
 8009f1a:	2e0a      	cmp	r6, #10
 8009f1c:	d104      	bne.n	8009f28 <__swbuf_r+0x6c>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f927 	bl	800a174 <_fflush_r>
 8009f26:	b988      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <__swbuf_r+0x9c>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swbuf_r+0x7a>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7cf      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <__swbuf_r+0xa0>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7ca      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 f81a 	bl	8009f7c <__swsetup_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0cb      	beq.n	8009ee4 <__swbuf_r+0x28>
 8009f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f50:	e7ea      	b.n	8009f28 <__swbuf_r+0x6c>
 8009f52:	bf00      	nop
 8009f54:	0800aa84 	.word	0x0800aa84
 8009f58:	0800aaa4 	.word	0x0800aaa4
 8009f5c:	0800aa64 	.word	0x0800aa64

08009f60 <__ascii_wctomb>:
 8009f60:	b149      	cbz	r1, 8009f76 <__ascii_wctomb+0x16>
 8009f62:	2aff      	cmp	r2, #255	; 0xff
 8009f64:	bf85      	ittet	hi
 8009f66:	238a      	movhi	r3, #138	; 0x8a
 8009f68:	6003      	strhi	r3, [r0, #0]
 8009f6a:	700a      	strbls	r2, [r1, #0]
 8009f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f70:	bf98      	it	ls
 8009f72:	2001      	movls	r0, #1
 8009f74:	4770      	bx	lr
 8009f76:	4608      	mov	r0, r1
 8009f78:	4770      	bx	lr
	...

08009f7c <__swsetup_r>:
 8009f7c:	4b32      	ldr	r3, [pc, #200]	; (800a048 <__swsetup_r+0xcc>)
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	681d      	ldr	r5, [r3, #0]
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	b125      	cbz	r5, 8009f92 <__swsetup_r+0x16>
 8009f88:	69ab      	ldr	r3, [r5, #24]
 8009f8a:	b913      	cbnz	r3, 8009f92 <__swsetup_r+0x16>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f000 f985 	bl	800a29c <__sinit>
 8009f92:	4b2e      	ldr	r3, [pc, #184]	; (800a04c <__swsetup_r+0xd0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d10f      	bne.n	8009fb8 <__swsetup_r+0x3c>
 8009f98:	686c      	ldr	r4, [r5, #4]
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fa0:	0719      	lsls	r1, r3, #28
 8009fa2:	d42c      	bmi.n	8009ffe <__swsetup_r+0x82>
 8009fa4:	06dd      	lsls	r5, r3, #27
 8009fa6:	d411      	bmi.n	8009fcc <__swsetup_r+0x50>
 8009fa8:	2309      	movs	r3, #9
 8009faa:	6033      	str	r3, [r6, #0]
 8009fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	e03e      	b.n	800a036 <__swsetup_r+0xba>
 8009fb8:	4b25      	ldr	r3, [pc, #148]	; (800a050 <__swsetup_r+0xd4>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d101      	bne.n	8009fc2 <__swsetup_r+0x46>
 8009fbe:	68ac      	ldr	r4, [r5, #8]
 8009fc0:	e7eb      	b.n	8009f9a <__swsetup_r+0x1e>
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <__swsetup_r+0xd8>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	bf08      	it	eq
 8009fc8:	68ec      	ldreq	r4, [r5, #12]
 8009fca:	e7e6      	b.n	8009f9a <__swsetup_r+0x1e>
 8009fcc:	0758      	lsls	r0, r3, #29
 8009fce:	d512      	bpl.n	8009ff6 <__swsetup_r+0x7a>
 8009fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fd2:	b141      	cbz	r1, 8009fe6 <__swsetup_r+0x6a>
 8009fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d002      	beq.n	8009fe2 <__swsetup_r+0x66>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff fd0b 	bl	80099f8 <_free_r>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f043 0308 	orr.w	r3, r3, #8
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	b94b      	cbnz	r3, 800a016 <__swsetup_r+0x9a>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00c:	d003      	beq.n	800a016 <__swsetup_r+0x9a>
 800a00e:	4621      	mov	r1, r4
 800a010:	4630      	mov	r0, r6
 800a012:	f000 fa07 	bl	800a424 <__smakebuf_r>
 800a016:	89a0      	ldrh	r0, [r4, #12]
 800a018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a01c:	f010 0301 	ands.w	r3, r0, #1
 800a020:	d00a      	beq.n	800a038 <__swsetup_r+0xbc>
 800a022:	2300      	movs	r3, #0
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6963      	ldr	r3, [r4, #20]
 800a028:	425b      	negs	r3, r3
 800a02a:	61a3      	str	r3, [r4, #24]
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	b943      	cbnz	r3, 800a042 <__swsetup_r+0xc6>
 800a030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a034:	d1ba      	bne.n	8009fac <__swsetup_r+0x30>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	0781      	lsls	r1, r0, #30
 800a03a:	bf58      	it	pl
 800a03c:	6963      	ldrpl	r3, [r4, #20]
 800a03e:	60a3      	str	r3, [r4, #8]
 800a040:	e7f4      	b.n	800a02c <__swsetup_r+0xb0>
 800a042:	2000      	movs	r0, #0
 800a044:	e7f7      	b.n	800a036 <__swsetup_r+0xba>
 800a046:	bf00      	nop
 800a048:	20000010 	.word	0x20000010
 800a04c:	0800aa84 	.word	0x0800aa84
 800a050:	0800aaa4 	.word	0x0800aaa4
 800a054:	0800aa64 	.word	0x0800aa64

0800a058 <abort>:
 800a058:	b508      	push	{r3, lr}
 800a05a:	2006      	movs	r0, #6
 800a05c:	f000 fa4a 	bl	800a4f4 <raise>
 800a060:	2001      	movs	r0, #1
 800a062:	f7f8 fcd5 	bl	8002a10 <_exit>
	...

0800a068 <__sflush_r>:
 800a068:	898a      	ldrh	r2, [r1, #12]
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	0710      	lsls	r0, r2, #28
 800a072:	460c      	mov	r4, r1
 800a074:	d458      	bmi.n	800a128 <__sflush_r+0xc0>
 800a076:	684b      	ldr	r3, [r1, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc05      	bgt.n	800a088 <__sflush_r+0x20>
 800a07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc02      	bgt.n	800a088 <__sflush_r+0x20>
 800a082:	2000      	movs	r0, #0
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d0f9      	beq.n	800a082 <__sflush_r+0x1a>
 800a08e:	2300      	movs	r3, #0
 800a090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a094:	682f      	ldr	r7, [r5, #0]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	d032      	beq.n	800a100 <__sflush_r+0x98>
 800a09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	075a      	lsls	r2, r3, #29
 800a0a0:	d505      	bpl.n	800a0ae <__sflush_r+0x46>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	1ac0      	subs	r0, r0, r3
 800a0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a8:	b10b      	cbz	r3, 800a0ae <__sflush_r+0x46>
 800a0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ac:	1ac0      	subs	r0, r0, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b0      	blx	r6
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	d106      	bne.n	800a0ce <__sflush_r+0x66>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	291d      	cmp	r1, #29
 800a0c4:	d82c      	bhi.n	800a120 <__sflush_r+0xb8>
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <__sflush_r+0x108>)
 800a0c8:	40ca      	lsrs	r2, r1
 800a0ca:	07d6      	lsls	r6, r2, #31
 800a0cc:	d528      	bpl.n	800a120 <__sflush_r+0xb8>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6062      	str	r2, [r4, #4]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <__sflush_r+0x7c>
 800a0da:	1c42      	adds	r2, r0, #1
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0x7a>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b903      	cbnz	r3, 800a0e4 <__sflush_r+0x7c>
 800a0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d0ca      	beq.n	800a082 <__sflush_r+0x1a>
 800a0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <__sflush_r+0x92>
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f7ff fc7f 	bl	80099f8 <_free_r>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fe:	e7c1      	b.n	800a084 <__sflush_r+0x1c>
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	2301      	movs	r3, #1
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	1c41      	adds	r1, r0, #1
 800a10a:	d1c7      	bne.n	800a09c <__sflush_r+0x34>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c4      	beq.n	800a09c <__sflush_r+0x34>
 800a112:	2b1d      	cmp	r3, #29
 800a114:	d001      	beq.n	800a11a <__sflush_r+0xb2>
 800a116:	2b16      	cmp	r3, #22
 800a118:	d101      	bne.n	800a11e <__sflush_r+0xb6>
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	e7b1      	b.n	800a082 <__sflush_r+0x1a>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	e7ad      	b.n	800a084 <__sflush_r+0x1c>
 800a128:	690f      	ldr	r7, [r1, #16]
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d0a9      	beq.n	800a082 <__sflush_r+0x1a>
 800a12e:	0793      	lsls	r3, r2, #30
 800a130:	680e      	ldr	r6, [r1, #0]
 800a132:	bf08      	it	eq
 800a134:	694b      	ldreq	r3, [r1, #20]
 800a136:	600f      	str	r7, [r1, #0]
 800a138:	bf18      	it	ne
 800a13a:	2300      	movne	r3, #0
 800a13c:	eba6 0807 	sub.w	r8, r6, r7
 800a140:	608b      	str	r3, [r1, #8]
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	dd9c      	ble.n	800a082 <__sflush_r+0x1a>
 800a148:	6a21      	ldr	r1, [r4, #32]
 800a14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a14c:	4643      	mov	r3, r8
 800a14e:	463a      	mov	r2, r7
 800a150:	4628      	mov	r0, r5
 800a152:	47b0      	blx	r6
 800a154:	2800      	cmp	r0, #0
 800a156:	dc06      	bgt.n	800a166 <__sflush_r+0xfe>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e78e      	b.n	800a084 <__sflush_r+0x1c>
 800a166:	4407      	add	r7, r0
 800a168:	eba8 0800 	sub.w	r8, r8, r0
 800a16c:	e7e9      	b.n	800a142 <__sflush_r+0xda>
 800a16e:	bf00      	nop
 800a170:	20400001 	.word	0x20400001

0800a174 <_fflush_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b913      	cbnz	r3, 800a184 <_fflush_r+0x10>
 800a17e:	2500      	movs	r5, #0
 800a180:	4628      	mov	r0, r5
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	b118      	cbz	r0, 800a18e <_fflush_r+0x1a>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <_fflush_r+0x1a>
 800a18a:	f000 f887 	bl	800a29c <__sinit>
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <_fflush_r+0x6c>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d11b      	bne.n	800a1cc <_fflush_r+0x58>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ef      	beq.n	800a17e <_fflush_r+0xa>
 800a19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d404      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a4:	0599      	lsls	r1, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f000 f915 	bl	800a3d8 <__retarget_lock_acquire_recursive>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f7ff ff59 	bl	800a068 <__sflush_r>
 800a1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b8:	07da      	lsls	r2, r3, #31
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	d4e0      	bmi.n	800a180 <_fflush_r+0xc>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d4dd      	bmi.n	800a180 <_fflush_r+0xc>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f000 f908 	bl	800a3da <__retarget_lock_release_recursive>
 800a1ca:	e7d9      	b.n	800a180 <_fflush_r+0xc>
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_fflush_r+0x70>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <_fflush_r+0x62>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7df      	b.n	800a196 <_fflush_r+0x22>
 800a1d6:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <_fflush_r+0x74>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7da      	b.n	800a196 <_fflush_r+0x22>
 800a1e0:	0800aa84 	.word	0x0800aa84
 800a1e4:	0800aaa4 	.word	0x0800aaa4
 800a1e8:	0800aa64 	.word	0x0800aa64

0800a1ec <std>:
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a1f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1fa:	6083      	str	r3, [r0, #8]
 800a1fc:	8181      	strh	r1, [r0, #12]
 800a1fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a200:	81c2      	strh	r2, [r0, #14]
 800a202:	6183      	str	r3, [r0, #24]
 800a204:	4619      	mov	r1, r3
 800a206:	2208      	movs	r2, #8
 800a208:	305c      	adds	r0, #92	; 0x5c
 800a20a:	f7fd fd63 	bl	8007cd4 <memset>
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <std+0x38>)
 800a210:	6263      	str	r3, [r4, #36]	; 0x24
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <std+0x3c>)
 800a214:	62a3      	str	r3, [r4, #40]	; 0x28
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <std+0x40>)
 800a218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <std+0x44>)
 800a21c:	6224      	str	r4, [r4, #32]
 800a21e:	6323      	str	r3, [r4, #48]	; 0x30
 800a220:	bd10      	pop	{r4, pc}
 800a222:	bf00      	nop
 800a224:	0800a52d 	.word	0x0800a52d
 800a228:	0800a54f 	.word	0x0800a54f
 800a22c:	0800a587 	.word	0x0800a587
 800a230:	0800a5ab 	.word	0x0800a5ab

0800a234 <_cleanup_r>:
 800a234:	4901      	ldr	r1, [pc, #4]	; (800a23c <_cleanup_r+0x8>)
 800a236:	f000 b8af 	b.w	800a398 <_fwalk_reent>
 800a23a:	bf00      	nop
 800a23c:	0800a175 	.word	0x0800a175

0800a240 <__sfmoreglue>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	1e4a      	subs	r2, r1, #1
 800a244:	2568      	movs	r5, #104	; 0x68
 800a246:	4355      	muls	r5, r2
 800a248:	460e      	mov	r6, r1
 800a24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a24e:	f7ff fc23 	bl	8009a98 <_malloc_r>
 800a252:	4604      	mov	r4, r0
 800a254:	b140      	cbz	r0, 800a268 <__sfmoreglue+0x28>
 800a256:	2100      	movs	r1, #0
 800a258:	e9c0 1600 	strd	r1, r6, [r0]
 800a25c:	300c      	adds	r0, #12
 800a25e:	60a0      	str	r0, [r4, #8]
 800a260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a264:	f7fd fd36 	bl	8007cd4 <memset>
 800a268:	4620      	mov	r0, r4
 800a26a:	bd70      	pop	{r4, r5, r6, pc}

0800a26c <__sfp_lock_acquire>:
 800a26c:	4801      	ldr	r0, [pc, #4]	; (800a274 <__sfp_lock_acquire+0x8>)
 800a26e:	f000 b8b3 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a272:	bf00      	nop
 800a274:	200011f4 	.word	0x200011f4

0800a278 <__sfp_lock_release>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__sfp_lock_release+0x8>)
 800a27a:	f000 b8ae 	b.w	800a3da <__retarget_lock_release_recursive>
 800a27e:	bf00      	nop
 800a280:	200011f4 	.word	0x200011f4

0800a284 <__sinit_lock_acquire>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__sinit_lock_acquire+0x8>)
 800a286:	f000 b8a7 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	200011ef 	.word	0x200011ef

0800a290 <__sinit_lock_release>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sinit_lock_release+0x8>)
 800a292:	f000 b8a2 	b.w	800a3da <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	200011ef 	.word	0x200011ef

0800a29c <__sinit>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4604      	mov	r4, r0
 800a2a0:	f7ff fff0 	bl	800a284 <__sinit_lock_acquire>
 800a2a4:	69a3      	ldr	r3, [r4, #24]
 800a2a6:	b11b      	cbz	r3, 800a2b0 <__sinit+0x14>
 800a2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ac:	f7ff bff0 	b.w	800a290 <__sinit_lock_release>
 800a2b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2b6:	4b13      	ldr	r3, [pc, #76]	; (800a304 <__sinit+0x68>)
 800a2b8:	4a13      	ldr	r2, [pc, #76]	; (800a308 <__sinit+0x6c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	bf04      	itt	eq
 800a2c2:	2301      	moveq	r3, #1
 800a2c4:	61a3      	streq	r3, [r4, #24]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 f820 	bl	800a30c <__sfp>
 800a2cc:	6060      	str	r0, [r4, #4]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 f81c 	bl	800a30c <__sfp>
 800a2d4:	60a0      	str	r0, [r4, #8]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f818 	bl	800a30c <__sfp>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	60e0      	str	r0, [r4, #12]
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	6860      	ldr	r0, [r4, #4]
 800a2e4:	f7ff ff82 	bl	800a1ec <std>
 800a2e8:	68a0      	ldr	r0, [r4, #8]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	2109      	movs	r1, #9
 800a2ee:	f7ff ff7d 	bl	800a1ec <std>
 800a2f2:	68e0      	ldr	r0, [r4, #12]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	2112      	movs	r1, #18
 800a2f8:	f7ff ff78 	bl	800a1ec <std>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	61a3      	str	r3, [r4, #24]
 800a300:	e7d2      	b.n	800a2a8 <__sinit+0xc>
 800a302:	bf00      	nop
 800a304:	0800a6e0 	.word	0x0800a6e0
 800a308:	0800a235 	.word	0x0800a235

0800a30c <__sfp>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	4607      	mov	r7, r0
 800a310:	f7ff ffac 	bl	800a26c <__sfp_lock_acquire>
 800a314:	4b1e      	ldr	r3, [pc, #120]	; (800a390 <__sfp+0x84>)
 800a316:	681e      	ldr	r6, [r3, #0]
 800a318:	69b3      	ldr	r3, [r6, #24]
 800a31a:	b913      	cbnz	r3, 800a322 <__sfp+0x16>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff ffbd 	bl	800a29c <__sinit>
 800a322:	3648      	adds	r6, #72	; 0x48
 800a324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a328:	3b01      	subs	r3, #1
 800a32a:	d503      	bpl.n	800a334 <__sfp+0x28>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	b30b      	cbz	r3, 800a374 <__sfp+0x68>
 800a330:	6836      	ldr	r6, [r6, #0]
 800a332:	e7f7      	b.n	800a324 <__sfp+0x18>
 800a334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a338:	b9d5      	cbnz	r5, 800a370 <__sfp+0x64>
 800a33a:	4b16      	ldr	r3, [pc, #88]	; (800a394 <__sfp+0x88>)
 800a33c:	60e3      	str	r3, [r4, #12]
 800a33e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a342:	6665      	str	r5, [r4, #100]	; 0x64
 800a344:	f000 f847 	bl	800a3d6 <__retarget_lock_init_recursive>
 800a348:	f7ff ff96 	bl	800a278 <__sfp_lock_release>
 800a34c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a354:	6025      	str	r5, [r4, #0]
 800a356:	61a5      	str	r5, [r4, #24]
 800a358:	2208      	movs	r2, #8
 800a35a:	4629      	mov	r1, r5
 800a35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a360:	f7fd fcb8 	bl	8007cd4 <memset>
 800a364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a36c:	4620      	mov	r0, r4
 800a36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a370:	3468      	adds	r4, #104	; 0x68
 800a372:	e7d9      	b.n	800a328 <__sfp+0x1c>
 800a374:	2104      	movs	r1, #4
 800a376:	4638      	mov	r0, r7
 800a378:	f7ff ff62 	bl	800a240 <__sfmoreglue>
 800a37c:	4604      	mov	r4, r0
 800a37e:	6030      	str	r0, [r6, #0]
 800a380:	2800      	cmp	r0, #0
 800a382:	d1d5      	bne.n	800a330 <__sfp+0x24>
 800a384:	f7ff ff78 	bl	800a278 <__sfp_lock_release>
 800a388:	230c      	movs	r3, #12
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	e7ee      	b.n	800a36c <__sfp+0x60>
 800a38e:	bf00      	nop
 800a390:	0800a6e0 	.word	0x0800a6e0
 800a394:	ffff0001 	.word	0xffff0001

0800a398 <_fwalk_reent>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4606      	mov	r6, r0
 800a39e:	4688      	mov	r8, r1
 800a3a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3a4:	2700      	movs	r7, #0
 800a3a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ae:	d505      	bpl.n	800a3bc <_fwalk_reent+0x24>
 800a3b0:	6824      	ldr	r4, [r4, #0]
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	d1f7      	bne.n	800a3a6 <_fwalk_reent+0xe>
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3bc:	89ab      	ldrh	r3, [r5, #12]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d907      	bls.n	800a3d2 <_fwalk_reent+0x3a>
 800a3c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	d003      	beq.n	800a3d2 <_fwalk_reent+0x3a>
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	47c0      	blx	r8
 800a3d0:	4307      	orrs	r7, r0
 800a3d2:	3568      	adds	r5, #104	; 0x68
 800a3d4:	e7e9      	b.n	800a3aa <_fwalk_reent+0x12>

0800a3d6 <__retarget_lock_init_recursive>:
 800a3d6:	4770      	bx	lr

0800a3d8 <__retarget_lock_acquire_recursive>:
 800a3d8:	4770      	bx	lr

0800a3da <__retarget_lock_release_recursive>:
 800a3da:	4770      	bx	lr

0800a3dc <__swhatbuf_r>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	460e      	mov	r6, r1
 800a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	b096      	sub	sp, #88	; 0x58
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	461d      	mov	r5, r3
 800a3ec:	da07      	bge.n	800a3fe <__swhatbuf_r+0x22>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	89b3      	ldrh	r3, [r6, #12]
 800a3f4:	061a      	lsls	r2, r3, #24
 800a3f6:	d410      	bmi.n	800a41a <__swhatbuf_r+0x3e>
 800a3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fc:	e00e      	b.n	800a41c <__swhatbuf_r+0x40>
 800a3fe:	466a      	mov	r2, sp
 800a400:	f000 f8fa 	bl	800a5f8 <_fstat_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	dbf2      	blt.n	800a3ee <__swhatbuf_r+0x12>
 800a408:	9a01      	ldr	r2, [sp, #4]
 800a40a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a40e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a412:	425a      	negs	r2, r3
 800a414:	415a      	adcs	r2, r3
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	e7ee      	b.n	800a3f8 <__swhatbuf_r+0x1c>
 800a41a:	2340      	movs	r3, #64	; 0x40
 800a41c:	2000      	movs	r0, #0
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	b016      	add	sp, #88	; 0x58
 800a422:	bd70      	pop	{r4, r5, r6, pc}

0800a424 <__smakebuf_r>:
 800a424:	898b      	ldrh	r3, [r1, #12]
 800a426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a428:	079d      	lsls	r5, r3, #30
 800a42a:	4606      	mov	r6, r0
 800a42c:	460c      	mov	r4, r1
 800a42e:	d507      	bpl.n	800a440 <__smakebuf_r+0x1c>
 800a430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	6123      	str	r3, [r4, #16]
 800a438:	2301      	movs	r3, #1
 800a43a:	6163      	str	r3, [r4, #20]
 800a43c:	b002      	add	sp, #8
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	ab01      	add	r3, sp, #4
 800a442:	466a      	mov	r2, sp
 800a444:	f7ff ffca 	bl	800a3dc <__swhatbuf_r>
 800a448:	9900      	ldr	r1, [sp, #0]
 800a44a:	4605      	mov	r5, r0
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fb23 	bl	8009a98 <_malloc_r>
 800a452:	b948      	cbnz	r0, 800a468 <__smakebuf_r+0x44>
 800a454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a458:	059a      	lsls	r2, r3, #22
 800a45a:	d4ef      	bmi.n	800a43c <__smakebuf_r+0x18>
 800a45c:	f023 0303 	bic.w	r3, r3, #3
 800a460:	f043 0302 	orr.w	r3, r3, #2
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7e3      	b.n	800a430 <__smakebuf_r+0xc>
 800a468:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <__smakebuf_r+0x7c>)
 800a46a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	6020      	str	r0, [r4, #0]
 800a470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	6163      	str	r3, [r4, #20]
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	6120      	str	r0, [r4, #16]
 800a47e:	b15b      	cbz	r3, 800a498 <__smakebuf_r+0x74>
 800a480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a484:	4630      	mov	r0, r6
 800a486:	f000 f8c9 	bl	800a61c <_isatty_r>
 800a48a:	b128      	cbz	r0, 800a498 <__smakebuf_r+0x74>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	f043 0301 	orr.w	r3, r3, #1
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	89a0      	ldrh	r0, [r4, #12]
 800a49a:	4305      	orrs	r5, r0
 800a49c:	81a5      	strh	r5, [r4, #12]
 800a49e:	e7cd      	b.n	800a43c <__smakebuf_r+0x18>
 800a4a0:	0800a235 	.word	0x0800a235

0800a4a4 <_raise_r>:
 800a4a4:	291f      	cmp	r1, #31
 800a4a6:	b538      	push	{r3, r4, r5, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	d904      	bls.n	800a4b8 <_raise_r+0x14>
 800a4ae:	2316      	movs	r3, #22
 800a4b0:	6003      	str	r3, [r0, #0]
 800a4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ba:	b112      	cbz	r2, 800a4c2 <_raise_r+0x1e>
 800a4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c0:	b94b      	cbnz	r3, 800a4d6 <_raise_r+0x32>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f830 	bl	800a528 <_getpid_r>
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f000 b817 	b.w	800a504 <_kill_r>
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d00a      	beq.n	800a4f0 <_raise_r+0x4c>
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	d103      	bne.n	800a4e6 <_raise_r+0x42>
 800a4de:	2316      	movs	r3, #22
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	e7e7      	b.n	800a4b6 <_raise_r+0x12>
 800a4e6:	2400      	movs	r4, #0
 800a4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	4798      	blx	r3
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7e0      	b.n	800a4b6 <_raise_r+0x12>

0800a4f4 <raise>:
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <raise+0xc>)
 800a4f6:	4601      	mov	r1, r0
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	f7ff bfd3 	b.w	800a4a4 <_raise_r>
 800a4fe:	bf00      	nop
 800a500:	20000010 	.word	0x20000010

0800a504 <_kill_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	; (800a524 <_kill_r+0x20>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	f7f8 fa6d 	bl	80029f0 <_kill>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d102      	bne.n	800a520 <_kill_r+0x1c>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	b103      	cbz	r3, 800a520 <_kill_r+0x1c>
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop
 800a524:	200011e8 	.word	0x200011e8

0800a528 <_getpid_r>:
 800a528:	f7f8 ba5a 	b.w	80029e0 <_getpid>

0800a52c <__sread>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
 800a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a534:	f000 f894 	bl	800a660 <_read_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	bfab      	itete	ge
 800a53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a53e:	89a3      	ldrhlt	r3, [r4, #12]
 800a540:	181b      	addge	r3, r3, r0
 800a542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a546:	bfac      	ite	ge
 800a548:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54a:	81a3      	strhlt	r3, [r4, #12]
 800a54c:	bd10      	pop	{r4, pc}

0800a54e <__swrite>:
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	461f      	mov	r7, r3
 800a554:	898b      	ldrh	r3, [r1, #12]
 800a556:	05db      	lsls	r3, r3, #23
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	4616      	mov	r6, r2
 800a55e:	d505      	bpl.n	800a56c <__swrite+0x1e>
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	2302      	movs	r3, #2
 800a566:	2200      	movs	r2, #0
 800a568:	f000 f868 	bl	800a63c <_lseek_r>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	f000 b817 	b.w	800a5b4 <_write_r>

0800a586 <__sseek>:
 800a586:	b510      	push	{r4, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 f855 	bl	800a63c <_lseek_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	bf15      	itete	ne
 800a598:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a59e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a2:	81a3      	strheq	r3, [r4, #12]
 800a5a4:	bf18      	it	ne
 800a5a6:	81a3      	strhne	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__sclose>:
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 b813 	b.w	800a5d8 <_close_r>
	...

0800a5b4 <_write_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	; (800a5d4 <_write_r+0x20>)
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	602a      	str	r2, [r5, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f7f8 fa4b 	bl	8002a5e <_write>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_write_r+0x1e>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_write_r+0x1e>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	200011e8 	.word	0x200011e8

0800a5d8 <_close_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	; (800a5f4 <_close_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f8 fa57 	bl	8002a96 <_close>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_close_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_close_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	200011e8 	.word	0x200011e8

0800a5f8 <_fstat_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_fstat_r+0x20>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	4611      	mov	r1, r2
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	f7f8 fa52 	bl	8002aae <_fstat>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d102      	bne.n	800a614 <_fstat_r+0x1c>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	b103      	cbz	r3, 800a614 <_fstat_r+0x1c>
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	bf00      	nop
 800a618:	200011e8 	.word	0x200011e8

0800a61c <_isatty_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d06      	ldr	r5, [pc, #24]	; (800a638 <_isatty_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	f7f8 fa51 	bl	8002ace <_isatty>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_isatty_r+0x1a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_isatty_r+0x1a>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200011e8 	.word	0x200011e8

0800a63c <_lseek_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	; (800a65c <_lseek_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f8 fa4a 	bl	8002ae4 <_lseek>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_lseek_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_lseek_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	200011e8 	.word	0x200011e8

0800a660 <_read_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_read_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f8 f9d8 	bl	8002a24 <_read>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_read_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_read_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	200011e8 	.word	0x200011e8

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
